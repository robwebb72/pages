{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Knowledgarium This is my repository of study notes and miscellanous bits and pieces. Enjoy!","title":"The Knowledgarium"},{"location":"#the-knowledgarium","text":"This is my repository of study notes and miscellanous bits and pieces. Enjoy!","title":"The Knowledgarium"},{"location":"it/mac_setup/","text":"Setting up a MacBook Pro Sierra Settings Touchpad Settings -> Touchpad -> tap to click Increase tracking speed (optional... more of a personal preference) Others Settings -> General -> Show scroll bars -> always Recent Items -> none Settings -> Display change the scale to your own preference Finder Finder Menu -> Preferences General tab show hard drive new finder window shows: user home folder Sidebar tab maybe add in additional shortcuts Advanced tab show all filename extensions remove items from the trash after 30 days In a finder window... right click and select Show View Options Always open in icon view Browse in icon view Group by name Sort by name show item info -then select use as defaults once you're happy with it Click on an open finder window and go to View menu (top of screen) display path bar display status bar display tab bar Desktop Close all finder windows, then right click on desktop and select View Options increase grid size to maximum tick show info sort by: snap to grid Maybe reduce text size Switching from Windows to Mac Cmd + Tab -> flick between apps Cmd + Q -> close tab (can also do this while cmd + tab'ing)","title":"Setting up a MacBook Pro"},{"location":"it/mac_setup/#setting-up-a-macbook-pro","text":"","title":"Setting up a MacBook Pro"},{"location":"it/mac_setup/#sierra","text":"","title":"Sierra"},{"location":"it/mac_setup/#settings","text":"","title":"Settings"},{"location":"it/mac_setup/#touchpad","text":"Settings -> Touchpad -> tap to click Increase tracking speed (optional... more of a personal preference)","title":"Touchpad"},{"location":"it/mac_setup/#others","text":"Settings -> General -> Show scroll bars -> always Recent Items -> none","title":"Others"},{"location":"it/mac_setup/#settings-display","text":"change the scale to your own preference","title":"Settings -&gt; Display"},{"location":"it/mac_setup/#finder","text":"Finder Menu -> Preferences General tab show hard drive new finder window shows: user home folder Sidebar tab maybe add in additional shortcuts Advanced tab show all filename extensions remove items from the trash after 30 days In a finder window... right click and select Show View Options Always open in icon view Browse in icon view Group by name Sort by name show item info -then select use as defaults once you're happy with it Click on an open finder window and go to View menu (top of screen) display path bar display status bar display tab bar","title":"Finder"},{"location":"it/mac_setup/#desktop","text":"Close all finder windows, then right click on desktop and select View Options increase grid size to maximum tick show info sort by: snap to grid Maybe reduce text size","title":"Desktop"},{"location":"it/mac_setup/#switching-from-windows-to-mac","text":"Cmd + Tab -> flick between apps Cmd + Q -> close tab (can also do this while cmd + tab'ing)","title":"Switching from Windows to Mac"},{"location":"it/linux/bash_tips/","text":"bash bash_profile and .bashrc Mac add lines to the bottom of the .bash_profile file in your home directory Windows GitBash shell edit (or create) the .bashrc file in the user's Windows home file (e.g. c:\\\\Users\\\\username ) Bash Prompt Coloring export PS1=\"\\[\\e[31m\\]\\u\\[\\e[m\\]@\\[\\e[32m\\]\\w\\[\\e[m\\]$ \" \\u is user \\w is working directory \\[\\e[31m\\] ... \\[\\e[m\\] is red foreground \\[\\e[32m\\] ... \\[\\e[m\\] is green foreground \\[\\e[m\\] -> resets colour \\e => escape 30 black 31 red 32 green 33 yellow 34 blue 35 magenta 36 cyan 37 white","title":"bash"},{"location":"it/linux/bash_tips/#bash","text":"","title":"bash"},{"location":"it/linux/bash_tips/#bash_profile-and-bashrc","text":"","title":"bash_profile and .bashrc"},{"location":"it/linux/bash_tips/#mac","text":"add lines to the bottom of the .bash_profile file in your home directory","title":"Mac"},{"location":"it/linux/bash_tips/#windows-gitbash-shell","text":"edit (or create) the .bashrc file in the user's Windows home file (e.g. c:\\\\Users\\\\username )","title":"Windows GitBash shell"},{"location":"it/linux/bash_tips/#bash-prompt-coloring","text":"export PS1=\"\\[\\e[31m\\]\\u\\[\\e[m\\]@\\[\\e[32m\\]\\w\\[\\e[m\\]$ \" \\u is user \\w is working directory \\[\\e[31m\\] ... \\[\\e[m\\] is red foreground \\[\\e[32m\\] ... \\[\\e[m\\] is green foreground \\[\\e[m\\] -> resets colour \\e => escape 30 black 31 red 32 green 33 yellow 34 blue 35 magenta 36 cyan 37 white","title":"Bash Prompt Coloring"},{"location":"it/linux/terminal/","text":"Linux Terminal Making a Symbolic Link ln -s /path/to/dir path/to/symbolic_link","title":"Linux Terminal"},{"location":"it/linux/terminal/#linux-terminal","text":"","title":"Linux Terminal"},{"location":"it/linux/terminal/#making-a-symbolic-link","text":"ln -s /path/to/dir path/to/symbolic_link","title":"Making a Symbolic Link"},{"location":"it/linux/various/","text":"Linux Misc Bits Finding the version of ubuntu you\u2019re using:- cat /etc/lsb-release","title":"Linux Misc Bits"},{"location":"it/linux/various/#linux-misc-bits","text":"Finding the version of ubuntu you\u2019re using:- cat /etc/lsb-release","title":"Linux Misc Bits"},{"location":"software_dev/3d/3d_geometry/","text":"Geometry for 3D Rendering Polygon Winding Working out if a triangles points are in clockwise or anti-clockwise order can be used to backface cull a polygon. // triangle is made up of points (x1,y1), (x2,y2), (x3,y3) int edge1 = (x2 - x1) * (y2 + y1); int edge2 = (x3 - x2) * (y3 + y2); int edge3 = (x1 - x3) * (y1 + y3); if (edge1 + edge2 + edge3 < 0) // triangle is facing away - don't draw it Dot and Cross Products","title":"Geometry for 3D Rendering"},{"location":"software_dev/3d/3d_geometry/#geometry-for-3d-rendering","text":"","title":"Geometry for 3D Rendering"},{"location":"software_dev/3d/3d_geometry/#polygon-winding","text":"Working out if a triangles points are in clockwise or anti-clockwise order can be used to backface cull a polygon. // triangle is made up of points (x1,y1), (x2,y2), (x3,y3) int edge1 = (x2 - x1) * (y2 + y1); int edge2 = (x3 - x2) * (y3 + y2); int edge3 = (x1 - x3) * (y1 + y3); if (edge1 + edge2 + edge3 < 0) // triangle is facing away - don't draw it","title":"Polygon Winding"},{"location":"software_dev/3d/3d_geometry/#dot-and-cross-products","text":"","title":"Dot and Cross Products"},{"location":"software_dev/C%23/arrays/","text":"C# Arrays .Length returns size of array Index starts at 0 value types vs reference types value - set to default value reference types need to be instantiated remember - structs are values and so will take up space arrays themselves are reference types Rectangular Arrays int [,] matrix = new int[3,3]; .GetLength(0) - returns size of 1st dimension .GetLength(1) - returns size of 2nd dimension Jagged Arrays int [][] matrix = new int [3][]; for(int i = 0; i< matrix.Length; i++) { matrix[i] = new int[i+1]; }","title":"C# Arrays"},{"location":"software_dev/C%23/arrays/#c-arrays","text":".Length returns size of array Index starts at 0","title":"C# Arrays"},{"location":"software_dev/C%23/arrays/#value-types-vs-reference-types","text":"value - set to default value reference types need to be instantiated remember - structs are values and so will take up space arrays themselves are reference types","title":"value types vs reference types"},{"location":"software_dev/C%23/arrays/#rectangular-arrays","text":"int [,] matrix = new int[3,3]; .GetLength(0) - returns size of 1st dimension .GetLength(1) - returns size of 2nd dimension","title":"Rectangular Arrays"},{"location":"software_dev/C%23/arrays/#jagged-arrays","text":"int [][] matrix = new int [3][]; for(int i = 0; i< matrix.Length; i++) { matrix[i] = new int[i+1]; }","title":"Jagged Arrays"},{"location":"software_dev/C%23/dependency_inversion/","text":"C# Dependency Inversion - Example public void Test_Imagination_02() { var sweeper = new Sweepable(); var gallery = new ArtExhibit(); var wallart = new Carpet(sweeper, gallery); wallart.PerformActions(); } public class Carpet { public List<IAction> Actions = new List<IAction>(); public Carpet(params IAction[] possibleActions) { this.Actions.AddRange(possibleActions); } public PerformActions() { foreach(IAction action in Actions) { action.PerformActions(); } } } public interface IAction { void PerformAction(); } public class Sweepable : IAction { public void Sweep() { // do stuff } public void PerformAction() { this.Sweep(); } } public class ArtExhibit : IAction { public void Exhibit() { // do stuff } public void PerformAction() { } }","title":"C# Dependency Inversion - Example"},{"location":"software_dev/C%23/dependency_inversion/#c-dependency-inversion-example","text":"public void Test_Imagination_02() { var sweeper = new Sweepable(); var gallery = new ArtExhibit(); var wallart = new Carpet(sweeper, gallery); wallart.PerformActions(); } public class Carpet { public List<IAction> Actions = new List<IAction>(); public Carpet(params IAction[] possibleActions) { this.Actions.AddRange(possibleActions); } public PerformActions() { foreach(IAction action in Actions) { action.PerformActions(); } } } public interface IAction { void PerformAction(); } public class Sweepable : IAction { public void Sweep() { // do stuff } public void PerformAction() { this.Sweep(); } } public class ArtExhibit : IAction { public void Exhibit() { // do stuff } public void PerformAction() { } }","title":"C# Dependency Inversion - Example"},{"location":"software_dev/C%23/dictionaries/","text":"C# Dictionaries Initialization Dictionary<key_type, value_type> dic = new Dictionary<key_type, value_type>; Useful functions method action dic.ContainsKey(key) dic.Contains(key, value) dic[key] returns value associated with that key or throws KeyNotFoundException dic.TryGetValue(key, out value) returns true or false, loads value with any data found dic.Remove(key) Looping foreach(KeyValuePair<keyType, valueType> item in dic) { // do something }","title":"C# Dictionaries"},{"location":"software_dev/C%23/dictionaries/#c-dictionaries","text":"","title":"C# Dictionaries"},{"location":"software_dev/C%23/dictionaries/#initialization","text":"Dictionary<key_type, value_type> dic = new Dictionary<key_type, value_type>;","title":"Initialization"},{"location":"software_dev/C%23/dictionaries/#useful-functions","text":"method action dic.ContainsKey(key) dic.Contains(key, value) dic[key] returns value associated with that key or throws KeyNotFoundException dic.TryGetValue(key, out value) returns true or false, loads value with any data found dic.Remove(key)","title":"Useful functions"},{"location":"software_dev/C%23/dictionaries/#looping","text":"foreach(KeyValuePair<keyType, valueType> item in dic) { // do something }","title":"Looping"},{"location":"software_dev/C%23/ienumerable/","text":"C# IEnumerable Every object that implements IEnumberable can be used with the foreach statement. var numbers = new List<int> = { 1, 3, 5, 7, 11}; Assert.IsTrue(numbers is IEnumerable<int>); var e = numbers.GetEnumerator(); bool hasData = e.MoveNext(); Assert.IsTrue(hasData); int i = e.Current; Assert.IsTrue(i == 1); // the following is a demonstration of how foreach() works.. numbers.Reset(); while(numbers.MoveNext()) { //do something with e.Current; }","title":"C# IEnumerable"},{"location":"software_dev/C%23/ienumerable/#c-ienumerable","text":"Every object that implements IEnumberable can be used with the foreach statement. var numbers = new List<int> = { 1, 3, 5, 7, 11}; Assert.IsTrue(numbers is IEnumerable<int>); var e = numbers.GetEnumerator(); bool hasData = e.MoveNext(); Assert.IsTrue(hasData); int i = e.Current; Assert.IsTrue(i == 1); // the following is a demonstration of how foreach() works.. numbers.Reset(); while(numbers.MoveNext()) { //do something with e.Current; }","title":"C# IEnumerable"},{"location":"software_dev/C%23/inheritance/","text":"C# Inheritance Java C# Super Class Base Class Sub Class Derived Class public class DerivedClass : BaseClass // defining a dervice class Base Classes base class constructor (not implicitly called, as in Java) public DerivedClass(string name, int a) : BaseClass(name) { ... } base class methods base.DrawWindow(); // calling a base class method Or, an overriding method calling the base class method public override void DrawWindow() { base.DrawWindow(); ... } Method calling in base classes and derived classes BaseClass dc = new DerivedClass(); dc is declared as a BaseClass (even though it's instantiated as a DerivedClass), so if you call an overriden method in the dc it will call the method from the BaseClass (this is the same as in java) Abstract Classes abstract public class Window { abstract public void DrawWindow(); // NB. no implemenation (& illegal to add one) } public class MyWindow : Window { public override void DrawWindow() { // implementation goes here } } Sealed Classes The same as final classes The Object Class methods: Equals() GetHashCode() GetType() ToString() Finalize() // cleans up non memory resources MemberwiseClone() // creates copies of the object - should never be implemented by your type ReferenceEquals() // two objects refer to same instance // an example of overriding the ToString() method public override string ToString() { return name; } Boxing & Unboxing Boxing is implicit Unboxing is explicit int j = (int) o; // Unboxing - can throw InvalidCastException Nested Classes public class Fraction { private int denominator; ... internal class FractionDisplay { public void Draw(Fraction f) // can reference private members of Fraction, eg. denominator { ... } } static void Main() { Fraction f1 = new Fraction(3,4); Fraction.FractionDisplay fd = new Fraction.FractionDisplay(); fd.Draw(f1); } } Operator Overloading it's common to overload == to indicate if two objects are equal. if you overload == , you must also overload != if you overload > , you must also overload < (and vice versa) if you overload >= , you must also overload <= (and vice versa) If you overload == it is recommended that you overload .Equals() , for example:- public override bool Equals(object o) { if(!(o is Fraction)) { return false; } return this == (Fraction) o; } Looks rather like the standard way of overloading the .equals() method in Java .","title":"C# Inheritance"},{"location":"software_dev/C%23/inheritance/#c-inheritance","text":"Java C# Super Class Base Class Sub Class Derived Class public class DerivedClass : BaseClass // defining a dervice class","title":"C# Inheritance"},{"location":"software_dev/C%23/inheritance/#base-classes","text":"","title":"Base Classes"},{"location":"software_dev/C%23/inheritance/#base-class-constructor","text":"(not implicitly called, as in Java) public DerivedClass(string name, int a) : BaseClass(name) { ... }","title":"base class constructor"},{"location":"software_dev/C%23/inheritance/#base-class-methods","text":"base.DrawWindow(); // calling a base class method Or, an overriding method calling the base class method public override void DrawWindow() { base.DrawWindow(); ... }","title":"base class methods"},{"location":"software_dev/C%23/inheritance/#method-calling-in-base-classes-and-derived-classes","text":"BaseClass dc = new DerivedClass(); dc is declared as a BaseClass (even though it's instantiated as a DerivedClass), so if you call an overriden method in the dc it will call the method from the BaseClass (this is the same as in java)","title":"Method calling in base classes and derived classes"},{"location":"software_dev/C%23/inheritance/#abstract-classes","text":"abstract public class Window { abstract public void DrawWindow(); // NB. no implemenation (& illegal to add one) } public class MyWindow : Window { public override void DrawWindow() { // implementation goes here } }","title":"Abstract Classes"},{"location":"software_dev/C%23/inheritance/#sealed-classes","text":"The same as final classes","title":"Sealed Classes"},{"location":"software_dev/C%23/inheritance/#the-object-class","text":"methods: Equals() GetHashCode() GetType() ToString() Finalize() // cleans up non memory resources MemberwiseClone() // creates copies of the object - should never be implemented by your type ReferenceEquals() // two objects refer to same instance // an example of overriding the ToString() method public override string ToString() { return name; }","title":"The Object Class"},{"location":"software_dev/C%23/inheritance/#boxing-unboxing","text":"Boxing is implicit Unboxing is explicit int j = (int) o; // Unboxing - can throw InvalidCastException","title":"Boxing &amp; Unboxing"},{"location":"software_dev/C%23/inheritance/#nested-classes","text":"public class Fraction { private int denominator; ... internal class FractionDisplay { public void Draw(Fraction f) // can reference private members of Fraction, eg. denominator { ... } } static void Main() { Fraction f1 = new Fraction(3,4); Fraction.FractionDisplay fd = new Fraction.FractionDisplay(); fd.Draw(f1); } }","title":"Nested Classes"},{"location":"software_dev/C%23/inheritance/#operator-overloading","text":"it's common to overload == to indicate if two objects are equal. if you overload == , you must also overload != if you overload > , you must also overload < (and vice versa) if you overload >= , you must also overload <= (and vice versa) If you overload == it is recommended that you overload .Equals() , for example:- public override bool Equals(object o) { if(!(o is Fraction)) { return false; } return this == (Fraction) o; } Looks rather like the standard way of overloading the .equals() method in Java .","title":"Operator Overloading"},{"location":"software_dev/C%23/lists/","text":"C# Lists using using System.Collections; using System.Collections.Generics; // for generic Creation, Adding, Looping List<string> tokens = new List<string>(); tokens.add(token); foreach(string token in tokens) { Console.WriteLine(token); } tokens[1]; // access item at index 1 Sorting deviceList.sort( (x, y) => String.Compare(x.Hierarchy, y.Hierarchy) ); Cool Code Just seen this nice bit of code written by Neil... (it's a little bit functional) List<string> ids = ListGrid.GetSelection(); List<Guid> newIds = ids.ConvertAll(id => new Guid(id));","title":"C# Lists"},{"location":"software_dev/C%23/lists/#c-lists","text":"","title":"C# Lists"},{"location":"software_dev/C%23/lists/#using","text":"using System.Collections; using System.Collections.Generics; // for generic","title":"using"},{"location":"software_dev/C%23/lists/#creation-adding-looping","text":"List<string> tokens = new List<string>(); tokens.add(token); foreach(string token in tokens) { Console.WriteLine(token); } tokens[1]; // access item at index 1","title":"Creation, Adding, Looping"},{"location":"software_dev/C%23/lists/#sorting","text":"deviceList.sort( (x, y) => String.Compare(x.Hierarchy, y.Hierarchy) );","title":"Sorting"},{"location":"software_dev/C%23/lists/#cool-code","text":"Just seen this nice bit of code written by Neil... (it's a little bit functional) List<string> ids = ListGrid.GetSelection(); List<Guid> newIds = ids.ConvertAll(id => new Guid(id));","title":"Cool Code"},{"location":"software_dev/C%23/objects_and_classes/","text":"C# Misc Stuff Main This is C# so Main is captialised. Also, it can be set to return void instead of int public class MyClass { public static int Main( ) { } } Class Members Default access modifier is private (but it\u2019s best to declare this explicitly) public private protected - accessible by any class derived from this class internal - accessible by any method in this class\u2019s assembly protected internal - same as protected OR internal Default values numeric => 0 bool => false char => 0 enum => 0 ref => null Method Arguments Pass by value (can be made to pass by reference with the ref keyword) Default values for arguments Public void myMethod(int x = 42) // setting a default value { \u2026 Pass by reference // method signature public void GetTime(ref int h, ref int min, ref sec) { // code } //method call t.GetTime(ref hour, ref min, ref sec); NOTE: Cannot pass an uninitialised variable as a reference argument Constructors public class MyClass { public MyClass(int number) { \u2026 } } just like in Java can be overloaded can be marked as private Copy Constructors Creates a new object by copying an existing object, eg. public MyClass(MyClass myClass) { \u2026 this.number = myClass.number ... } Also check out the ICloneable interface in .NET Static Methods Button.StaticMethod(); cannot access via an instance of Button. Static Constructors Creates a new object by copying an existing object, eg. Static Time() { Name = \u201cTime\u201d; } run before any object is instantiated no access modifiers on static constructors Destroying Objects An object's destructor is called when object is garbage collected - never call this yourself! - leave it to the garbage collector. ~MyClass() { // my code } This get translated to: protected override void Finalize() { try { // my code } finally { base.Finalize(); } } Dispose Used to dispose of precious resources as quickly as possible. (e.g. file handles) using System; class Testing : IDisposable // IDisposable requires implements to define public void Dispose() { bool is_disposed = false; protected virtual void Dispose(bool disposing) { if(!is_disposed) // only dispose once! { if(disposing) { Console.WriteLine(\"Not in destructor, OK to reference other objects\"); } // perform clean up for this object Console.WriteLine(\"Disposing...\"); } this.is_disposed = true; } public void Dispose() { Dispose(true); GC.SuppressFinalize(this); // stops the GC from calling this object's destructor } ~Testing() { Dispose(false); Console.WriteLine(\"In destructor\"); } } Disposing of resources with 'using' using System; class Test { public static void Main() { // METHOD 1. using(Font theFont = new Font(\"Arial\", 10.0f)) // initialising { // use the font here } // compiler will now call Dispose() on the Font at this point // METHOD 2. Font nextFont = new Font(\"Courier\",12.0f); using(nextFont) { // do some in Courier 12 } // compile now calls Dispose() on nextFont } }","title":"C# Misc Stuff"},{"location":"software_dev/C%23/objects_and_classes/#c-misc-stuff","text":"","title":"C# Misc Stuff"},{"location":"software_dev/C%23/objects_and_classes/#main","text":"This is C# so Main is captialised. Also, it can be set to return void instead of int public class MyClass { public static int Main( ) { } }","title":"Main"},{"location":"software_dev/C%23/objects_and_classes/#class-members","text":"Default access modifier is private (but it\u2019s best to declare this explicitly) public private protected - accessible by any class derived from this class internal - accessible by any method in this class\u2019s assembly protected internal - same as protected OR internal","title":"Class Members"},{"location":"software_dev/C%23/objects_and_classes/#default-values","text":"numeric => 0 bool => false char => 0 enum => 0 ref => null","title":"Default values"},{"location":"software_dev/C%23/objects_and_classes/#method-arguments","text":"Pass by value (can be made to pass by reference with the ref keyword)","title":"Method Arguments"},{"location":"software_dev/C%23/objects_and_classes/#default-values-for-arguments","text":"Public void myMethod(int x = 42) // setting a default value { \u2026","title":"Default values for arguments"},{"location":"software_dev/C%23/objects_and_classes/#pass-by-reference","text":"// method signature public void GetTime(ref int h, ref int min, ref sec) { // code } //method call t.GetTime(ref hour, ref min, ref sec); NOTE: Cannot pass an uninitialised variable as a reference argument","title":"Pass by reference"},{"location":"software_dev/C%23/objects_and_classes/#constructors","text":"public class MyClass { public MyClass(int number) { \u2026 } } just like in Java can be overloaded can be marked as private","title":"Constructors"},{"location":"software_dev/C%23/objects_and_classes/#copy-constructors","text":"Creates a new object by copying an existing object, eg. public MyClass(MyClass myClass) { \u2026 this.number = myClass.number ... } Also check out the ICloneable interface in .NET","title":"Copy Constructors"},{"location":"software_dev/C%23/objects_and_classes/#static-methods","text":"Button.StaticMethod(); cannot access via an instance of Button.","title":"Static Methods"},{"location":"software_dev/C%23/objects_and_classes/#static-constructors","text":"Creates a new object by copying an existing object, eg. Static Time() { Name = \u201cTime\u201d; } run before any object is instantiated no access modifiers on static constructors","title":"Static Constructors"},{"location":"software_dev/C%23/objects_and_classes/#destroying-objects","text":"An object's destructor is called when object is garbage collected - never call this yourself! - leave it to the garbage collector. ~MyClass() { // my code } This get translated to: protected override void Finalize() { try { // my code } finally { base.Finalize(); } }","title":"Destroying Objects"},{"location":"software_dev/C%23/objects_and_classes/#dispose","text":"Used to dispose of precious resources as quickly as possible. (e.g. file handles) using System; class Testing : IDisposable // IDisposable requires implements to define public void Dispose() { bool is_disposed = false; protected virtual void Dispose(bool disposing) { if(!is_disposed) // only dispose once! { if(disposing) { Console.WriteLine(\"Not in destructor, OK to reference other objects\"); } // perform clean up for this object Console.WriteLine(\"Disposing...\"); } this.is_disposed = true; } public void Dispose() { Dispose(true); GC.SuppressFinalize(this); // stops the GC from calling this object's destructor } ~Testing() { Dispose(false); Console.WriteLine(\"In destructor\"); } } Disposing of resources with 'using' using System; class Test { public static void Main() { // METHOD 1. using(Font theFont = new Font(\"Arial\", 10.0f)) // initialising { // use the font here } // compiler will now call Dispose() on the Font at this point // METHOD 2. Font nextFont = new Font(\"Courier\",12.0f); using(nextFont) { // do some in Courier 12 } // compile now calls Dispose() on nextFont } }","title":"Dispose"},{"location":"software_dev/C%23/operators/","text":"C# Operators Bitwise The usual operators \\~ (complement) & and | or ^ xor << shift left >> shift right Conditional Operators Usual suspects... ! && || (these will shortcut where appropriate) & | will also work, but DON'T shortcut Ternary (a > b) ? a : b;","title":"C# Operators"},{"location":"software_dev/C%23/operators/#c-operators","text":"","title":"C# Operators"},{"location":"software_dev/C%23/operators/#bitwise","text":"The usual operators \\~ (complement) & and | or ^ xor << shift left >> shift right","title":"Bitwise"},{"location":"software_dev/C%23/operators/#conditional-operators","text":"Usual suspects... ! && || (these will shortcut where appropriate) & | will also work, but DON'T shortcut Ternary (a > b) ? a : b;","title":"Conditional Operators"},{"location":"software_dev/C%23/parameters/","text":"C# Parameters Pass by Ref & by Out void Foo(ref int x) { ... } // method signature with ref Foo(ref x); // calling method void Foo(out string name) { ... } // method signature with out Foo(out x); // calling method out parameters do not need to be defined before being passed. They must be assigned in the function before returning. ref parameters need to be defined before being passed in. Optional Parameters void Foo(int x = 42) { ... }; Named parameters void Foo(int x = 10, int y = 20 ) { ... } Foo(x:1, y:2); <-- x= 1, y= 2 Foo(y:3); <-- x=10, y= 3 Foo(y:3, x:4); <-- x= 4, y= 3 Foo(y:9); <-- x=10, y= 9 Foo(100, y:20); <-- x=100, y= 20 // positional BEFORE named parameter","title":"C# Parameters"},{"location":"software_dev/C%23/parameters/#c-parameters","text":"","title":"C# Parameters"},{"location":"software_dev/C%23/parameters/#pass-by-ref-by-out","text":"void Foo(ref int x) { ... } // method signature with ref Foo(ref x); // calling method void Foo(out string name) { ... } // method signature with out Foo(out x); // calling method out parameters do not need to be defined before being passed. They must be assigned in the function before returning. ref parameters need to be defined before being passed in.","title":"Pass by Ref &amp; by Out"},{"location":"software_dev/C%23/parameters/#optional-parameters","text":"void Foo(int x = 42) { ... };","title":"Optional Parameters"},{"location":"software_dev/C%23/parameters/#named-parameters","text":"void Foo(int x = 10, int y = 20 ) { ... } Foo(x:1, y:2); <-- x= 1, y= 2 Foo(y:3); <-- x=10, y= 3 Foo(y:3, x:4); <-- x= 4, y= 3 Foo(y:9); <-- x=10, y= 9 Foo(100, y:20); <-- x=100, y= 20 // positional BEFORE named parameter","title":"Named parameters"},{"location":"software_dev/C%23/properties/","text":"C# Properties Adds a layer of abstraction between values and external interface. Effectively they are getters and setters with boilerplate code removed Rather than returning the value of an internal member, can return a calculated value. Doing the work of a small method (e.g. IsListEmpty() ) while again reducing boilerplate code The output of properties can be treated as data (for example in the inclusion of data tables), this is useful when using properties as the output of methods (as in point 2 above) public class Time { public int Hour { get { return // some value; } set { // do some work here; } } } Declaring the variable for the property is not needed in the newer versions of C#. Unless you are attempting to manually save the value in the get block. The default version of this is... public class Time { public int Hour // capitalized { get; private set; } } Example public int someVar { get; set; } public bool hasList { get { return myList != null and myList.Count>0; } }","title":"C# Properties"},{"location":"software_dev/C%23/properties/#c-properties","text":"Adds a layer of abstraction between values and external interface. Effectively they are getters and setters with boilerplate code removed Rather than returning the value of an internal member, can return a calculated value. Doing the work of a small method (e.g. IsListEmpty() ) while again reducing boilerplate code The output of properties can be treated as data (for example in the inclusion of data tables), this is useful when using properties as the output of methods (as in point 2 above) public class Time { public int Hour { get { return // some value; } set { // do some work here; } } } Declaring the variable for the property is not needed in the newer versions of C#. Unless you are attempting to manually save the value in the get block. The default version of this is... public class Time { public int Hour // capitalized { get; private set; } }","title":"C# Properties"},{"location":"software_dev/C%23/properties/#example","text":"public int someVar { get; set; } public bool hasList { get { return myList != null and myList.Count>0; } }","title":"Example"},{"location":"software_dev/C%23/strings/","text":"C# Strings verbatim -> @\"Verbatim string, which can include linefeeds, etc.\" Concatenation string myString = \"a\" + 5; // returns \"a5\" - calls .ToString() on the 5 However, better to use the StringBuilder class for lots of concatenations. Comparison == applies to value of string (not to its reference) < and > not allowed. Need to use CompareTo() s.IndexOf(\u2018a\u2019); // returns first position of \u2018a\u2019 (or -1 if not found) s.IndexOf(\u2018a\u2019, i); // returns first position of \u2018a\u2019 from position i onwards s.Substring(start , count); // returns the next count characters from string s, starting at position start Trimming characters from a String string MyString = \"{Hello World!}\"; MyString = MyString.Trim(new Char[] { '{', '}' }); This can be used to remove chars from any point within the string (not just the end). Other methods on String can be more specific, e.g. MyString.TrimStart( [char array] ) MyString.TrimEnd( [char array] ) Formatting Console.WriteLine(\"{0}, {1}!\", \"Hello\", \"World\"); Chars \\' \\\" \\\\ \\0 \\u or \\x can be used to specify unicode chars, e.g. char copyrightSymbol = '\\u00A9'; char omegaSymbol = '\\u03A9'; Conversion char to unsigned short is implicit. All other conversions must be explicit. Strings Arrays","title":"C# Strings"},{"location":"software_dev/C%23/strings/#c-strings","text":"verbatim -> @\"Verbatim string, which can include linefeeds, etc.\" Concatenation string myString = \"a\" + 5; // returns \"a5\" - calls .ToString() on the 5 However, better to use the StringBuilder class for lots of concatenations. Comparison == applies to value of string (not to its reference) < and > not allowed. Need to use CompareTo() s.IndexOf(\u2018a\u2019); // returns first position of \u2018a\u2019 (or -1 if not found) s.IndexOf(\u2018a\u2019, i); // returns first position of \u2018a\u2019 from position i onwards s.Substring(start , count); // returns the next count characters from string s, starting at position start","title":"C# Strings"},{"location":"software_dev/C%23/strings/#trimming-characters-from-a-string","text":"string MyString = \"{Hello World!}\"; MyString = MyString.Trim(new Char[] { '{', '}' }); This can be used to remove chars from any point within the string (not just the end). Other methods on String can be more specific, e.g. MyString.TrimStart( [char array] ) MyString.TrimEnd( [char array] )","title":"Trimming characters from a String"},{"location":"software_dev/C%23/strings/#formatting","text":"Console.WriteLine(\"{0}, {1}!\", \"Hello\", \"World\");","title":"Formatting"},{"location":"software_dev/C%23/strings/#chars","text":"\\' \\\" \\\\ \\0 \\u or \\x can be used to specify unicode chars, e.g. char copyrightSymbol = '\\u00A9'; char omegaSymbol = '\\u03A9'; Conversion char to unsigned short is implicit. All other conversions must be explicit.","title":"Chars"},{"location":"software_dev/C%23/strings/#strings","text":"","title":"Strings"},{"location":"software_dev/C%23/strings/#arrays","text":"","title":"Arrays"},{"location":"software_dev/C%23/various/","text":"C# Various Bits and Pieces Other operators Int? myInt = null; // Int defined with a ? - object may be nullable Reading from the Console string theInput; do { Console.WriteLine(\"Prompt: \"); theInput = Console.ReadLine(); if(!theInput.Equals(\"exit\")) { // process theInput } } while (!theInput.Equals(\"exit\")); Preprocessor #define DEBUG #undef DEBUG #if DEBUG #else #elif #endif #region ... #endregion Namespaces similiar to Java packages can be nested Dates and Times System.DateTime currentTime = System.DateTime.Now; 8 & 16 Bit Arithmetic arithmetic is handled by 32 bit & above, anything less than 16 bits must be cast back, e.g. short x= 1, y = 2; short z= x + y; // compile error short z= (short) (x + y); // runs Special Floating Point Values NaN (Not a number) double.NaN, float.NaN double.PositiveInfinity, float.PositiveInfinity double.NegativeInfinity, float.NegativeInfinity .MaxValue .MinValue .Epsilon (and others...) Testing for NaN if (x.IsNaN) ... Garbage Collection Handled by the garbage collection - cannot explicitly delete objects. Also, the Heap also contains statics and constants. Assignments local variables - undefined until assignment member variables - set to default value (0 or null) can set a variable to its default value, e.g. decimal d = default(decimal)","title":"C# Various Bits and Pieces"},{"location":"software_dev/C%23/various/#c-various-bits-and-pieces","text":"","title":"C# Various Bits and Pieces"},{"location":"software_dev/C%23/various/#other-operators","text":"Int? myInt = null; // Int defined with a ? - object may be nullable","title":"Other operators"},{"location":"software_dev/C%23/various/#reading-from-the-console","text":"string theInput; do { Console.WriteLine(\"Prompt: \"); theInput = Console.ReadLine(); if(!theInput.Equals(\"exit\")) { // process theInput } } while (!theInput.Equals(\"exit\"));","title":"Reading from the Console"},{"location":"software_dev/C%23/various/#preprocessor","text":"#define DEBUG #undef DEBUG #if DEBUG #else #elif #endif #region ... #endregion","title":"Preprocessor"},{"location":"software_dev/C%23/various/#namespaces","text":"similiar to Java packages can be nested","title":"Namespaces"},{"location":"software_dev/C%23/various/#dates-and-times","text":"System.DateTime currentTime = System.DateTime.Now;","title":"Dates and Times"},{"location":"software_dev/C%23/various/#8-16-bit-arithmetic","text":"arithmetic is handled by 32 bit & above, anything less than 16 bits must be cast back, e.g. short x= 1, y = 2; short z= x + y; // compile error short z= (short) (x + y); // runs","title":"8 &amp; 16 Bit Arithmetic"},{"location":"software_dev/C%23/various/#special-floating-point-values","text":"NaN (Not a number) double.NaN, float.NaN double.PositiveInfinity, float.PositiveInfinity double.NegativeInfinity, float.NegativeInfinity .MaxValue .MinValue .Epsilon (and others...)","title":"Special Floating Point Values"},{"location":"software_dev/C%23/various/#testing-for-nan","text":"if (x.IsNaN) ...","title":"Testing for NaN"},{"location":"software_dev/C%23/various/#garbage-collection","text":"Handled by the garbage collection - cannot explicitly delete objects. Also, the Heap also contains statics and constants.","title":"Garbage Collection"},{"location":"software_dev/C%23/various/#assignments","text":"local variables - undefined until assignment member variables - set to default value (0 or null) can set a variable to its default value, e.g. decimal d = default(decimal)","title":"Assignments"},{"location":"software_dev/C%23/linq/Scott%27s%20Linq%20Blog/","text":"Learning from ScottGu's Linq Blog Blog 1 The Data Context This class is the main conduit by which we query entities from the database and apply changes back to it. Server Side Paging NorthWindDataContext dc= new NorthWindDataContext(); var products = (from p in dc.Products where p.Category.CategoryName.StartsWith(\"C\") select p).Skip(200).Take(10); Skip(200) starting with row 200 Take(10) only take the first 10 rows Blog 2 Entity Classes Entity Classes map to tables within the database. Entity classes do not have to derive from a specific base class - this means they can inherit from any object you want. All classes created using the Linq2SQL designer are partial classes - can optionally add additional properties, methods or events to them. Renaming Within the LINQ2SQL Designer surface you can rename entities, properties and associations. Relaionships & Associations The above association causes the following:- the Product entity has a \"Cateogry\" property the Category entty has a \"Products\" collection Delayed/Lazy Loading Can specify whether properties on entities are delay loaded (e.g. in the example above we are delay loading an image). This will only load the image when it is acutally being used, rather than in a simple query that is returning all the CategoryNames. Stored Procedures Can drag and drop SPROCs onto an entity in the LINQ2SQL designer surface where appropriate, for strong type linking (this isn't possible in all cases) . For example, with a stroed proc that returns a list of Products, drag the proc onto the Products table to create a return type of IEnumerable\\ . Stored Procs for Updating/Inserting and Deleting Can change the update/insert/delete methods on an entity to use a stored proc. This is done at the mapping layer of LINQ2SQL. This means that developers do not have to change their code even if an optimised sproc is later put in place.","title":"Learning from ScottGu's Linq Blog"},{"location":"software_dev/C%23/linq/Scott%27s%20Linq%20Blog/#learning-from-scottgus-linq-blog","text":"","title":"Learning from ScottGu's Linq Blog"},{"location":"software_dev/C%23/linq/Scott%27s%20Linq%20Blog/#blog-1","text":"","title":"Blog 1"},{"location":"software_dev/C%23/linq/Scott%27s%20Linq%20Blog/#the-data-context","text":"This class is the main conduit by which we query entities from the database and apply changes back to it.","title":"The Data Context"},{"location":"software_dev/C%23/linq/Scott%27s%20Linq%20Blog/#server-side-paging","text":"NorthWindDataContext dc= new NorthWindDataContext(); var products = (from p in dc.Products where p.Category.CategoryName.StartsWith(\"C\") select p).Skip(200).Take(10); Skip(200) starting with row 200 Take(10) only take the first 10 rows","title":"Server Side Paging"},{"location":"software_dev/C%23/linq/Scott%27s%20Linq%20Blog/#blog-2","text":"","title":"Blog 2"},{"location":"software_dev/C%23/linq/Scott%27s%20Linq%20Blog/#entity-classes","text":"Entity Classes map to tables within the database. Entity classes do not have to derive from a specific base class - this means they can inherit from any object you want. All classes created using the Linq2SQL designer are partial classes - can optionally add additional properties, methods or events to them.","title":"Entity Classes"},{"location":"software_dev/C%23/linq/Scott%27s%20Linq%20Blog/#renaming","text":"Within the LINQ2SQL Designer surface you can rename entities, properties and associations.","title":"Renaming"},{"location":"software_dev/C%23/linq/Scott%27s%20Linq%20Blog/#relaionships-associations","text":"The above association causes the following:- the Product entity has a \"Cateogry\" property the Category entty has a \"Products\" collection","title":"Relaionships &amp; Associations"},{"location":"software_dev/C%23/linq/Scott%27s%20Linq%20Blog/#delayedlazy-loading","text":"Can specify whether properties on entities are delay loaded (e.g. in the example above we are delay loading an image). This will only load the image when it is acutally being used, rather than in a simple query that is returning all the CategoryNames.","title":"Delayed/Lazy Loading"},{"location":"software_dev/C%23/linq/Scott%27s%20Linq%20Blog/#stored-procedures","text":"Can drag and drop SPROCs onto an entity in the LINQ2SQL designer surface where appropriate, for strong type linking (this isn't possible in all cases) . For example, with a stroed proc that returns a list of Products, drag the proc onto the Products table to create a return type of IEnumerable\\ .","title":"Stored Procedures"},{"location":"software_dev/C%23/linq/Scott%27s%20Linq%20Blog/#stored-procs-for-updatinginserting-and-deleting","text":"Can change the update/insert/delete methods on an entity to use a stored proc. This is done at the mapping layer of LINQ2SQL. This means that developers do not have to change their code even if an optimised sproc is later put in place.","title":"Stored Procs for Updating/Inserting and Deleting"},{"location":"software_dev/Coding/clean_code_01/","text":"Clean Code Part 1 Code should be readable and it should be easy to see what it's doing 2. Names Use intention revealing names Use consistent spellings Use the same word for the same concept through your code (e.g. pick one of 'write' or 'save', don't switch between them) Distinctions should be meaningful, avoid noise words like (the, data, a, info, String, Object) Class Names should be a singular noun or noun phrase name No encoding Use searchable names Use pronounceable names Method Names should have a verb or verb phrase name constructors with overloaded static factory methods, should have a name that describes the argument MarsRaiserUnit.FromString(\"Unit 1/34/23/12\") Use solution domain names (e.g. comp sci terms, algorithm names, pattern names) Use problem domain names 3. Functions should do one thing only, and do it well should be small (max of 20 lines) indentation at most 1 or 2 either do something, or answer something (Command, or Query) no side effects Avoid switch statements - use polymorphism instead Arguments ideally 0 1 or 2 is OK 3 should be avoided avoid flag arguments variable arguments count as a single argument avoid output arguments Use exceptions instead of returning error codes separate error handling from valid code path Error handling is ONE THING so a function that handles errors should only do that DON'T REPEAT YOURSELF 6. Structured Coding ideally every function should have one entry point and one exit point Code is refined to fit these rules, your first drafts won't manage it. But have unit tests in place before you start refactoring.","title":"Clean Code Part 1"},{"location":"software_dev/Coding/clean_code_01/#clean-code-part-1","text":"Code should be readable and it should be easy to see what it's doing","title":"Clean Code Part 1"},{"location":"software_dev/Coding/clean_code_01/#2-names","text":"Use intention revealing names Use consistent spellings Use the same word for the same concept through your code (e.g. pick one of 'write' or 'save', don't switch between them) Distinctions should be meaningful, avoid noise words like (the, data, a, info, String, Object) Class Names should be a singular noun or noun phrase name No encoding Use searchable names Use pronounceable names Method Names should have a verb or verb phrase name constructors with overloaded static factory methods, should have a name that describes the argument MarsRaiserUnit.FromString(\"Unit 1/34/23/12\") Use solution domain names (e.g. comp sci terms, algorithm names, pattern names) Use problem domain names","title":"2. Names"},{"location":"software_dev/Coding/clean_code_01/#3-functions","text":"should do one thing only, and do it well should be small (max of 20 lines) indentation at most 1 or 2 either do something, or answer something (Command, or Query) no side effects Avoid switch statements - use polymorphism instead","title":"3. Functions"},{"location":"software_dev/Coding/clean_code_01/#arguments","text":"ideally 0 1 or 2 is OK 3 should be avoided avoid flag arguments variable arguments count as a single argument avoid output arguments","title":"Arguments"},{"location":"software_dev/Coding/clean_code_01/#use-exceptions-instead-of-returning-error-codes","text":"separate error handling from valid code path Error handling is ONE THING so a function that handles errors should only do that DON'T REPEAT YOURSELF","title":"Use exceptions instead of returning error codes"},{"location":"software_dev/Coding/clean_code_01/#6-structured-coding","text":"ideally every function should have one entry point and one exit point Code is refined to fit these rules, your first drafts won't manage it. But have unit tests in place before you start refactoring.","title":"6.  Structured Coding"},{"location":"software_dev/Coding/general_coding_and_learning/","text":"Learning Coding in General Use \u2018this\u2019 to make it obvious what you\u2019re referring to in a method. Be consistent in the way you access stuff\u2026 e.g. pick one of \u201cWays[0]\u201d or \u201cWays.First()\u201d and stick to it (don\u2019t swap between them). Note \u201cWays.First()\u201d returns an object reference that does allow you to update data within it. Aim is to make the code as easy to read as possible Don't include extra names in enums. e.g. DeviceConfig.~~Config~~Unspecified is better written as DeviceConfig.Unspecified Properties in class should be Captialised Raise exceptions as soon as they occur. Functions Naming Consider the return types in the name. e.g. use GetCentreID() rather than GetCentre() if you are returning the ID of the object rather than the object. Also consider exactly what the function is doing. Returning Avoid multiple returns in different places in a method. Various exit points not seen as a good thing. Be a bit Dijkstra about it all. Changing incoming parameters for output Avoid changing parameters that are passed into a function. Better to return a new value that change a value. Refactoring This is kind of my refactoring checklist (it's a work in progress!\ud83d\ude01) Overview of code Reformat code spaces between methods spaces in methods position of braces Clean up 'using' code block Remove extra 'using' declarations Right click on the using block at the top of the file and select 'Organize Usings' -> 'Remove and Sort' Handy Hints and Shortcuts VMs In Windows 10 - use CMD + Space to change keyboard region. Very handy when you need a #, if you aren't using a Win UK keyboard. (also in Win 10, use WinKey and . to bring up the emoticon panel) VS2010 Shortcut Autocomplete - Tab + Tab Shortcut Format Code - Ctrl + E , D VSCode (mac) Shortcut Duplicate line Shift + Alt + Down (mac & win) Shortcut Multiple cursors (column) Cmd + Alt (mac) Ctrl + Alt (win)) Shortcut Multiple cursors (separate) Alt + mouse click (mac & win) VB Shortcut View Object Browser - F2 Shortcut Go Back - Ctrl + Shift + F2","title":"Learning"},{"location":"software_dev/Coding/general_coding_and_learning/#learning","text":"","title":"Learning"},{"location":"software_dev/Coding/general_coding_and_learning/#coding-in-general","text":"Use \u2018this\u2019 to make it obvious what you\u2019re referring to in a method. Be consistent in the way you access stuff\u2026 e.g. pick one of \u201cWays[0]\u201d or \u201cWays.First()\u201d and stick to it (don\u2019t swap between them). Note \u201cWays.First()\u201d returns an object reference that does allow you to update data within it. Aim is to make the code as easy to read as possible Don't include extra names in enums. e.g. DeviceConfig.~~Config~~Unspecified is better written as DeviceConfig.Unspecified Properties in class should be Captialised Raise exceptions as soon as they occur.","title":"Coding in General"},{"location":"software_dev/Coding/general_coding_and_learning/#functions","text":"","title":"Functions"},{"location":"software_dev/Coding/general_coding_and_learning/#naming","text":"Consider the return types in the name. e.g. use GetCentreID() rather than GetCentre() if you are returning the ID of the object rather than the object. Also consider exactly what the function is doing.","title":"Naming"},{"location":"software_dev/Coding/general_coding_and_learning/#returning","text":"Avoid multiple returns in different places in a method. Various exit points not seen as a good thing. Be a bit Dijkstra about it all.","title":"Returning"},{"location":"software_dev/Coding/general_coding_and_learning/#changing-incoming-parameters-for-output","text":"Avoid changing parameters that are passed into a function. Better to return a new value that change a value.","title":"Changing incoming parameters for output"},{"location":"software_dev/Coding/general_coding_and_learning/#refactoring","text":"This is kind of my refactoring checklist (it's a work in progress!\ud83d\ude01) Overview of code Reformat code spaces between methods spaces in methods position of braces Clean up 'using' code block","title":"Refactoring"},{"location":"software_dev/Coding/general_coding_and_learning/#remove-extra-using-declarations","text":"Right click on the using block at the top of the file and select 'Organize Usings' -> 'Remove and Sort'","title":"Remove extra 'using' declarations"},{"location":"software_dev/Coding/general_coding_and_learning/#handy-hints-and-shortcuts","text":"","title":"Handy Hints and Shortcuts"},{"location":"software_dev/Coding/general_coding_and_learning/#vms","text":"In Windows 10 - use CMD + Space to change keyboard region. Very handy when you need a #, if you aren't using a Win UK keyboard. (also in Win 10, use WinKey and . to bring up the emoticon panel)","title":"VMs"},{"location":"software_dev/Coding/general_coding_and_learning/#vs2010","text":"Shortcut Autocomplete - Tab + Tab Shortcut Format Code - Ctrl + E , D","title":"VS2010"},{"location":"software_dev/Coding/general_coding_and_learning/#vscode-mac","text":"Shortcut Duplicate line Shift + Alt + Down (mac & win) Shortcut Multiple cursors (column) Cmd + Alt (mac) Ctrl + Alt (win)) Shortcut Multiple cursors (separate) Alt + mouse click (mac & win)","title":"VSCode (mac)"},{"location":"software_dev/Coding/general_coding_and_learning/#vb","text":"Shortcut View Object Browser - F2 Shortcut Go Back - Ctrl + Shift + F2","title":"VB"},{"location":"software_dev/Design%20Patterns/strategy/","text":"The Strategy Pattern","title":"The Strategy Pattern"},{"location":"software_dev/Design%20Patterns/strategy/#the-strategy-pattern","text":"","title":"The Strategy Pattern"},{"location":"software_dev/Functional%20Programming/general/","text":"Functional Programming Overview First Class Functions functions can be used as inputs and outputs of other functions functions can be assigned to variables and can be stored in collections can perform all the operations on functions that you can do with values of other types Higher-Order Funcions takes other functions as arguments, or returns them as results Avoiding state mutation once created an object never changes Pure functions no side effects (no memory external to function is modified, no I/O, no exceptions thrown) when called with same values will always return the same result Closure a function passed around along with it's environment Currying evaluating multiple arguments of a function, one by one, producing intermediate results f(x,y) = x + y f(3,4) = 3 + 4 substituting for x we get f(3, y) = 3 + y Define g(y) as g(y) = 3 + y then following is true: f(3,y) = g(y) = 3 + y","title":"Functional Programming"},{"location":"software_dev/Functional%20Programming/general/#functional-programming","text":"","title":"Functional Programming"},{"location":"software_dev/Functional%20Programming/general/#overview","text":"","title":"Overview"},{"location":"software_dev/Functional%20Programming/general/#first-class-functions","text":"functions can be used as inputs and outputs of other functions functions can be assigned to variables and can be stored in collections can perform all the operations on functions that you can do with values of other types","title":"First Class Functions"},{"location":"software_dev/Functional%20Programming/general/#higher-order-funcions","text":"takes other functions as arguments, or returns them as results","title":"Higher-Order Funcions"},{"location":"software_dev/Functional%20Programming/general/#avoiding-state-mutation","text":"once created an object never changes","title":"Avoiding state mutation"},{"location":"software_dev/Functional%20Programming/general/#pure-functions","text":"no side effects (no memory external to function is modified, no I/O, no exceptions thrown) when called with same values will always return the same result","title":"Pure functions"},{"location":"software_dev/Functional%20Programming/general/#closure","text":"a function passed around along with it's environment","title":"Closure"},{"location":"software_dev/Functional%20Programming/general/#currying","text":"evaluating multiple arguments of a function, one by one, producing intermediate results f(x,y) = x + y f(3,4) = 3 + 4 substituting for x we get f(3, y) = 3 + y Define g(y) as g(y) = 3 + y then following is true: f(3,y) = g(y) = 3 + y","title":"Currying"},{"location":"software_dev/Katas/csharp_katas/","text":"C# Katas Exes and Ohs using System.Linq; public static class Kata { public static bool XO (string input) { return input.Where(chr => chr=='X' || chr=='x').Count() == input.Where(chr => chr=='O' || chr=='o').Count(); } } Invert values using System.Linq; public static class ArraysInversion { public static int[] InvertValues(int[] input) { return input.Select(x => -x).ToArray(); } } Calculate Average using System.Linq; class AverageSolution { public static double FindAverage(double[] array) { return array.Length == 0 ? 0 : array.Average(); } } Highest and Lowest Given a string like \"4 3 5 -19 23 13 22\", return a string with the highest and lowest values in in, e.g. \"23 -19\" using System; // needed for String using System.Linq; public static class Kata { public static string HighAndLow(string numbers) { return String.Format(\"{0} {1}\", numbers.Split(' ').Max(x => int.Parse(x)), numbers.Split(' ').Min(x => int.Parse(x)) ); } } Friend or Foe Return an array of names that are 4 chars long. Do not change the order from the input array. using System.Linq; using System.Collections.Generic; public static class Kata { public static IEnumerable<string> FriendOrFoe (string[] names) { return names.Where(name => name.Length==4); } }","title":"C# Katas"},{"location":"software_dev/Katas/csharp_katas/#c-katas","text":"","title":"C# Katas"},{"location":"software_dev/Katas/csharp_katas/#exes-and-ohs","text":"using System.Linq; public static class Kata { public static bool XO (string input) { return input.Where(chr => chr=='X' || chr=='x').Count() == input.Where(chr => chr=='O' || chr=='o').Count(); } }","title":"Exes and Ohs"},{"location":"software_dev/Katas/csharp_katas/#invert-values","text":"using System.Linq; public static class ArraysInversion { public static int[] InvertValues(int[] input) { return input.Select(x => -x).ToArray(); } }","title":"Invert values"},{"location":"software_dev/Katas/csharp_katas/#calculate-average","text":"using System.Linq; class AverageSolution { public static double FindAverage(double[] array) { return array.Length == 0 ? 0 : array.Average(); } }","title":"Calculate Average"},{"location":"software_dev/Katas/csharp_katas/#highest-and-lowest","text":"Given a string like \"4 3 5 -19 23 13 22\", return a string with the highest and lowest values in in, e.g. \"23 -19\" using System; // needed for String using System.Linq; public static class Kata { public static string HighAndLow(string numbers) { return String.Format(\"{0} {1}\", numbers.Split(' ').Max(x => int.Parse(x)), numbers.Split(' ').Min(x => int.Parse(x)) ); } }","title":"Highest and Lowest"},{"location":"software_dev/Katas/csharp_katas/#friend-or-foe","text":"Return an array of names that are 4 chars long. Do not change the order from the input array. using System.Linq; using System.Collections.Generic; public static class Kata { public static IEnumerable<string> FriendOrFoe (string[] names) { return names.Where(name => name.Length==4); } }","title":"Friend or Foe"},{"location":"software_dev/Katas/java_katas/","text":"Java Katas Sum of the first nth terms of a Series Your task is to write a function which returns the sum of following series upto nth term(parameter). Series: 1 + 1/4 + 1/7 + 1/10 + 1/13 + 1/16 +... Rules You need to round the answer to 2 decimal places and return it as String. If the given value is 0 then it should return 0.00 You will only be given Natural Numbers as arguments. My approach public class NthSeries { public static String seriesSum(int n) { double total = 0.0; double denominator = 1.0; for(int i=0; i<n;i++) { total += (1.0/denominator); denominator += 3.0; } return String.format(\"%.2f\", total); } } A method using a more functional programming approach import java.util.stream.IntStream; public class NthSeries { public static String seriesSum(int n) { return String.format(\"%.2f\", IntStream.range(0, n).mapToDouble(num -> 1.0 / (1 + num * 3)).sum()); } } Multiples of 3 or 5 If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Finish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in. Note: If the number is a multiple of both 3 and 5, only count it once. My initial approach... public class Solution { public int solution(int number) { int total= 0; for(int i= 0; i<number; i++) { if((i%3==0)||(i%5==0)) total+= i; } return total; } } The more functional approach import java.util.stream.IntStream; public class Solution { public int solution(int number) { return IntStream.range(0, number) .filter(n -> (n % 3 == 0) || (n % 5 == 0)) .sum(); } } Detect Pangram My Code import java.util.Arrays; import java.util.ArrayList; public class PangramChecker { public boolean check(String sentence){ ArrayList<Character> alphabet = new ArrayList<>( Arrays.asList('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z') ); for(int i = 0; i < sentence.length(); i++) { alphabet.remove((Character)sentence.toLowerCase().charAt(i)); if(alphabet.isEmpty()) break; } return alphabet.isEmpty(); } } Other Code public class PangramChecker { public boolean check(String sentence){ for (char c = 'a'; c<='z'; c++) if (!sentence.toLowerCase().contains(\"\" + c)) return false; return true; } } Or... public class PangramChecker { public boolean check(String sentence){ return sentence .chars() .map(Character::toLowerCase) .filter(Character::isAlphabetic) .distinct() .count() == 26; } } Or... class PangramChecker { boolean check(final String sentence) { return sentence.chars() .filter(Character::isLetter) .map(Character::toLowerCase) .distinct() .count() == 26; } } Create Phone Numbers Turn 1234567890 into (123) 456-7890 My Code public class Kata { public static String createPhoneNumber(int[] numbers) { return \"(\"+numbers[0]+numbers[1]+numbers[2]+\") \"+numbers[3]+numbers[4]+numbers[5]+\"-\"+numbers[6]+numbers[7]+numbers[8]+numbers[9]; } } Other Code import java.util.stream.IntStream; public class Kata { public static String createPhoneNumber(int[] numbers) { return String.format(\"(%d%d%d) %d%d%d-%d%d%d%d\", IntStream.of(numbers).boxed().toArray()); } } Spinning Words Given a sentence, reverse every word that is 5 letter or over. My Code public class SpinWords { public String spinWords(String sentence) { String[] words = sentence.split(\" \"); StringBuilder outputString = new StringBuilder(); for(int i=0; i<words.length; i++) { outputString.append(spinWord(words[i])); if(i!= words.length-1) outputString.append(\" \"); } return outputString.toString(); } private String spinWord(String word) { StringBuilder reverseWord = new StringBuilder(); if(word.length()<5) return word; for(int i=word.length()-1; i>=0; i--) { reverseWord.append(word.charAt(i)); } return reverseWord.toString(); } } Other Code import java.util.stream.*; import java.util.Arrays; public class SpinWords { public String spinWords(String sentence) { return Arrays.stream(sentence.split(\" \")) .map(i -> i.length() > 4 ? new StringBuilder(i).reverse().toString() : i) .collect(Collectors.joining(\" \")); } } Or... import java.util.Arrays; public class SpinWords { public String spinWords(String sentence) { String[] words = sentence.split(\" \"); for (int i=0; i<words.length; i++) { if (words[i].length() >= 5) { words[i] = new StringBuilder(words[i]).reverse().toString(); } } return String.join(\" \",words); } } Two Fighters, one winner public class Kata { public static String declareWinner(Fighter fighter1, Fighter fighter2, String firstAttacker) { Fighter attacker = fighter1.name.equals(firstAttacker) ? fighter1 : fighter2; Fighter defender; do { defender = (attacker == fighter1) ? fighter2 : fighter1; defender.health -= attacker.damagePerAttack; attacker = (attacker == fighter1) ? fighter2 : fighter1; } while(defender.health>0); return (fighter1.health <= 0) ? fighter2.name : fighter1.name; } } Dubstep My code import java.util.Arrays; import java.util.List; import java.util.stream.*; public class Dubstep { public static String SongDecoder (String song) { return String.join(\" \", Arrays.asList(song.split(\"WUB\")) .stream().filter( item -> !item.isEmpty() ) .collect(Collectors.toList())); } } Other Code Using a Regex replaceAll and a trim. public class Dubstep { public static String SongDecoder (String song) { return song.replaceAll(\"(WUB)+\", \" \").trim(); } }","title":"Java Katas"},{"location":"software_dev/Katas/java_katas/#java-katas","text":"","title":"Java Katas"},{"location":"software_dev/Katas/java_katas/#sum-of-the-first-nth-terms-of-a-series","text":"Your task is to write a function which returns the sum of following series upto nth term(parameter). Series: 1 + 1/4 + 1/7 + 1/10 + 1/13 + 1/16 +... Rules You need to round the answer to 2 decimal places and return it as String. If the given value is 0 then it should return 0.00 You will only be given Natural Numbers as arguments. My approach public class NthSeries { public static String seriesSum(int n) { double total = 0.0; double denominator = 1.0; for(int i=0; i<n;i++) { total += (1.0/denominator); denominator += 3.0; } return String.format(\"%.2f\", total); } } A method using a more functional programming approach import java.util.stream.IntStream; public class NthSeries { public static String seriesSum(int n) { return String.format(\"%.2f\", IntStream.range(0, n).mapToDouble(num -> 1.0 / (1 + num * 3)).sum()); } }","title":"Sum of the first nth terms of a Series"},{"location":"software_dev/Katas/java_katas/#multiples-of-3-or-5","text":"If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Finish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in. Note: If the number is a multiple of both 3 and 5, only count it once. My initial approach... public class Solution { public int solution(int number) { int total= 0; for(int i= 0; i<number; i++) { if((i%3==0)||(i%5==0)) total+= i; } return total; } } The more functional approach import java.util.stream.IntStream; public class Solution { public int solution(int number) { return IntStream.range(0, number) .filter(n -> (n % 3 == 0) || (n % 5 == 0)) .sum(); } }","title":"Multiples of 3 or 5"},{"location":"software_dev/Katas/java_katas/#detect-pangram","text":"","title":"Detect Pangram"},{"location":"software_dev/Katas/java_katas/#my-code","text":"import java.util.Arrays; import java.util.ArrayList; public class PangramChecker { public boolean check(String sentence){ ArrayList<Character> alphabet = new ArrayList<>( Arrays.asList('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z') ); for(int i = 0; i < sentence.length(); i++) { alphabet.remove((Character)sentence.toLowerCase().charAt(i)); if(alphabet.isEmpty()) break; } return alphabet.isEmpty(); } }","title":"My Code"},{"location":"software_dev/Katas/java_katas/#other-code","text":"public class PangramChecker { public boolean check(String sentence){ for (char c = 'a'; c<='z'; c++) if (!sentence.toLowerCase().contains(\"\" + c)) return false; return true; } } Or... public class PangramChecker { public boolean check(String sentence){ return sentence .chars() .map(Character::toLowerCase) .filter(Character::isAlphabetic) .distinct() .count() == 26; } } Or... class PangramChecker { boolean check(final String sentence) { return sentence.chars() .filter(Character::isLetter) .map(Character::toLowerCase) .distinct() .count() == 26; } }","title":"Other Code"},{"location":"software_dev/Katas/java_katas/#create-phone-numbers","text":"Turn 1234567890 into (123) 456-7890","title":"Create Phone Numbers"},{"location":"software_dev/Katas/java_katas/#my-code_1","text":"public class Kata { public static String createPhoneNumber(int[] numbers) { return \"(\"+numbers[0]+numbers[1]+numbers[2]+\") \"+numbers[3]+numbers[4]+numbers[5]+\"-\"+numbers[6]+numbers[7]+numbers[8]+numbers[9]; } }","title":"My Code"},{"location":"software_dev/Katas/java_katas/#other-code_1","text":"import java.util.stream.IntStream; public class Kata { public static String createPhoneNumber(int[] numbers) { return String.format(\"(%d%d%d) %d%d%d-%d%d%d%d\", IntStream.of(numbers).boxed().toArray()); } }","title":"Other Code"},{"location":"software_dev/Katas/java_katas/#spinning-words","text":"Given a sentence, reverse every word that is 5 letter or over.","title":"Spinning Words"},{"location":"software_dev/Katas/java_katas/#my-code_2","text":"public class SpinWords { public String spinWords(String sentence) { String[] words = sentence.split(\" \"); StringBuilder outputString = new StringBuilder(); for(int i=0; i<words.length; i++) { outputString.append(spinWord(words[i])); if(i!= words.length-1) outputString.append(\" \"); } return outputString.toString(); } private String spinWord(String word) { StringBuilder reverseWord = new StringBuilder(); if(word.length()<5) return word; for(int i=word.length()-1; i>=0; i--) { reverseWord.append(word.charAt(i)); } return reverseWord.toString(); } }","title":"My Code"},{"location":"software_dev/Katas/java_katas/#other-code_2","text":"import java.util.stream.*; import java.util.Arrays; public class SpinWords { public String spinWords(String sentence) { return Arrays.stream(sentence.split(\" \")) .map(i -> i.length() > 4 ? new StringBuilder(i).reverse().toString() : i) .collect(Collectors.joining(\" \")); } } Or... import java.util.Arrays; public class SpinWords { public String spinWords(String sentence) { String[] words = sentence.split(\" \"); for (int i=0; i<words.length; i++) { if (words[i].length() >= 5) { words[i] = new StringBuilder(words[i]).reverse().toString(); } } return String.join(\" \",words); } }","title":"Other Code"},{"location":"software_dev/Katas/java_katas/#two-fighters-one-winner","text":"public class Kata { public static String declareWinner(Fighter fighter1, Fighter fighter2, String firstAttacker) { Fighter attacker = fighter1.name.equals(firstAttacker) ? fighter1 : fighter2; Fighter defender; do { defender = (attacker == fighter1) ? fighter2 : fighter1; defender.health -= attacker.damagePerAttack; attacker = (attacker == fighter1) ? fighter2 : fighter1; } while(defender.health>0); return (fighter1.health <= 0) ? fighter2.name : fighter1.name; } }","title":"Two Fighters, one winner"},{"location":"software_dev/Katas/java_katas/#dubstep","text":"","title":"Dubstep"},{"location":"software_dev/Katas/java_katas/#my-code_3","text":"import java.util.Arrays; import java.util.List; import java.util.stream.*; public class Dubstep { public static String SongDecoder (String song) { return String.join(\" \", Arrays.asList(song.split(\"WUB\")) .stream().filter( item -> !item.isEmpty() ) .collect(Collectors.toList())); } }","title":"My code"},{"location":"software_dev/Katas/java_katas/#other-code_3","text":"Using a Regex replaceAll and a trim. public class Dubstep { public static String SongDecoder (String song) { return song.replaceAll(\"(WUB)+\", \" \").trim(); } }","title":"Other Code"},{"location":"software_dev/Katas/kotlin_katas/","text":"Kotlin Katas Get ASCII value of character My approach fun getAscii(c: Char): Int { return c.toInt() } Other approaches val getAscii = Char::toInt fun getAscii(c: Char) = c.toInt() fun getAscii(c: Char): Int = c.toInt()","title":"Kotlin Katas"},{"location":"software_dev/Katas/kotlin_katas/#kotlin-katas","text":"","title":"Kotlin Katas"},{"location":"software_dev/Katas/kotlin_katas/#get-ascii-value-of-character","text":"","title":"Get ASCII value of character"},{"location":"software_dev/Katas/kotlin_katas/#my-approach","text":"fun getAscii(c: Char): Int { return c.toInt() }","title":"My approach"},{"location":"software_dev/Katas/kotlin_katas/#other-approaches","text":"val getAscii = Char::toInt fun getAscii(c: Char) = c.toInt() fun getAscii(c: Char): Int = c.toInt()","title":"Other approaches"},{"location":"software_dev/c%2B%2B/cave_of_prog/","text":"C++ CoP Integer Types #include <limits> // holds constants for int size, e.g. INT_MAX, INT_MIN, etc.. sizes (dependent on compiler used) short int - 16 bits int - 32 bits long int - 64 bits sizeof(int) returns number of bytes used Some compilers allow long instead of long int , the same also applies to short in place of short int Exceptions CoP Thought: Only use them for states from which your can't recover from. (e.g. unable to allocate enough memory) (Or alternatively - use for all error handling and keep error handling separate from main code) void mightGoWrong() { bool error = true; if(error) throw 8; } asd int main() { try { mightGoWrong(); } catch(int e) { cout << \"Error code: \" << e << endl; } catch(std::string & e) { cout << \"Error message: \" << e << endl; } catch(char const * e) { cout << \"Error message: \" << e << endl; } } Can throw anything as an exception - including primitives, error strings and objects. (however you do need to catch the correct type)","title":"C++ CoP"},{"location":"software_dev/c%2B%2B/cave_of_prog/#c-cop","text":"","title":"C++ CoP"},{"location":"software_dev/c%2B%2B/cave_of_prog/#integer-types","text":"#include <limits> // holds constants for int size, e.g. INT_MAX, INT_MIN, etc..","title":"Integer Types"},{"location":"software_dev/c%2B%2B/cave_of_prog/#sizes-dependent-on-compiler-used","text":"short int - 16 bits int - 32 bits long int - 64 bits sizeof(int) returns number of bytes used Some compilers allow long instead of long int , the same also applies to short in place of short int","title":"sizes (dependent on compiler used)"},{"location":"software_dev/c%2B%2B/cave_of_prog/#exceptions","text":"CoP Thought: Only use them for states from which your can't recover from. (e.g. unable to allocate enough memory) (Or alternatively - use for all error handling and keep error handling separate from main code) void mightGoWrong() { bool error = true; if(error) throw 8; } asd int main() { try { mightGoWrong(); } catch(int e) { cout << \"Error code: \" << e << endl; } catch(std::string & e) { cout << \"Error message: \" << e << endl; } catch(char const * e) { cout << \"Error message: \" << e << endl; } } Can throw anything as an exception - including primitives, error strings and objects. (however you do need to catch the correct type)","title":"Exceptions"},{"location":"software_dev/c%2B%2B/cpp_maps/","text":"C++ Maps Creating Maps Declaring #include <map> std::map<int,std::string> my_map; Populating TODO Accessing Maps [] Operator the [] operator will insert the key if it isn't found. find(key) find(key) returns an iterator to the map. If the key isn't found in the map, the iterator points at map.end() . iterator.second() points at the value in the [key,value] pair. at(key) at(key) will throw an exception if the key is not found. Looping through a map Using an iterator std::map<std::string, int>::iterator it = my_map.begin(); while (it != my_map.end()) { std::string key = it->first; int value = it->second; it++; } And naturally this can be done in a for loop at well. Using a ranged for loop (C++11) for (std::pair<std::string, int> element : my_map) { std::string key = element.first; int value = element.second; } Destroying Maps If a map contains pointers, will need to delete the memory allocated to those pointers (if appropriate to do so - i.e. if the map owns that data - in other words if the structure pointed to was created as it was inserted into the map). This can be done by iterating through the map. The elements in the map then need to be removed with map.clear() And of course, if the map was created with new , it needed a delete Misc Notes","title":"C++ Maps"},{"location":"software_dev/c%2B%2B/cpp_maps/#c-maps","text":"","title":"C++ Maps"},{"location":"software_dev/c%2B%2B/cpp_maps/#creating-maps","text":"","title":"Creating Maps"},{"location":"software_dev/c%2B%2B/cpp_maps/#declaring","text":"#include <map> std::map<int,std::string> my_map;","title":"Declaring"},{"location":"software_dev/c%2B%2B/cpp_maps/#populating","text":"TODO","title":"Populating"},{"location":"software_dev/c%2B%2B/cpp_maps/#accessing-maps","text":"","title":"Accessing Maps"},{"location":"software_dev/c%2B%2B/cpp_maps/#operator","text":"the [] operator will insert the key if it isn't found.","title":"[] Operator"},{"location":"software_dev/c%2B%2B/cpp_maps/#findkey","text":"find(key) returns an iterator to the map. If the key isn't found in the map, the iterator points at map.end() . iterator.second() points at the value in the [key,value] pair.","title":"find(key)"},{"location":"software_dev/c%2B%2B/cpp_maps/#atkey","text":"at(key) will throw an exception if the key is not found.","title":"at(key)"},{"location":"software_dev/c%2B%2B/cpp_maps/#looping-through-a-map","text":"","title":"Looping through a map"},{"location":"software_dev/c%2B%2B/cpp_maps/#using-an-iterator","text":"std::map<std::string, int>::iterator it = my_map.begin(); while (it != my_map.end()) { std::string key = it->first; int value = it->second; it++; } And naturally this can be done in a for loop at well.","title":"Using an iterator"},{"location":"software_dev/c%2B%2B/cpp_maps/#using-a-ranged-for-loop-c11","text":"for (std::pair<std::string, int> element : my_map) { std::string key = element.first; int value = element.second; }","title":"Using a ranged for loop (C++11)"},{"location":"software_dev/c%2B%2B/cpp_maps/#destroying-maps","text":"If a map contains pointers, will need to delete the memory allocated to those pointers (if appropriate to do so - i.e. if the map owns that data - in other words if the structure pointed to was created as it was inserted into the map). This can be done by iterating through the map. The elements in the map then need to be removed with map.clear() And of course, if the map was created with new , it needed a delete","title":"Destroying Maps"},{"location":"software_dev/c%2B%2B/cpp_maps/#misc-notes","text":"","title":"Misc Notes"},{"location":"software_dev/c%2B%2B/cpp_pointers/","text":"C++ Pointers (from \u21db Javidx9's youtube video ) Operators & is the address of operator int SomeArray[10]; int* pLocation0 = &SomeArray[0]; int* pLocation3 = &SomeArray[3]; However SomeArray is a pointer in disguise (yeah, it's like a transformer \ud83d\ude09), so we can write... int* pLocation0 = SomeArray; // SomeArray is the same as &SomeArray[0] * is the value of operator plocation0 holds a memory address *pLocation0 gives the value at that memory location. cout << pLocation0 << endl; // displays the memory location where SomeArray is cout << *pLocation0 << endl; // displays the contents of the memory location NOTE: pointers of type char are handled slightly differently (as they were handled as strings, historically) Local Variables are created on the stack Variables created with new or malloc are created on the heap, and MUST be released afterwards. Pointers to pointers sSomeObject **pSomeObject = new sSomeObject* [10] {0}; This creates an array of pointers, the pointers themselves don't point to anything. The code fragment {0} at the end of the line fills the pointers with 0. NEED TO DOUBLE CHECK THE FOLLOWING it can be found around index 25:00 in the javidx9 video. When an array of pointers is populated with objects, need to remember to delete the created objects and then delete the array. for (int i=0; i<10; i++) pSomeObject[i] = new SomeObject(); // do stuff // delete objects for (int i=0; i<10; i++) delete pSomeObject[i]; delete [] pSomeObject; Arrays of pointers like this are very useful as pointers are a key method of using polymorphism within C++. Smart Pointers (since C++ 11) Use unique and shared pointers to automatically release allocated space. shared pointers shared smart pointers allow multiple accessors to a pointer #include <memory> // declaring and instantiating an object with a smart pointer // () at the end is the ctor shared_ptr<SomeObject> pObj1 = make_shared<SomeObject>(); // sharing the pointer shared_ptr<SomeObject> pObj2 = pObj1; Shared pointers keep a reference count of how many times they have been shared (and that those additional pointers are in scope). When this count hits zero the resources pointed to are released. unique pointers Very similiar to shared pointers with the exception that the pointer cannot be assigned to another pointer. It can however be transferred to another unique pointer. Unique pointers have the same memory footprint as pointers. #include <memory> // declaring and instantiating an object with a unique pointer unique_ptr<SomeObject> pObj1 = make_unqiue<SomeObject>(); // sharing the pointer - this is illegal unique_ptr<SomeObject> pObj2 = pObj1; // transferring the pointer (transferring ownership of the data) unqiue_ptr<SomeObject> pObj3 = std::move(pObj1); Unique pointers can be passed as arguments using references. ``` c++ void MyFunc(const std::unique_ptr & pObj) { // do something with pObj here }","title":"C++ Pointers"},{"location":"software_dev/c%2B%2B/cpp_pointers/#c-pointers","text":"(from \u21db Javidx9's youtube video )","title":"C++ Pointers"},{"location":"software_dev/c%2B%2B/cpp_pointers/#operators","text":"& is the address of operator int SomeArray[10]; int* pLocation0 = &SomeArray[0]; int* pLocation3 = &SomeArray[3]; However SomeArray is a pointer in disguise (yeah, it's like a transformer \ud83d\ude09), so we can write... int* pLocation0 = SomeArray; // SomeArray is the same as &SomeArray[0] * is the value of operator plocation0 holds a memory address *pLocation0 gives the value at that memory location. cout << pLocation0 << endl; // displays the memory location where SomeArray is cout << *pLocation0 << endl; // displays the contents of the memory location NOTE: pointers of type char are handled slightly differently (as they were handled as strings, historically) Local Variables are created on the stack Variables created with new or malloc are created on the heap, and MUST be released afterwards.","title":"Operators"},{"location":"software_dev/c%2B%2B/cpp_pointers/#pointers-to-pointers","text":"sSomeObject **pSomeObject = new sSomeObject* [10] {0}; This creates an array of pointers, the pointers themselves don't point to anything. The code fragment {0} at the end of the line fills the pointers with 0. NEED TO DOUBLE CHECK THE FOLLOWING it can be found around index 25:00 in the javidx9 video. When an array of pointers is populated with objects, need to remember to delete the created objects and then delete the array. for (int i=0; i<10; i++) pSomeObject[i] = new SomeObject(); // do stuff // delete objects for (int i=0; i<10; i++) delete pSomeObject[i]; delete [] pSomeObject; Arrays of pointers like this are very useful as pointers are a key method of using polymorphism within C++.","title":"Pointers to pointers"},{"location":"software_dev/c%2B%2B/cpp_pointers/#smart-pointers-since-c-11","text":"Use unique and shared pointers to automatically release allocated space.","title":"Smart Pointers (since C++ 11)"},{"location":"software_dev/c%2B%2B/cpp_pointers/#shared-pointers","text":"shared smart pointers allow multiple accessors to a pointer #include <memory> // declaring and instantiating an object with a smart pointer // () at the end is the ctor shared_ptr<SomeObject> pObj1 = make_shared<SomeObject>(); // sharing the pointer shared_ptr<SomeObject> pObj2 = pObj1; Shared pointers keep a reference count of how many times they have been shared (and that those additional pointers are in scope). When this count hits zero the resources pointed to are released.","title":"shared pointers"},{"location":"software_dev/c%2B%2B/cpp_pointers/#unique-pointers","text":"Very similiar to shared pointers with the exception that the pointer cannot be assigned to another pointer. It can however be transferred to another unique pointer. Unique pointers have the same memory footprint as pointers. #include <memory> // declaring and instantiating an object with a unique pointer unique_ptr<SomeObject> pObj1 = make_unqiue<SomeObject>(); // sharing the pointer - this is illegal unique_ptr<SomeObject> pObj2 = pObj1; // transferring the pointer (transferring ownership of the data) unqiue_ptr<SomeObject> pObj3 = std::move(pObj1); Unique pointers can be passed as arguments using references. ``` c++ void MyFunc(const std::unique_ptr & pObj) { // do something with pObj here }","title":"unique pointers"},{"location":"software_dev/c%2B%2B/cpp_polymorphism/","text":"C++ Polymorphism (from \u21db Javidx9's youtube video ) Assuming that class A has a DoStuff() method and classes B and C override this method. vector<A> vec; ... vec[3].DoStuff(); Regardless of the derived class held in the vector at 3, A's DoStuff() method will always be called. Pointers to the rescue A* ob1 = new B(); A* ob2 = new C(); Now ob1 and ob2 will use the derived classes DoStuff() method. This becomes more useful with the use of collections of pointers... for example... vector<A *> vecs; vecs.push_back(new B()); vecs.push_back(new C()); for(auto derived : vecs) derived->DoStuff(); Now any instance in the vector will use their own class's DoStuff() method. Declaring a Base Class Not Abstract class A { public: virtual DoStuff() { ... } } Abstract Abstract classes cannot be instantiated. By declaring any method within the class as a pure function, the class cannot then be instantiated. class A { public: virtual DoStuff() = 0; } In this case DoStuff() is declared as pure by replacing it's body with =0; . Pure functions like this MUST be overriden. Declaring a Derived Class class B : public A { public: void DoStuff() override { ... } } Declaring DoStuff() as an override with the override flag this signifies that this method is overriding the same one from the base class. override is optional, but it's very useful to include it.","title":"C++ Polymorphism"},{"location":"software_dev/c%2B%2B/cpp_polymorphism/#c-polymorphism","text":"(from \u21db Javidx9's youtube video ) Assuming that class A has a DoStuff() method and classes B and C override this method. vector<A> vec; ... vec[3].DoStuff(); Regardless of the derived class held in the vector at 3, A's DoStuff() method will always be called.","title":"C++ Polymorphism"},{"location":"software_dev/c%2B%2B/cpp_polymorphism/#pointers-to-the-rescue","text":"A* ob1 = new B(); A* ob2 = new C(); Now ob1 and ob2 will use the derived classes DoStuff() method. This becomes more useful with the use of collections of pointers... for example... vector<A *> vecs; vecs.push_back(new B()); vecs.push_back(new C()); for(auto derived : vecs) derived->DoStuff(); Now any instance in the vector will use their own class's DoStuff() method.","title":"Pointers to the rescue"},{"location":"software_dev/c%2B%2B/cpp_polymorphism/#declaring-a-base-class","text":"","title":"Declaring a Base Class"},{"location":"software_dev/c%2B%2B/cpp_polymorphism/#not-abstract","text":"class A { public: virtual DoStuff() { ... } }","title":"Not Abstract"},{"location":"software_dev/c%2B%2B/cpp_polymorphism/#abstract","text":"Abstract classes cannot be instantiated. By declaring any method within the class as a pure function, the class cannot then be instantiated. class A { public: virtual DoStuff() = 0; } In this case DoStuff() is declared as pure by replacing it's body with =0; . Pure functions like this MUST be overriden.","title":"Abstract"},{"location":"software_dev/c%2B%2B/cpp_polymorphism/#declaring-a-derived-class","text":"class B : public A { public: void DoStuff() override { ... } } Declaring DoStuff() as an override with the override flag this signifies that this method is overriding the same one from the base class. override is optional, but it's very useful to include it.","title":"Declaring a Derived Class"},{"location":"software_dev/c%2B%2B/cpp_vectors/","text":"C++ Vectors NOTE: \u26a0 Work in progress \u26a0 - Hard hats to be worn! \ud83d\udc77\ud83c\udffc\u200d\u2642\ufe0f\ud83d\udc77\ud83c\udffc\u200d\u2640\ufe0f #include <vector> std::vector<int> my_ints; Methods at(index) - returns the vector at 'index' - throws an exception if index is out of range. size() - returns the number of elements in the vector. clear() - clears the structure of the vector at the end. Iterating through vectors The C++11 method std::vector<SomeObject> vectors; ... for(auto item : vectors) { // do something with item here } Using iterators for(std::vector<T>::iterator it = v.begin(); it != v.end(); ++it) { // do something with item here }","title":"C++ Vectors"},{"location":"software_dev/c%2B%2B/cpp_vectors/#c-vectors","text":"NOTE: \u26a0 Work in progress \u26a0 - Hard hats to be worn! \ud83d\udc77\ud83c\udffc\u200d\u2642\ufe0f\ud83d\udc77\ud83c\udffc\u200d\u2640\ufe0f #include <vector> std::vector<int> my_ints;","title":"C++ Vectors"},{"location":"software_dev/c%2B%2B/cpp_vectors/#methods","text":"at(index) - returns the vector at 'index' - throws an exception if index is out of range. size() - returns the number of elements in the vector. clear() - clears the structure of the vector at the end.","title":"Methods"},{"location":"software_dev/c%2B%2B/cpp_vectors/#iterating-through-vectors","text":"","title":"Iterating through vectors"},{"location":"software_dev/c%2B%2B/cpp_vectors/#the-c11-method","text":"std::vector<SomeObject> vectors; ... for(auto item : vectors) { // do something with item here }","title":"The C++11 method"},{"location":"software_dev/c%2B%2B/cpp_vectors/#using-iterators","text":"for(std::vector<T>::iterator it = v.begin(); it != v.end(); ++it) { // do something with item here }","title":"Using iterators"},{"location":"software_dev/c%2B%2B/design_patterns/","text":"C++ Design Patterns Singleton This pattern in C++ is known as the Meyer's singleton. #include <iostream> class Singleton { private: Singleton() {} public: static Singleton& getInstance() { static Singleton instance; return instance; } }; int main() { Singleton& s = Singleton::getInstance(); return 0; } could also just consider using a global namespace instead","title":"C++ Design Patterns"},{"location":"software_dev/c%2B%2B/design_patterns/#c-design-patterns","text":"","title":"C++ Design Patterns"},{"location":"software_dev/c%2B%2B/design_patterns/#singleton","text":"This pattern in C++ is known as the Meyer's singleton. #include <iostream> class Singleton { private: Singleton() {} public: static Singleton& getInstance() { static Singleton instance; return instance; } }; int main() { Singleton& s = Singleton::getInstance(); return 0; } could also just consider using a global namespace instead","title":"Singleton"},{"location":"software_dev/c%2B%2B/quick_notes/","text":"C++ Quick Notes Classes v Structs As far as the compiler is concerned there is no difference between structs and classes other than the default access: structs \u21d2 default is public classes \u21d2 default is private Not sure about this one -> can split a classs between .h and .cpp files, don't think you can do this with structs. Structs and Header files Can include a reference to a struct in the header file, and the rest of it in the implementation file. Such as: // header file (.h) struct MyStruct; // implementation file (.cpp) struct MyStruct { int x; int y; void MyMethod() { // stuff } } Files that include the header file can only reference or point to the struct, they cannot access its members or its methods. Only the implementation file can access the members and functions of the struct. Classes and Header Files dtor's // header file (.h) class MyClass { ~MyClass(); } // implementation file (.cpp) MyClass::~MyClass() { // do stuff } Exceptions and ctor Can throw exceptions in ctor, but this limits the object to the scope of the try/ctach block.","title":"C++ Quick Notes"},{"location":"software_dev/c%2B%2B/quick_notes/#c-quick-notes","text":"","title":"C++ Quick Notes"},{"location":"software_dev/c%2B%2B/quick_notes/#classes-v-structs","text":"As far as the compiler is concerned there is no difference between structs and classes other than the default access: structs \u21d2 default is public classes \u21d2 default is private Not sure about this one -> can split a classs between .h and .cpp files, don't think you can do this with structs.","title":"Classes v Structs"},{"location":"software_dev/c%2B%2B/quick_notes/#structs-and-header-files","text":"Can include a reference to a struct in the header file, and the rest of it in the implementation file. Such as: // header file (.h) struct MyStruct; // implementation file (.cpp) struct MyStruct { int x; int y; void MyMethod() { // stuff } } Files that include the header file can only reference or point to the struct, they cannot access its members or its methods. Only the implementation file can access the members and functions of the struct.","title":"Structs and Header files"},{"location":"software_dev/c%2B%2B/quick_notes/#classes-and-header-files","text":"","title":"Classes and Header Files"},{"location":"software_dev/c%2B%2B/quick_notes/#dtors","text":"// header file (.h) class MyClass { ~MyClass(); } // implementation file (.cpp) MyClass::~MyClass() { // do stuff }","title":"dtor's"},{"location":"software_dev/c%2B%2B/quick_notes/#exceptions-and-ctor","text":"Can throw exceptions in ctor, but this limits the object to the scope of the try/ctach block.","title":"Exceptions and ctor"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch02/","text":"C++ Crash Course - Ch 2 Integers short int long long long Also unsigned versions of the above. The size of these is not guaranteed across platforms. To use guaranteed sizes you need #include <cstdint> and then you can us int8_t , int16_t , int32_t , int64_t . However #include <cstdint> is not available on every platform. base prefix binary 0b octal 0 - this can cause issues with literals that have leading 0's hex 0x Can intersperse literal numbers with ' for example int mill = 1'000'000 Floats float double long double literal values default to double. e.g. float a = 3.142f; double b = 3.142; long double = 3.142L; Chars standard wide char wchar_t signed char char16_t unsigned char char32_t Literals - use the L: prefix for wide chars:- char a = 'j'; wchar_t = L'j'; std::byte an 8 bit value. Cannot use arithmetic operations but can use bitwise. size_t held in the <cstddef> header. the print specifier is %zd printf(\"size of float is %zd\", sizeof(float)) Initialising default (set to zero) other int a= 0; int a = 42; int a { }; int a {42}; // pretty much always applicable - preferred method int a = { }; int a= {42}; int a; (1) int a(42); // looks like a function -> not good (1) not guaranteed to be set to zero! Arrays int array1[100]; int array2 = { 1 ,2, 3, 4, 5}; Can find the number of elements in an array with this (considered to be a bit old school hackery):- int n_elements = sizeof(array2) / sizeof(array2[0]); Initialising an Array int array1[] { 1, 2, 3 }; // array length is 3, contents are 1, 2, 3 int array2[5] {}; // array length is 5, contents all set to zero int array3[5] { 1, 2, 3 }; // array length is 5, contents are 1, 2, 3, 0, 0 int array4[5]; // array length is 5, contents are uninitialised Looping through arrays Using an index... for(size_t i = 0; i<n_elements; i++) { // do stuff with array2[i]; } The range-based loop... for(int val : array2) { //do stuff with val } Note: the range based-loop cannot be used to update the values held in the array. Strings CStrings are declared with... char my_string[] = \"This is a journey \" \"into sound\"; Note: the string literal can be split across lines and the compiler will treat it as a single uninterrupted string. Enums enum class Computer { Spectrum, C64, BBC } Computer my_computer = Computer::Spectrum; switch(my_computer) { case(Computer::Spectrum) { // do speccy stuff } break; case(Computer::C64) { // do commodore stuff } break; case(Computer::BBC) { // do bbc micro stuff } break; default: { // do other stuff } } Plain Old Data classes (PODs) struct Book { char name[256]; int year; int number_of_pages; } Initialising a POD struct Book { char name[256]; int year; int number_of_pages; } Book hitch { \"Hitchhiker's Guide\", 1980, 42 }; Book empty { }; // all values set to zero Book book1 { \"Book with no pages\", 2020 }; // pages set to zero // can only omit fields from right to left, so this won't work... Book bad_book { 1984, 275 }; Structs and Classes The only difference between structs and classes is the default access modifier. struct - default is PUBLIC class - default is PRIVATE Constructors struct Book { Book() { // ... constructor code ... } }; Destructors struct Something() { ~Something () { // clear up stuff here... e.g. file handles } } destructors must not take any arguments almost never called explicitly","title":"C++ Crash Course - Ch 2"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch02/#c-crash-course-ch-2","text":"","title":"C++ Crash Course - Ch 2"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch02/#integers","text":"short int long long long Also unsigned versions of the above. The size of these is not guaranteed across platforms. To use guaranteed sizes you need #include <cstdint> and then you can us int8_t , int16_t , int32_t , int64_t . However #include <cstdint> is not available on every platform. base prefix binary 0b octal 0 - this can cause issues with literals that have leading 0's hex 0x Can intersperse literal numbers with ' for example int mill = 1'000'000","title":"Integers"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch02/#floats","text":"float double long double literal values default to double. e.g. float a = 3.142f; double b = 3.142; long double = 3.142L;","title":"Floats"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch02/#chars","text":"standard wide char wchar_t signed char char16_t unsigned char char32_t Literals - use the L: prefix for wide chars:- char a = 'j'; wchar_t = L'j';","title":"Chars"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch02/#stdbyte","text":"an 8 bit value. Cannot use arithmetic operations but can use bitwise.","title":"std::byte"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch02/#size_t","text":"held in the <cstddef> header. the print specifier is %zd printf(\"size of float is %zd\", sizeof(float))","title":"size_t"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch02/#initialising","text":"default (set to zero) other int a= 0; int a = 42; int a { }; int a {42}; // pretty much always applicable - preferred method int a = { }; int a= {42}; int a; (1) int a(42); // looks like a function -> not good (1) not guaranteed to be set to zero!","title":"Initialising"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch02/#arrays","text":"int array1[100]; int array2 = { 1 ,2, 3, 4, 5}; Can find the number of elements in an array with this (considered to be a bit old school hackery):- int n_elements = sizeof(array2) / sizeof(array2[0]);","title":"Arrays"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch02/#initialising-an-array","text":"int array1[] { 1, 2, 3 }; // array length is 3, contents are 1, 2, 3 int array2[5] {}; // array length is 5, contents all set to zero int array3[5] { 1, 2, 3 }; // array length is 5, contents are 1, 2, 3, 0, 0 int array4[5]; // array length is 5, contents are uninitialised","title":"Initialising an Array"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch02/#looping-through-arrays","text":"Using an index... for(size_t i = 0; i<n_elements; i++) { // do stuff with array2[i]; } The range-based loop... for(int val : array2) { //do stuff with val } Note: the range based-loop cannot be used to update the values held in the array.","title":"Looping through arrays"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch02/#strings","text":"CStrings are declared with... char my_string[] = \"This is a journey \" \"into sound\"; Note: the string literal can be split across lines and the compiler will treat it as a single uninterrupted string.","title":"Strings"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch02/#enums","text":"enum class Computer { Spectrum, C64, BBC } Computer my_computer = Computer::Spectrum; switch(my_computer) { case(Computer::Spectrum) { // do speccy stuff } break; case(Computer::C64) { // do commodore stuff } break; case(Computer::BBC) { // do bbc micro stuff } break; default: { // do other stuff } }","title":"Enums"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch02/#plain-old-data-classes-pods","text":"struct Book { char name[256]; int year; int number_of_pages; }","title":"Plain Old Data classes (PODs)"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch02/#initialising-a-pod","text":"struct Book { char name[256]; int year; int number_of_pages; } Book hitch { \"Hitchhiker's Guide\", 1980, 42 }; Book empty { }; // all values set to zero Book book1 { \"Book with no pages\", 2020 }; // pages set to zero // can only omit fields from right to left, so this won't work... Book bad_book { 1984, 275 };","title":"Initialising a POD"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch02/#structs-and-classes","text":"The only difference between structs and classes is the default access modifier. struct - default is PUBLIC class - default is PRIVATE","title":"Structs and Classes"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch02/#constructors","text":"struct Book { Book() { // ... constructor code ... } };","title":"Constructors"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch02/#destructors","text":"struct Something() { ~Something () { // clear up stuff here... e.g. file handles } } destructors must not take any arguments almost never called explicitly","title":"Destructors"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch03/","text":"C++ Crash Course - Ch 3 Pointers int x { 42 }; int* my_ptr = &x; // & is the 'address_of' operator printf(\"my_ptr: %p\\n\", my_ptr); printf(\"*my_ptr: %\\n\", *my_ptr); // * is the 'derefence' operator struct Book { char name[256]; int year; } Book book; Book* book_ptr= &book; book_ptr->year; // the -> is the member of operator, it replaces this... (*book_ptr).year; Array Decay Arrays decay into pointers very easily. int my_nums[] { 1, 2, 3, 4, 5 }; print_nums(my_nums); void print_nums(int *nums) { // the array has decayed into a pointer here ... } void * and std::byte* void * pointers - cannot be deferenced. Pointer arithmetic not allowed/valid std::byte * pointers allow for bitwise operations nullptr Pointers have an implicit conversion to booleans. Any pointer other than a nullptr is considered true. nullptr is false. References int my_int = 42; int& my_int_ref = my_int; cannot be (easily) assigned to null. once set, cannot be set to refer to a different object (cannot be reseated) Because references cannot be reseated, they cannot be used for structures such as linked lists. Const Const arguments void do_stuff(const int x) { // this method cannot change the value of x, if it should attempt to, a compile time error will occur } const arguments also work with references and pointers, not allowing their contents to be changed. Const functions Used for class methods only. Guarantees that the method will not change the contents of its object int getValue() const { // this method cannot change any part of the object it belongs to } Const member variables struct Coord { const float x; const float y; Coord(float i, float j) : x { i }, y { j } {} } const member variables can only be initialised either when they are declared or when they appear in a constructor's Member Initialiser List . (e.g. x { i }, y { j } in the above example). The Member Initialiser List is executed before the constructor. Items should be placed in the list in the same order as they appear in the class as their constructors will be called in this order. Auto The C++ compiler can infer the type from some initialisers. In these cases the auto keyword can be used. auto answer = 42; The auto keyword can also be combined with * , & and const","title":"C++ Crash Course - Ch 3"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch03/#c-crash-course-ch-3","text":"","title":"C++ Crash Course - Ch 3"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch03/#pointers","text":"int x { 42 }; int* my_ptr = &x; // & is the 'address_of' operator printf(\"my_ptr: %p\\n\", my_ptr); printf(\"*my_ptr: %\\n\", *my_ptr); // * is the 'derefence' operator struct Book { char name[256]; int year; } Book book; Book* book_ptr= &book; book_ptr->year; // the -> is the member of operator, it replaces this... (*book_ptr).year;","title":"Pointers"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch03/#array-decay","text":"Arrays decay into pointers very easily. int my_nums[] { 1, 2, 3, 4, 5 }; print_nums(my_nums); void print_nums(int *nums) { // the array has decayed into a pointer here ... }","title":"Array Decay"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch03/#void-and-stdbyte","text":"void * pointers - cannot be deferenced. Pointer arithmetic not allowed/valid std::byte * pointers allow for bitwise operations","title":"void * and std::byte*"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch03/#nullptr","text":"Pointers have an implicit conversion to booleans. Any pointer other than a nullptr is considered true. nullptr is false.","title":"nullptr"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch03/#references","text":"int my_int = 42; int& my_int_ref = my_int; cannot be (easily) assigned to null. once set, cannot be set to refer to a different object (cannot be reseated) Because references cannot be reseated, they cannot be used for structures such as linked lists.","title":"References"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch03/#const","text":"","title":"Const"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch03/#const-arguments","text":"void do_stuff(const int x) { // this method cannot change the value of x, if it should attempt to, a compile time error will occur } const arguments also work with references and pointers, not allowing their contents to be changed.","title":"Const arguments"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch03/#const-functions","text":"Used for class methods only. Guarantees that the method will not change the contents of its object int getValue() const { // this method cannot change any part of the object it belongs to }","title":"Const functions"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch03/#const-member-variables","text":"struct Coord { const float x; const float y; Coord(float i, float j) : x { i }, y { j } {} } const member variables can only be initialised either when they are declared or when they appear in a constructor's Member Initialiser List . (e.g. x { i }, y { j } in the above example). The Member Initialiser List is executed before the constructor. Items should be placed in the list in the same order as they appear in the class as their constructors will be called in this order.","title":"Const member variables"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch03/#auto","text":"The C++ compiler can infer the type from some initialisers. In these cases the auto keyword can be used. auto answer = 42; The auto keyword can also be combined with * , & and const","title":"Auto"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch04/","text":"C++ Crash Course - Ch 4 Object Lifetime Storage duration begins, storage is allocated. Constructor is called. Object's lifetime begins. Object can be used in code. Object's lifetime ends. Destructor is called. Storage duration ends, storage is deallocated. Automatic Storage Duration Local (or automatic ) variables are automatically allocated storage when they enter scope. The storage is deallocated when they leave scope, except for static variables. static variables Declared using the static keyword. Global scope Storage is allocated at program start and deallocated when program finishes. Local scope Storage allocated when first encountered during run time. Deallocated when program finishes. However the value set during any initialisation is only set when the variable's storage is allocated. void power_up_rat_thing(int isotopes) { static int rat_things_power = 200; rat_things_power += isotopes; } On the first run through this function, rat_things_power is set to 200, the value of \u00ecsotopes is then added to this. On subsequent runs through this, rat_things_power already has storage allocated and so it won't be reinitialised to 200, instead it will retain the value it had from the end of the previous call to this function. Static members Members of a class that aren't associated with a particular instance of that class. Dynamic Storage Allocated/deallocated on request. int* my_int_ptr = new int { 42 }; // allocate storage for an int delete my_int_ptr; // free up the storage for the int Once deleted the contents of the storage of the int are undefined. Compilers don't typically clean up memory - this can lead to a bug called use after free . Dynamic Arrays int* my_int_array_ptr = new int[400]; delete[] my_int_array_ptr; Exceptions c++ uses the 'try... throw... catch...' mechanism. Exception Types Exceptions thrown should be once of the exceptions from the stdlib (found in in <stdexcept> header). The exceptions listed in <stdexcept> are:- Logic errors logic_error domain_error invalid_argument length_error out_of_range Runtime errors runtime_error range_error overflow_error underflow_error system_error - operating system errors .code() method returns std::errc that can explain the error #include <stdexcept> #include <cstdio> struct Groucho { void forget(int x) { if(x == 0xFACE) { throw std::runtime_error { \"I'd be glad to make an exception.\" }; } printf(\"Forgot 0x%x\\n\", x); } } int main() { Groucho groucho; try { groucho.forget(0xCODE); groucho.forget(0xFACE); groucho.forget(0xC0FFEE); } catch (const std::runtime_error& e) { printf(\"exception caught with message: %s\\n\", e.what()); } } Side note: if you are running on an ubuntu base you might need to compile code like this with... gcc groucho.cpp -lstdc++ , the -l flag specifies that you are linking with the standard c++ libraries. Supposedly the following negates the need for the -l flag... sudo apt-get install lib32z1 libc6-i386 libc6-dev-i386 lib32gcc1 lib32stdc++6 , the issue seems to be caused by compiling with a 32 bit compiler when you only have 64 bit libraries available.","title":"C++ Crash Course - Ch 4"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch04/#c-crash-course-ch-4","text":"","title":"C++ Crash Course - Ch 4"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch04/#object-lifetime","text":"Storage duration begins, storage is allocated. Constructor is called. Object's lifetime begins. Object can be used in code. Object's lifetime ends. Destructor is called. Storage duration ends, storage is deallocated.","title":"Object Lifetime"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch04/#automatic-storage-duration","text":"Local (or automatic ) variables are automatically allocated storage when they enter scope. The storage is deallocated when they leave scope, except for static variables.","title":"Automatic Storage Duration"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch04/#static-variables","text":"Declared using the static keyword.","title":"static variables"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch04/#global-scope","text":"Storage is allocated at program start and deallocated when program finishes.","title":"Global scope"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch04/#local-scope","text":"Storage allocated when first encountered during run time. Deallocated when program finishes. However the value set during any initialisation is only set when the variable's storage is allocated. void power_up_rat_thing(int isotopes) { static int rat_things_power = 200; rat_things_power += isotopes; } On the first run through this function, rat_things_power is set to 200, the value of \u00ecsotopes is then added to this. On subsequent runs through this, rat_things_power already has storage allocated and so it won't be reinitialised to 200, instead it will retain the value it had from the end of the previous call to this function.","title":"Local scope"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch04/#static-members","text":"Members of a class that aren't associated with a particular instance of that class.","title":"Static members"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch04/#dynamic-storage","text":"Allocated/deallocated on request. int* my_int_ptr = new int { 42 }; // allocate storage for an int delete my_int_ptr; // free up the storage for the int Once deleted the contents of the storage of the int are undefined. Compilers don't typically clean up memory - this can lead to a bug called use after free .","title":"Dynamic Storage"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch04/#dynamic-arrays","text":"int* my_int_array_ptr = new int[400]; delete[] my_int_array_ptr;","title":"Dynamic Arrays"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch04/#exceptions","text":"c++ uses the 'try... throw... catch...' mechanism.","title":"Exceptions"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch04/#exception-types","text":"Exceptions thrown should be once of the exceptions from the stdlib (found in in <stdexcept> header). The exceptions listed in <stdexcept> are:-","title":"Exception Types"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch04/#logic-errors","text":"logic_error domain_error invalid_argument length_error out_of_range","title":"Logic errors"},{"location":"software_dev/c%2B%2B/C%2B%2B%20Crash%20Course/crash_course_ch04/#runtime-errors","text":"runtime_error range_error overflow_error underflow_error system_error - operating system errors .code() method returns std::errc that can explain the error #include <stdexcept> #include <cstdio> struct Groucho { void forget(int x) { if(x == 0xFACE) { throw std::runtime_error { \"I'd be glad to make an exception.\" }; } printf(\"Forgot 0x%x\\n\", x); } } int main() { Groucho groucho; try { groucho.forget(0xCODE); groucho.forget(0xFACE); groucho.forget(0xC0FFEE); } catch (const std::runtime_error& e) { printf(\"exception caught with message: %s\\n\", e.what()); } } Side note: if you are running on an ubuntu base you might need to compile code like this with... gcc groucho.cpp -lstdc++ , the -l flag specifies that you are linking with the standard c++ libraries. Supposedly the following negates the need for the -l flag... sudo apt-get install lib32z1 libc6-i386 libc6-dev-i386 lib32gcc1 lib32stdc++6 , the issue seems to be caused by compiling with a 32 bit compiler when you only have 64 bit libraries available.","title":"Runtime errors"},{"location":"software_dev/docker/docker/","text":"Docker Useful commands docker info docker version - provides more info than docker --version Images docker images - lists all the docker images docker rm [image id] - removes the image Name structure:- registry.example.com:port/organisation/image-name:version-tag Normally you can leave out the \u201cregistry.example.com:port\u201d docker pull -> useful to pull images down ahead of time so you ca work on them when off line. Images can accumulate quickly docker rmi <image-name:tag> - removes the image Can also use docker rmi <image id> Containers command action docker ps list containers (running only) docker ps -a list containers (all) docker start [containerID] docker stop [containerID] docker restart [containerID] docker container start [containerID] docker container stop [containerID] docker container restart [containerID] docker container ls same as docker ps docker container ls -a same as docker ps -a Docker Flow Commit docker commit <container name> Docker tag <sha 256 code from commit> <new image name> Docker commit <new image name>:<tags>. (If any tags available) Run docker run -ti ubuntu:latest bash -ti - terminal interactive Bash - process to run inside container :latest version of ubuntu to run docker run -ti ubuntu bash -c \u201csleep 3; echo all done\u201d Omitting the tag means docker will run the latest version -c means run a command, followed by the commands to run in the process docker run \u2014rm \u2014rm remove the container after it exits docker exec -ti <container name> bash Executes another process in container, useful for debugging but cannot change ports or volumes Detaching docker run -d Runs in detached mode Or ^ P ^ Q will detach the currently running container docker attach <container name> - reattaches the container to the terminal Listing Containers docker ps - show running containers docker ps -a - show all containers docker ps -l - show last container docker ps \u2014format = $FORMAT $FORMAT = \\nID\\t{{.ID}}\\nIMAGE\\t{{.Image}}\\nCREATED\\t{{.Running}}\\nCOMMAND\\t{{.Running}}\\nSTATUS\\t{{.Status}}\\nPORT\\t{{.Ports}}\\nNAMES\\t{{.Names}}\\n Managing Containers docker logs output of container (don\u2019t let output get too large -> impacts on performance Constraining resources Memory: docker run \u2014memory <max allowed memory> <image name> <command> CPU: docker run \u2014cpu-shares <relative to the containers> docker run \u2014cpu-quota <limit in general> Lessons from the field Don\u2019t let containers fetch dependencies at the start (if a dependency is removed, it breaks your container) - include the dependency inside your container Don\u2019t leave important stuff inside unnamed, stopped containers Volumes These are virtual discs to shared and store data (between hosts and containers) There are two main types persistent ephemeral (i.e. temporary) They are NOT part of the images. Sharing Data with Host Works like VM \u201cshared folders\u201d docker run -ti -v /home/user/folder:/shared-folder ubuntu bash /home/user/folder is the file path on the host /shared-folder is the path in the container This can also be done with files -v /home/user/readme.txt:/readme.txt Note: the file must exist before the container is run, otherwise its assumed to be a folder. Sharing between containers Start up first container with: docker run -v /shared-data \u2026. \u2014name my-container ( -v /shared-data means that the folder only exists in the container) Start up the other container: docker run \u2014volumes-from my-container \u2026 Now both containers have a /shared-data folder shared between them. /shared-data exists as long as ONE container is sharing it. Docker registries Registries manage and distribue images The docker company offers these for free Can also run your own docker search <name> - search for image (or use hub.docker.com) docker login -> log in to docker hub, creates token on local machine docker pull debian:sid docker tag debian:sid my-docker-id/new-image-name:v23 docker push my-docker-id/new-image-name:v23 Things to be aware of with registries DON\u2019T push images containing passwords Clean up your images regularly Be aware of how much you are trusting containers that you fetch Connecting Containers Legacy Linking Set environment variables inside linking container for host and port -> old (legacy) system IP address Binding Services that listen \u2018locally\u2019 by default are only available in the container. To allow connections, you need to use the \u2018bind address 0.0.0.0\u2019 inside the container. Use docker to limit access to the host only, e.g. docker run -p 127.0.0.1:1234:1234/tcp 127.0.0.1 -> only from the host Private Container Network Can group containers into 'private' networks. Can explicitly chose who can connect to who. Done by exposing ports and linking containers - docker helps you find other exposed ports with Compose services Exposing Ports can be done inside and outside the container docker run -p outside(host):inside(container) e.g. docker run -p 40000:50000 -p 40001:50001 ubuntu:14.04 ports 40000 and 40001 are on the host (outside) ports 50000 and 50001 are in the container (inside) Exposing Ports Dynamically Example docker run -port 50000 -port 50001 --name echo-server ubuntu:14.04 ports 50000 and 50001 are inside the container. To find the host ports mapped to these, use:- docker port echo-server This should produce an output like:- 50000/tcp -> 0.0.0.0:32770 50001/tcp -> 0.0.0.0:32771 Allows many containers running fixed ports - no need to worry about conflicts - often used with a service discovery program. UDP Ports docker run -p 12345:12345/udp Can also specify /tcp, but tcp is the default anyway. Connecting between containers Linking Directly generally used with orchestration links all ports but only one way only for services that cannot be run on different machines e.g. a service and health check that monitors it services and its db? Probably NOT a good idea e.g. docker run --rm -ti --link [server] --link [server] - [server] is the name of the container to link to. Can then use this name to connect to server inside docker Dynamic Linking Docker has private networks private networks have built in name servers that fix links MUST create the networks in advance docker network create <network name> This allows the link to be broken and recreated - e.g. if a server container is stopped, it can then be restarted and the namespace server with recreate the link. For example docker network create my_network docker run --net=my_network --name server ubuntu bash docker run --link server --net=my_network --client ubuntu bash Commands docker network create <name> docker network ls docker network prune docker network rm <name> docker network connect [OPTIONS] <network> <container> docker network disconnect -f <network> <container>","title":"Docker"},{"location":"software_dev/docker/docker/#docker","text":"","title":"Docker"},{"location":"software_dev/docker/docker/#useful-commands","text":"docker info docker version - provides more info than docker --version","title":"Useful commands"},{"location":"software_dev/docker/docker/#images","text":"docker images - lists all the docker images docker rm [image id] - removes the image Name structure:- registry.example.com:port/organisation/image-name:version-tag Normally you can leave out the \u201cregistry.example.com:port\u201d docker pull -> useful to pull images down ahead of time so you ca work on them when off line. Images can accumulate quickly docker rmi <image-name:tag> - removes the image Can also use docker rmi <image id>","title":"Images"},{"location":"software_dev/docker/docker/#containers","text":"command action docker ps list containers (running only) docker ps -a list containers (all) docker start [containerID] docker stop [containerID] docker restart [containerID] docker container start [containerID] docker container stop [containerID] docker container restart [containerID] docker container ls same as docker ps docker container ls -a same as docker ps -a","title":"Containers"},{"location":"software_dev/docker/docker/#docker-flow","text":"","title":"Docker Flow"},{"location":"software_dev/docker/docker/#commit","text":"docker commit <container name> Docker tag <sha 256 code from commit> <new image name> Docker commit <new image name>:<tags>. (If any tags available)","title":"Commit"},{"location":"software_dev/docker/docker/#run","text":"docker run -ti ubuntu:latest bash -ti - terminal interactive Bash - process to run inside container :latest version of ubuntu to run docker run -ti ubuntu bash -c \u201csleep 3; echo all done\u201d Omitting the tag means docker will run the latest version -c means run a command, followed by the commands to run in the process docker run \u2014rm \u2014rm remove the container after it exits docker exec -ti <container name> bash Executes another process in container, useful for debugging but cannot change ports or volumes","title":"Run"},{"location":"software_dev/docker/docker/#detaching","text":"docker run -d Runs in detached mode Or ^ P ^ Q will detach the currently running container docker attach <container name> - reattaches the container to the terminal","title":"Detaching"},{"location":"software_dev/docker/docker/#listing-containers","text":"docker ps - show running containers docker ps -a - show all containers docker ps -l - show last container docker ps \u2014format = $FORMAT $FORMAT = \\nID\\t{{.ID}}\\nIMAGE\\t{{.Image}}\\nCREATED\\t{{.Running}}\\nCOMMAND\\t{{.Running}}\\nSTATUS\\t{{.Status}}\\nPORT\\t{{.Ports}}\\nNAMES\\t{{.Names}}\\n","title":"Listing Containers"},{"location":"software_dev/docker/docker/#managing-containers","text":"docker logs output of container (don\u2019t let output get too large -> impacts on performance","title":"Managing Containers"},{"location":"software_dev/docker/docker/#constraining-resources","text":"Memory: docker run \u2014memory <max allowed memory> <image name> <command> CPU: docker run \u2014cpu-shares <relative to the containers> docker run \u2014cpu-quota <limit in general>","title":"Constraining resources"},{"location":"software_dev/docker/docker/#lessons-from-the-field","text":"Don\u2019t let containers fetch dependencies at the start (if a dependency is removed, it breaks your container) - include the dependency inside your container Don\u2019t leave important stuff inside unnamed, stopped containers","title":"Lessons from the field"},{"location":"software_dev/docker/docker/#volumes","text":"These are virtual discs to shared and store data (between hosts and containers) There are two main types persistent ephemeral (i.e. temporary) They are NOT part of the images.","title":"Volumes"},{"location":"software_dev/docker/docker/#sharing-data-with-host","text":"Works like VM \u201cshared folders\u201d docker run -ti -v /home/user/folder:/shared-folder ubuntu bash /home/user/folder is the file path on the host /shared-folder is the path in the container This can also be done with files -v /home/user/readme.txt:/readme.txt Note: the file must exist before the container is run, otherwise its assumed to be a folder.","title":"Sharing Data with Host"},{"location":"software_dev/docker/docker/#sharing-between-containers","text":"Start up first container with: docker run -v /shared-data \u2026. \u2014name my-container ( -v /shared-data means that the folder only exists in the container) Start up the other container: docker run \u2014volumes-from my-container \u2026 Now both containers have a /shared-data folder shared between them. /shared-data exists as long as ONE container is sharing it.","title":"Sharing between containers"},{"location":"software_dev/docker/docker/#docker-registries","text":"Registries manage and distribue images The docker company offers these for free Can also run your own docker search <name> - search for image (or use hub.docker.com) docker login -> log in to docker hub, creates token on local machine docker pull debian:sid docker tag debian:sid my-docker-id/new-image-name:v23 docker push my-docker-id/new-image-name:v23 Things to be aware of with registries DON\u2019T push images containing passwords Clean up your images regularly Be aware of how much you are trusting containers that you fetch","title":"Docker registries"},{"location":"software_dev/docker/docker/#connecting-containers","text":"","title":"Connecting Containers"},{"location":"software_dev/docker/docker/#legacy-linking","text":"Set environment variables inside linking container for host and port -> old (legacy) system","title":"Legacy Linking"},{"location":"software_dev/docker/docker/#ip-address-binding","text":"Services that listen \u2018locally\u2019 by default are only available in the container. To allow connections, you need to use the \u2018bind address 0.0.0.0\u2019 inside the container. Use docker to limit access to the host only, e.g. docker run -p 127.0.0.1:1234:1234/tcp 127.0.0.1 -> only from the host","title":"IP address Binding"},{"location":"software_dev/docker/docker/#private-container-network","text":"Can group containers into 'private' networks. Can explicitly chose who can connect to who. Done by exposing ports and linking containers - docker helps you find other exposed ports with Compose services","title":"Private Container Network"},{"location":"software_dev/docker/docker/#exposing-ports","text":"can be done inside and outside the container docker run -p outside(host):inside(container) e.g. docker run -p 40000:50000 -p 40001:50001 ubuntu:14.04 ports 40000 and 40001 are on the host (outside) ports 50000 and 50001 are in the container (inside)","title":"Exposing Ports"},{"location":"software_dev/docker/docker/#exposing-ports-dynamically","text":"Example docker run -port 50000 -port 50001 --name echo-server ubuntu:14.04 ports 50000 and 50001 are inside the container. To find the host ports mapped to these, use:- docker port echo-server This should produce an output like:- 50000/tcp -> 0.0.0.0:32770 50001/tcp -> 0.0.0.0:32771 Allows many containers running fixed ports - no need to worry about conflicts - often used with a service discovery program.","title":"Exposing Ports Dynamically"},{"location":"software_dev/docker/docker/#udp-ports","text":"docker run -p 12345:12345/udp Can also specify /tcp, but tcp is the default anyway.","title":"UDP Ports"},{"location":"software_dev/docker/docker/#connecting-between-containers","text":"","title":"Connecting between containers"},{"location":"software_dev/docker/docker/#linking-directly","text":"generally used with orchestration links all ports but only one way only for services that cannot be run on different machines e.g. a service and health check that monitors it services and its db? Probably NOT a good idea e.g. docker run --rm -ti --link [server] --link [server] - [server] is the name of the container to link to. Can then use this name to connect to server inside docker","title":"Linking Directly"},{"location":"software_dev/docker/docker/#dynamic-linking","text":"Docker has private networks private networks have built in name servers that fix links MUST create the networks in advance docker network create <network name> This allows the link to be broken and recreated - e.g. if a server container is stopped, it can then be restarted and the namespace server with recreate the link. For example docker network create my_network docker run --net=my_network --name server ubuntu bash docker run --link server --net=my_network --client ubuntu bash Commands docker network create <name> docker network ls docker network prune docker network rm <name> docker network connect [OPTIONS] <network> <container> docker network disconnect -f <network> <container>","title":"Dynamic Linking"},{"location":"software_dev/game_dev/polishing/","text":"Notes on Game Development Javidx9 From Javidx9's Community Showcase 2019 Video Here's the list Get some basic shapes moving around Start work with a small tile engine Get the camera moving An alternate list... graphics and user input camera collision detection partition the world up Juicifying a Game Taken from Juice it or lose it - a talk by Martin Jonasson & Petri Purho Tweening - squash & stretch, bounce, alpha blending, rotation, colour changing Add colour scaling when something hits sound and music particles screen shake A basic linear tweening equation: x += (target - x) * 0.1; Polishing an Indie Game Taken from Indie Polish: Making the Most of the Last 10% squash and stretch in animation voice over - getting a voice over actor colour \u21d2 get an understanding of colour theory! Sometimes it's best to know when not to polish. The best way to make something polished is to not make it unpolished. A possible polish list field of view in game control binding in game settings for graphics windowed / full screen ui scaling mouse controls on menus raw mouse input v. averaged mouse input splash screens tutorial information credits","title":"Notes on Game Development"},{"location":"software_dev/game_dev/polishing/#notes-on-game-development","text":"","title":"Notes on Game Development"},{"location":"software_dev/game_dev/polishing/#javidx9","text":"From Javidx9's Community Showcase 2019 Video Here's the list Get some basic shapes moving around Start work with a small tile engine Get the camera moving An alternate list... graphics and user input camera collision detection partition the world up","title":"Javidx9"},{"location":"software_dev/game_dev/polishing/#juicifying-a-game","text":"Taken from Juice it or lose it - a talk by Martin Jonasson & Petri Purho Tweening - squash & stretch, bounce, alpha blending, rotation, colour changing Add colour scaling when something hits sound and music particles screen shake A basic linear tweening equation: x += (target - x) * 0.1;","title":"Juicifying a Game"},{"location":"software_dev/game_dev/polishing/#polishing-an-indie-game","text":"Taken from Indie Polish: Making the Most of the Last 10% squash and stretch in animation voice over - getting a voice over actor colour \u21d2 get an understanding of colour theory! Sometimes it's best to know when not to polish. The best way to make something polished is to not make it unpolished. A possible polish list field of view in game control binding in game settings for graphics windowed / full screen ui scaling mouse controls on menus raw mouse input v. averaged mouse input splash screens tutorial information credits","title":"Polishing an Indie Game"},{"location":"software_dev/game_dev/engines/engines_list/","text":"Game Engines List A list of game engines I'm aware of, and that I have worked with, or want to work with. This means it is by no means an exhaustive list! C++ One Loner Coder's Pixel Game Engine - view details of it here Simple Direct Media Layer Java LWJGL LibGDX Others (that I may end up looking at) Mono (for C#) Unity Gainput C++ innput device library There's also this list","title":"Game Engines List"},{"location":"software_dev/game_dev/engines/engines_list/#game-engines-list","text":"A list of game engines I'm aware of, and that I have worked with, or want to work with. This means it is by no means an exhaustive list!","title":"Game Engines List"},{"location":"software_dev/game_dev/engines/engines_list/#c","text":"One Loner Coder's Pixel Game Engine - view details of it here Simple Direct Media Layer","title":"C++"},{"location":"software_dev/game_dev/engines/engines_list/#java","text":"LWJGL LibGDX","title":"Java"},{"location":"software_dev/game_dev/engines/engines_list/#others-that-i-may-end-up-looking-at","text":"Mono (for C#) Unity Gainput C++ innput device library There's also this list","title":"Others (that I may end up looking at)"},{"location":"software_dev/game_dev/engines/olc_pixel_game_engine2/","text":"olc::PixelGameEngine 2 from Javidx9's olc::PixelGameEngine2 video Decals Decals are non persistant sprites (need to be drawn every frame) . They live on the GPU and are layered on top of the screen image. Loading a Decal Decals are loaded via sprites olc::Sprite sprDemo = new olc::Sprite(\"./resources/my_png.png\"); olc::Decal decDemo = new olc::Decal(sprDemo); Mouse Input GetMouse(2).bPressed // button 2 is the mouse wheel button float GetMouseWheel() // returns +ve for up, and -ve for down","title":"olc::PixelGameEngine 2"},{"location":"software_dev/game_dev/engines/olc_pixel_game_engine2/#olcpixelgameengine-2","text":"from Javidx9's olc::PixelGameEngine2 video","title":"olc::PixelGameEngine 2"},{"location":"software_dev/game_dev/engines/olc_pixel_game_engine2/#decals","text":"Decals are non persistant sprites (need to be drawn every frame) . They live on the GPU and are layered on top of the screen image.","title":"Decals"},{"location":"software_dev/game_dev/engines/olc_pixel_game_engine2/#loading-a-decal","text":"Decals are loaded via sprites olc::Sprite sprDemo = new olc::Sprite(\"./resources/my_png.png\"); olc::Decal decDemo = new olc::Decal(sprDemo);","title":"Loading a Decal"},{"location":"software_dev/game_dev/engines/olc_pixel_game_engine2/#mouse-input","text":"GetMouse(2).bPressed // button 2 is the mouse wheel button float GetMouseWheel() // returns +ve for up, and -ve for down","title":"Mouse Input"},{"location":"software_dev/git/branching/","text":"Git Branching create a branch git checkout -b branch_name (create branch and switch to it) git branch branch_name (create branch,don\u2019t switch to it) list branches git branch --list switch to a branch git checkout branch_name delete a branch git branch -d branch_name Merging To merge branch1 into master Switch to master git checkout master Then merge branch1 into master git merge branch1","title":"Git Branching"},{"location":"software_dev/git/branching/#git-branching","text":"create a branch git checkout -b branch_name (create branch and switch to it) git branch branch_name (create branch,don\u2019t switch to it) list branches git branch --list switch to a branch git checkout branch_name delete a branch git branch -d branch_name","title":"Git Branching"},{"location":"software_dev/git/branching/#merging","text":"To merge branch1 into master Switch to master git checkout master Then merge branch1 into master git merge branch1","title":"Merging"},{"location":"software_dev/git/git_and_ssh/","text":"Git and SSH Stage 1. Get a key Check for existing keys first:- ls -la ~/.ssh If no suitable keys exist, generate a new one:- ssh-keygen -o -b 4096 -t rsa (-o uses the newer OpenSSH format rather than the PEM format) ssh-add <id_file_name> (might need to start the ssh agent first with eval $(ssh_agent -s) ) Now you have a suitable SSH key pair. Stage 2. Add public key to the git service Copy contents of .pub to clipboard. Paste this into the relevant section of the whichever git service you are using. When adding public keys it might make sense to label them with which device is using that key to access the service (e.g. 'work-mac', 'my win laptop') GitHub The place to enter the public ssh key can be found in: Account/ Settings/SSH & GPG keys BitBucket The place to enter the public ssh key can be found in: Account icon (bottom left of page) -> bitbucket settings -> security -> ssh keys Stage 3. Clone the repo Now can clone the repo with the ssh URL rather than the https URL In github this looks like: git clone git@github.com:myusername/reponame.git In bitbucket this looks like: git clone ssh://git@bitbucket.org/teamname/reponame.git If updating an existing repo the remote URL can be updated with: git remote set-url origin [ssh version of url]","title":"Git and SSH"},{"location":"software_dev/git/git_and_ssh/#git-and-ssh","text":"","title":"Git and SSH"},{"location":"software_dev/git/git_and_ssh/#stage-1-get-a-key","text":"Check for existing keys first:- ls -la ~/.ssh If no suitable keys exist, generate a new one:- ssh-keygen -o -b 4096 -t rsa (-o uses the newer OpenSSH format rather than the PEM format) ssh-add <id_file_name> (might need to start the ssh agent first with eval $(ssh_agent -s) ) Now you have a suitable SSH key pair.","title":"Stage 1. Get a key"},{"location":"software_dev/git/git_and_ssh/#stage-2-add-public-key-to-the-git-service","text":"Copy contents of .pub to clipboard. Paste this into the relevant section of the whichever git service you are using. When adding public keys it might make sense to label them with which device is using that key to access the service (e.g. 'work-mac', 'my win laptop')","title":"Stage 2. Add public key to the git service"},{"location":"software_dev/git/git_and_ssh/#github","text":"The place to enter the public ssh key can be found in: Account/ Settings/SSH & GPG keys","title":"GitHub"},{"location":"software_dev/git/git_and_ssh/#bitbucket","text":"The place to enter the public ssh key can be found in: Account icon (bottom left of page) -> bitbucket settings -> security -> ssh keys","title":"BitBucket"},{"location":"software_dev/git/git_and_ssh/#stage-3-clone-the-repo","text":"Now can clone the repo with the ssh URL rather than the https URL In github this looks like: git clone git@github.com:myusername/reponame.git In bitbucket this looks like: git clone ssh://git@bitbucket.org/teamname/reponame.git If updating an existing repo the remote URL can be updated with: git remote set-url origin [ssh version of url]","title":"Stage 3.  Clone the repo"},{"location":"software_dev/git/log/","text":"Git Log Some nice formatting try.. git config --global alias.lg3 \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\" git config --global alias.lg2 \"log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%ai%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)'' %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all\" Git Aliases Alternatively, create an alias in the .bashrc to show a pretified version of the git log alias gl2=\"git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%ai%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)'' %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all\" alias gl3=\"git log --graph --abbrev-commit --color --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\"","title":"Git Log"},{"location":"software_dev/git/log/#git-log","text":"","title":"Git Log"},{"location":"software_dev/git/log/#some-nice-formatting","text":"try.. git config --global alias.lg3 \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\" git config --global alias.lg2 \"log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%ai%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)'' %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all\"","title":"Some nice formatting"},{"location":"software_dev/git/log/#git-aliases","text":"Alternatively, create an alias in the .bashrc to show a pretified version of the git log alias gl2=\"git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%ai%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)'' %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all\" alias gl3=\"git log --graph --abbrev-commit --color --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\"","title":"Git Aliases"},{"location":"software_dev/git/rebasing/","text":"Git Rebase Squashing commits git rebase -i HEAD~2 In the next file prefix the commits to be squashed with either 's' or 'f' squash - means that you can rename the new commit fixup - will merge that commit into other commit without any renaming Renaming a commit git rebase -i HEAD~1 In the next file prefix commit with 'r', then exit. A new file will be opened in which you can update the commit message. Dropping a commit git rebase -i HEAD~1 In the next file, prefix the commit with 'd'. Git Push after Rebase After a git rebase, push the branch back up to the remote server with git push origin [branch_name] -f -f is essential as rebase modifies your git history and needs to be forced. Rebasing on master You have multiple branches... You merge one branch (blue), but now the other branch is out of sync with the master branch. From the branch (green) you want to rebase: git fetch This downloads all the references the green branch will need, then rebase with git rebase origin/master git push origin [my_branch] -f And we end up with...","title":"Git Rebase"},{"location":"software_dev/git/rebasing/#git-rebase","text":"","title":"Git Rebase"},{"location":"software_dev/git/rebasing/#squashing-commits","text":"git rebase -i HEAD~2 In the next file prefix the commits to be squashed with either 's' or 'f' squash - means that you can rename the new commit fixup - will merge that commit into other commit without any renaming","title":"Squashing commits"},{"location":"software_dev/git/rebasing/#renaming-a-commit","text":"git rebase -i HEAD~1 In the next file prefix commit with 'r', then exit. A new file will be opened in which you can update the commit message.","title":"Renaming a commit"},{"location":"software_dev/git/rebasing/#dropping-a-commit","text":"git rebase -i HEAD~1 In the next file, prefix the commit with 'd'.","title":"Dropping a commit"},{"location":"software_dev/git/rebasing/#git-push-after-rebase","text":"After a git rebase, push the branch back up to the remote server with git push origin [branch_name] -f -f is essential as rebase modifies your git history and needs to be forced.","title":"Git Push after Rebase"},{"location":"software_dev/git/rebasing/#rebasing-on-master","text":"You have multiple branches... You merge one branch (blue), but now the other branch is out of sync with the master branch. From the branch (green) you want to rebase: git fetch This downloads all the references the green branch will need, then rebase with git rebase origin/master git push origin [my_branch] -f And we end up with...","title":"Rebasing on master"},{"location":"software_dev/java/java/","text":"Java Streams Parallel Creating a parallel stream... particles.parallelStream().forEach(particle -> particle.act(dt)); Processing a stream in parallel... particles.stream().parallel() Matching particles.stream().anyMatch(Particle::isActive) particles.stream().noneMatch(Particle::isActive)","title":"Java"},{"location":"software_dev/java/java/#java","text":"","title":"Java"},{"location":"software_dev/java/java/#streams","text":"","title":"Streams"},{"location":"software_dev/java/java/#parallel","text":"Creating a parallel stream... particles.parallelStream().forEach(particle -> particle.act(dt)); Processing a stream in parallel... particles.stream().parallel()","title":"Parallel"},{"location":"software_dev/java/java/#matching","text":"particles.stream().anyMatch(Particle::isActive) particles.stream().noneMatch(Particle::isActive)","title":"Matching"},{"location":"software_dev/lisp/bits_of_lisp_01_eval_model/","text":"The Lisp Evaluation Model This is from Bagger's excellent Bits of Lisp youtube video Self Evaluating Objects numbers, (e.g. 1, -1, 1.616) strings, (e.g. \"Hello World\") keywords, (e.g. foo) Lists (+ 3 5) The first item in a list is evaluated as a function. The rest of the items in the list are evaluated and then passed to the function, However... `(+ 3 5) The back tick tells list not to evaluate the list and to treat it as data instead. #' This tells lisp to go and find the function named by this symbol. Special Forms The normal rules of evaluation don't apply to special forms. For example, the if function (if (> 10 5) (wake-up) (go-to-sleep)) If this was processed as a list, both wake-up and go-to-sleep would be evaluated, but this isn't what we want - we only want one of the items to be run (in the above case wake-up ). This is a the reason the progn is needed in the if statement, for exmaple.. (if (> 10 5) (progn (wake-up) (get-up)) (go-to-sleep)) Handy bits of Lisp (type-of *) in the repl this will return the type of hte last value returned in the repl. (second lst) returns the second item in the list - kind of like cadr","title":"The Lisp Evaluation Model"},{"location":"software_dev/lisp/bits_of_lisp_01_eval_model/#the-lisp-evaluation-model","text":"This is from Bagger's excellent Bits of Lisp youtube video","title":"The Lisp Evaluation Model"},{"location":"software_dev/lisp/bits_of_lisp_01_eval_model/#self-evaluating-objects","text":"numbers, (e.g. 1, -1, 1.616) strings, (e.g. \"Hello World\") keywords, (e.g. foo)","title":"Self Evaluating Objects"},{"location":"software_dev/lisp/bits_of_lisp_01_eval_model/#lists","text":"(+ 3 5) The first item in a list is evaluated as a function. The rest of the items in the list are evaluated and then passed to the function, However... `(+ 3 5) The back tick tells list not to evaluate the list and to treat it as data instead.","title":"Lists"},{"location":"software_dev/lisp/bits_of_lisp_01_eval_model/#_1","text":"This tells lisp to go and find the function named by this symbol.","title":"#'"},{"location":"software_dev/lisp/bits_of_lisp_01_eval_model/#special-forms","text":"The normal rules of evaluation don't apply to special forms. For example, the if function (if (> 10 5) (wake-up) (go-to-sleep)) If this was processed as a list, both wake-up and go-to-sleep would be evaluated, but this isn't what we want - we only want one of the items to be run (in the above case wake-up ). This is a the reason the progn is needed in the if statement, for exmaple.. (if (> 10 5) (progn (wake-up) (get-up)) (go-to-sleep))","title":"Special Forms"},{"location":"software_dev/lisp/bits_of_lisp_01_eval_model/#handy-bits-of-lisp","text":"(type-of *) in the repl this will return the type of hte last value returned in the repl. (second lst) returns the second item in the list - kind of like cadr","title":"Handy bits of Lisp"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/","text":"Land of Lisp - Ch1 & Ch2 TL;DR Loading Source Files > (load \"my_lisp_file.lisp\") clisp \"my_lisp_file.lisp\" sbcl --load \"my_lisp_file.lisp\" Global Vars > (defvar +golden_ratio+ 1.616) ; immutable > (defparameter *foo* \"foo\") ; mutable Functions (defun my_super_duper_function (...args...) ... body of function ...) Local Variables (let ((var1 val1) (var2 val2)) ...body...) (let* ((var1 val1) (var2 var2)) ...body...) Local Functions ; flet doesn't allow for local functions to call each other - no recursion (flet ((function_name (arguments) ...function body...)) ... body ...) ; labels allows local functions to call each other (can recurse) (labels ((function_name (arguments) ... function body ...)) ... body ...) Chapter 1 Loading source files... > (load \"my_lisp_file.lisp\") Or... clisp \"my_lisp_file.lisp\" sbcl --load \"my_lisp_file.lisp\" Chapter 2 Global Variables Defining a constant (convention is to surround name with + symbols) (defvar +golden_ratio+ 1.6180339) Define a mutable global variable (defparameter *myval* 1) \"Earmuffs\" The asterixes surrounding a variable are referred to as ear muffs. It's a Lisp convention that these are used to identify global variables. The asterixes are part of the name. defvar and defparameter defvar will only set a value once. If defvar is used to change a variable's value again, the value will not change. The value can be changed with calls to other functions (such as defparameter ). e.g. [1]> (defvar +hello+ \"Hello\") ; define the value +HELLO+ [2]> +hello+ \"Hello\" [3]> (defvar +hello+ \"Hello World\") ; defvar won't change value +HELLO+ [4]> +hello+ \"Hello\" [5]> (defparameter +hello+ \"Hello World\") ; defparameter WILL change the value +HELLO+ [6]> +hello+ \"Hello World\" see also: setf and setq Defining a Function (defun func_name (arguments) ... body ... ) Defining Local Variables (let (variable declarations) ..body... ) Defining Local Functions There are two ways to define a local function in Lisp flet and labels . flet functions can only be called by the body labels allows local functions to call themselves and other local functions. It's a convention to default to the use to flet unless labels is required. This way if you see labels in code you can expect functions to be calling each other and that recursion is likely. flet (flet ((function_name_1 (arguments) ... function 1 body...) (function_name_2 (arguments) ... function 2 body...)) ... body ... ) e.g. (flet ((f (n) (+ n 10)) (g (n) (- n 3))) (g (f 5)) ) labels (labels ((function_name (arguments) ... function body...)) ... body ... ) e.g. (labels ((a (n) (+ n 5)) (b (n) (+ (a n) 6))) (b 10))","title":"Land of Lisp - Ch1 & Ch2"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#land-of-lisp-ch1-ch2","text":"","title":"Land of Lisp - Ch1 &amp; Ch2"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#tldr","text":"","title":"TL;DR"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#loading-source-files","text":"> (load \"my_lisp_file.lisp\") clisp \"my_lisp_file.lisp\" sbcl --load \"my_lisp_file.lisp\"","title":"Loading Source Files"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#global-vars","text":"> (defvar +golden_ratio+ 1.616) ; immutable > (defparameter *foo* \"foo\") ; mutable","title":"Global Vars"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#functions","text":"(defun my_super_duper_function (...args...) ... body of function ...)","title":"Functions"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#local-variables","text":"(let ((var1 val1) (var2 val2)) ...body...) (let* ((var1 val1) (var2 var2)) ...body...)","title":"Local Variables"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#local-functions","text":"; flet doesn't allow for local functions to call each other - no recursion (flet ((function_name (arguments) ...function body...)) ... body ...) ; labels allows local functions to call each other (can recurse) (labels ((function_name (arguments) ... function body ...)) ... body ...)","title":"Local Functions"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#chapter-1","text":"Loading source files... > (load \"my_lisp_file.lisp\") Or... clisp \"my_lisp_file.lisp\" sbcl --load \"my_lisp_file.lisp\"","title":"Chapter 1"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#chapter-2","text":"","title":"Chapter 2"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#global-variables","text":"Defining a constant (convention is to surround name with + symbols) (defvar +golden_ratio+ 1.6180339) Define a mutable global variable (defparameter *myval* 1) \"Earmuffs\" The asterixes surrounding a variable are referred to as ear muffs. It's a Lisp convention that these are used to identify global variables. The asterixes are part of the name.","title":"Global Variables"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#defvar-and-defparameter","text":"defvar will only set a value once. If defvar is used to change a variable's value again, the value will not change. The value can be changed with calls to other functions (such as defparameter ). e.g. [1]> (defvar +hello+ \"Hello\") ; define the value +HELLO+ [2]> +hello+ \"Hello\" [3]> (defvar +hello+ \"Hello World\") ; defvar won't change value +HELLO+ [4]> +hello+ \"Hello\" [5]> (defparameter +hello+ \"Hello World\") ; defparameter WILL change the value +HELLO+ [6]> +hello+ \"Hello World\" see also: setf and setq","title":"defvar and defparameter"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#defining-a-function","text":"(defun func_name (arguments) ... body ... )","title":"Defining a Function"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#defining-local-variables","text":"(let (variable declarations) ..body... )","title":"Defining Local Variables"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#defining-local-functions","text":"There are two ways to define a local function in Lisp flet and labels . flet functions can only be called by the body labels allows local functions to call themselves and other local functions. It's a convention to default to the use to flet unless labels is required. This way if you see labels in code you can expect functions to be calling each other and that recursion is likely.","title":"Defining Local Functions"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#flet","text":"(flet ((function_name_1 (arguments) ... function 1 body...) (function_name_2 (arguments) ... function 2 body...)) ... body ... ) e.g. (flet ((f (n) (+ n 10)) (g (n) (- n 3))) (g (f 5)) )","title":"flet"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#labels","text":"(labels ((function_name (arguments) ... function body...)) ... body ... ) e.g. (labels ((a (n) (+ n 5)) (b (n) (+ (a n) 6))) (b 10))","title":"labels"},{"location":"software_dev/lisp/land-of-lisp-ch03/","text":"Land of Lisp - Ch 3 TL;DR code and data mode cons cells making lists using cons , ' and list > (cons 1 ()) (1) > (cons 1 (cons 2 ())) (1 2) > '(1 2) (1 2) > (list 1 2) (1 2) car and cdr Chapter 3 Code and Data Mode > (expt 2 3) ; code mode 8 > '(expt 2 3) ; data mode (expt 2 3) Lists Using cons to create lists > (cons 'chicken 'egg) (CHICKEN . EGG) > (cons 'chicken 'nil) (CHICKEN) > (cons 'chicken ()) (CHICKEN) > (cons 'chicken '(egg omlette)) (CHICKEN EGG OMLETTE) Using car and cdr These work up to 4 levels deep. Anything deeper ( e.g. cadadar ) you'll have to write yourself. Also note that it works from back to front (look at caddr for example) > (car '(1 2 3 4 5)) 1 > (cdr '(1 2 3 4 5)) (2 3 4 5) > (cadr '(1 2 3 4 5)) 2 > (cddr '(1 2 3 4 5)) (3 4 5) > (caddr '(1 2 3 4 5)) ; processes in this order -> d.. d.. a 3 > (car '( (1 2) 3 4 5)) ; using a nested list (1 2) Creating a list, threeways... ( cons and list ) > (cons 'chicken (cons 'egg (cons 'omlette ()))) (CHICKEN EGG OMLETTE) > (list 'chicken 'egg 'omlette) (CHICKEN EGG OMLETTE) > '(chicken egg omlette) (CHICKEN EGG OMLETTE) > '(cat (duck bat) ant) (CAT (DUCK BAT) ANT)","title":"Land of Lisp - Ch 3"},{"location":"software_dev/lisp/land-of-lisp-ch03/#land-of-lisp-ch-3","text":"","title":"Land of Lisp - Ch 3"},{"location":"software_dev/lisp/land-of-lisp-ch03/#tldr","text":"code and data mode cons cells making lists using cons , ' and list > (cons 1 ()) (1) > (cons 1 (cons 2 ())) (1 2) > '(1 2) (1 2) > (list 1 2) (1 2) car and cdr","title":"TL;DR"},{"location":"software_dev/lisp/land-of-lisp-ch03/#chapter-3","text":"","title":"Chapter 3"},{"location":"software_dev/lisp/land-of-lisp-ch03/#code-and-data-mode","text":"> (expt 2 3) ; code mode 8 > '(expt 2 3) ; data mode (expt 2 3)","title":"Code and Data Mode"},{"location":"software_dev/lisp/land-of-lisp-ch03/#lists","text":"","title":"Lists"},{"location":"software_dev/lisp/land-of-lisp-ch03/#using-cons-to-create-lists","text":"> (cons 'chicken 'egg) (CHICKEN . EGG) > (cons 'chicken 'nil) (CHICKEN) > (cons 'chicken ()) (CHICKEN) > (cons 'chicken '(egg omlette)) (CHICKEN EGG OMLETTE)","title":"Using cons to create lists"},{"location":"software_dev/lisp/land-of-lisp-ch03/#using-car-and-cdr","text":"These work up to 4 levels deep. Anything deeper ( e.g. cadadar ) you'll have to write yourself. Also note that it works from back to front (look at caddr for example) > (car '(1 2 3 4 5)) 1 > (cdr '(1 2 3 4 5)) (2 3 4 5) > (cadr '(1 2 3 4 5)) 2 > (cddr '(1 2 3 4 5)) (3 4 5) > (caddr '(1 2 3 4 5)) ; processes in this order -> d.. d.. a 3 > (car '( (1 2) 3 4 5)) ; using a nested list (1 2)","title":"Using car and cdr"},{"location":"software_dev/lisp/land-of-lisp-ch03/#creating-a-list-threeways-cons-and-list","text":"> (cons 'chicken (cons 'egg (cons 'omlette ()))) (CHICKEN EGG OMLETTE) > (list 'chicken 'egg 'omlette) (CHICKEN EGG OMLETTE) > '(chicken egg omlette) (CHICKEN EGG OMLETTE) > '(cat (duck bat) ant) (CAT (DUCK BAT) ANT)","title":"Creating a list, threeways... (cons and list)"},{"location":"software_dev/lisp/land-of-lisp-ch04/","text":"Land of Lisp - Ch 4 TL;DR Empty equals false - all of these are empty -> () '() nil 'nil if - only one branch (then branch or else branch) evaluated depending on condition when and unless - implicit progn cond - classic branching in Lisp lisp (cond ((cond1) 'do-1a) ((cond2) 'do-2a 'do-2b) (t 'do-a 'do-b)) case - branching by matching with eq (so cannot branch on strings) lisp (case var1 ((val1) 'do-1a 'do-1b) ((val2) 'do-2a) (otherwise 'do-a 'do-b)) conditionals - and and or - shortcut Boolean evaluation comparisons rule of thumb - use eq when comparing symbols and equal when comparing everything else. eq - compares symbols only (also seems to compare ints and chars [case sensitive]) equal - general comparison (symbols, chars, numbers, strings [case insensitive], lists, etc) eql - compares symbols, chars and numbers (but only of same type) - chars are case insensitive equalp - like equal but can compare between different number types (e.g. float and int) = - comparsion between number types string-equal (case insensitive) char-equal (case insensitive) Chapter 4 (conditions) Empty Equals False The following are all false (scheme handles this differently) () '() nil 'nil (defun my-len (list) (if list (1+ (my-len (cdr list))) 0)) if only one branch executed, lisp will not evaluate the branch not taken (if '(1) 'this-is-true (/ 1 0)) Notes: can only execute 1 item in each branch (/ 1 0) will never be evaluated so lisp won't throw it out when and unless Executes multiple statements (when (condition-is-true) 'this-is-executed 'and-so-is-this ) (unless (condition-is-false) 'this-is-executed 'and-so-is-this ) cond Classic way to do branching in Lisp. Considered by some to be the one true Lisp conditional (as it's been around since the Lisp Stone Age) (defvar *arch-enemy* nil) (defun pudding-eater (person) (cond ((eq person 'henry) (setf *arch-enemy* 'stupid-lisp-alien) '(curse you lisp alien - you ate my pudding)) ((eq person 'johnny) (setf *arch-enemy* 'useless-old-johnny) '(i hope you choked on my pudding johnny)) (t '(why you eatin' ma pudding stranger?)))) case (defun pudding-eater (person) (case person ((henry) (setf *arch-enemy* 'stupid-lisp-alien) '(curse you lisp alien - you ate my pudding)) ((johnny) (setf *arch-enemy* 'useless-old-johnny) '(i hope you choked on my pudding johnny)) (otherwise '(why you eatin' ma pudding stranger?)))) Note: case uses eq for comparison, so cannot be used to branch on string values. conditionals \"and\" and \"or\" > (and (oddp 5)(oddp 7)(oddp 9)) > (or (oddp 6)(oodp 4)(oddp 1)) Lisp will shortcut these statements (i.e. stop processing an or when it hits a true condition, stop processing an and condition when it hits a false). Handy for a trick like this... (and *file-modified* (ask-user-about-saving) (save-file)) comparisons eq - compares symbols only. (also seems to compare ints and chars as well) eql - compares symbols, chars and numbers (but only of same type, e.g. int -> int, float -> float), chars are case insensitive equal - general comparison (symbols, chars, numbers, strings [case sensitive], lists, etc) equalp - like equal but can compare between number types (e.g. int -> float), strings are case insensitive = - comparison between number types string-equal - comparison between strings (case insensitive) char-equal - comparison between chars (case insensitve)","title":"Land of Lisp - Ch 4"},{"location":"software_dev/lisp/land-of-lisp-ch04/#land-of-lisp-ch-4","text":"","title":"Land of Lisp - Ch 4"},{"location":"software_dev/lisp/land-of-lisp-ch04/#tldr","text":"Empty equals false - all of these are empty -> () '() nil 'nil if - only one branch (then branch or else branch) evaluated depending on condition when and unless - implicit progn cond - classic branching in Lisp lisp (cond ((cond1) 'do-1a) ((cond2) 'do-2a 'do-2b) (t 'do-a 'do-b)) case - branching by matching with eq (so cannot branch on strings) lisp (case var1 ((val1) 'do-1a 'do-1b) ((val2) 'do-2a) (otherwise 'do-a 'do-b)) conditionals - and and or - shortcut Boolean evaluation comparisons rule of thumb - use eq when comparing symbols and equal when comparing everything else. eq - compares symbols only (also seems to compare ints and chars [case sensitive]) equal - general comparison (symbols, chars, numbers, strings [case insensitive], lists, etc) eql - compares symbols, chars and numbers (but only of same type) - chars are case insensitive equalp - like equal but can compare between different number types (e.g. float and int) = - comparsion between number types string-equal (case insensitive) char-equal (case insensitive)","title":"TL;DR"},{"location":"software_dev/lisp/land-of-lisp-ch04/#chapter-4-conditions","text":"","title":"Chapter 4 (conditions)"},{"location":"software_dev/lisp/land-of-lisp-ch04/#empty-equals-false","text":"The following are all false (scheme handles this differently) () '() nil 'nil (defun my-len (list) (if list (1+ (my-len (cdr list))) 0))","title":"Empty Equals False"},{"location":"software_dev/lisp/land-of-lisp-ch04/#if","text":"only one branch executed, lisp will not evaluate the branch not taken (if '(1) 'this-is-true (/ 1 0)) Notes: can only execute 1 item in each branch (/ 1 0) will never be evaluated so lisp won't throw it out","title":"if"},{"location":"software_dev/lisp/land-of-lisp-ch04/#when-and-unless","text":"Executes multiple statements (when (condition-is-true) 'this-is-executed 'and-so-is-this ) (unless (condition-is-false) 'this-is-executed 'and-so-is-this )","title":"when and unless"},{"location":"software_dev/lisp/land-of-lisp-ch04/#cond","text":"Classic way to do branching in Lisp. Considered by some to be the one true Lisp conditional (as it's been around since the Lisp Stone Age) (defvar *arch-enemy* nil) (defun pudding-eater (person) (cond ((eq person 'henry) (setf *arch-enemy* 'stupid-lisp-alien) '(curse you lisp alien - you ate my pudding)) ((eq person 'johnny) (setf *arch-enemy* 'useless-old-johnny) '(i hope you choked on my pudding johnny)) (t '(why you eatin' ma pudding stranger?))))","title":"cond"},{"location":"software_dev/lisp/land-of-lisp-ch04/#case","text":"(defun pudding-eater (person) (case person ((henry) (setf *arch-enemy* 'stupid-lisp-alien) '(curse you lisp alien - you ate my pudding)) ((johnny) (setf *arch-enemy* 'useless-old-johnny) '(i hope you choked on my pudding johnny)) (otherwise '(why you eatin' ma pudding stranger?)))) Note: case uses eq for comparison, so cannot be used to branch on string values.","title":"case"},{"location":"software_dev/lisp/land-of-lisp-ch04/#conditionals-and-and-or","text":"> (and (oddp 5)(oddp 7)(oddp 9)) > (or (oddp 6)(oodp 4)(oddp 1)) Lisp will shortcut these statements (i.e. stop processing an or when it hits a true condition, stop processing an and condition when it hits a false). Handy for a trick like this... (and *file-modified* (ask-user-about-saving) (save-file))","title":"conditionals \"and\" and \"or\""},{"location":"software_dev/lisp/land-of-lisp-ch04/#comparisons","text":"eq - compares symbols only. (also seems to compare ints and chars as well) eql - compares symbols, chars and numbers (but only of same type, e.g. int -> int, float -> float), chars are case insensitive equal - general comparison (symbols, chars, numbers, strings [case sensitive], lists, etc) equalp - like equal but can compare between number types (e.g. int -> float), strings are case insensitive = - comparison between number types string-equal - comparison between strings (case insensitive) char-equal - comparison between chars (case insensitve)","title":"comparisons"},{"location":"software_dev/lisp/land-of-lisp-ch05/","text":"Land of Lisp - Ch 5 assocation lists (defparameter *my-list* '( (key1 (value1a valueb valuec)) (key2 (value2a valueb valuec)) (key3 (value3a valueb valuec)) (key4 (value4a valueb valuec)) (key5 (value5a valueb valuec)) (key3 (value3d valuee valuef)))) ; format is (assoc key list).. e.g. > (assoc key3 *my-list*) ; will return.. (key3 (value3a valueb valuec)) ; only returns the first matching key quasi-quoting Can mark code in data if you use a back-tick and a comma . > (defparameter *foo* \"foo\") > `(data data ,*foo* data ,*foo* data) ; back-tick and commas (DATA DATA \"foo\" DATA \"foo\" DATA) append > (append '(1 2 3) '(4 5 6)) (1 2 3 4 5 6) > (append '((1 2) (3 4)) '(5 6)) ((1 2) (3 4) 5 6) Higher Order Functions mapcar (mapcar #'function list) applies function to each item of list and generates a new list apply takes items in a list and passes them as the parameters to function. > (apply #'append '( (1 2) (3 4) (5) (6) ) ) ; applies the append function to each list in the list to generate... (1 2 3 4 5 6) ; which is the same as calling... >(append '(1 2) '(3 4) '(5) '(6)) find (defun walk (direction) (let ((next (find direction (cdr (assoc *location* *edges*)) ; lists all edge *location* :key #'cadr ))) ; in (garden west door) cadr [i.e. west] is what we are searching on (if next (progn (setf *location* (car next)) (look)) '(you cannot go that way.)))) > (find 'y '((5 x) (3 y) (7 z)) :key #'cadr) (3 Y) > (find 'y '(5 . x) (3 . y) 7 . z) push adds an item to the front of a list (must be a named list?) > (defparameter *nums* '(2 3)) > (push '1 *nums*) (1 2 3) other list handling functions (remove-if #'predicate list) - remove all items for which predicate is true (remove-if-not #'predicate list)","title":"Land of Lisp - Ch 5"},{"location":"software_dev/lisp/land-of-lisp-ch05/#land-of-lisp-ch-5","text":"","title":"Land of Lisp - Ch 5"},{"location":"software_dev/lisp/land-of-lisp-ch05/#assocation-lists","text":"(defparameter *my-list* '( (key1 (value1a valueb valuec)) (key2 (value2a valueb valuec)) (key3 (value3a valueb valuec)) (key4 (value4a valueb valuec)) (key5 (value5a valueb valuec)) (key3 (value3d valuee valuef)))) ; format is (assoc key list).. e.g. > (assoc key3 *my-list*) ; will return.. (key3 (value3a valueb valuec)) ; only returns the first matching key","title":"assocation lists"},{"location":"software_dev/lisp/land-of-lisp-ch05/#quasi-quoting","text":"Can mark code in data if you use a back-tick and a comma . > (defparameter *foo* \"foo\") > `(data data ,*foo* data ,*foo* data) ; back-tick and commas (DATA DATA \"foo\" DATA \"foo\" DATA)","title":"quasi-quoting"},{"location":"software_dev/lisp/land-of-lisp-ch05/#append","text":"> (append '(1 2 3) '(4 5 6)) (1 2 3 4 5 6) > (append '((1 2) (3 4)) '(5 6)) ((1 2) (3 4) 5 6)","title":"append"},{"location":"software_dev/lisp/land-of-lisp-ch05/#higher-order-functions","text":"","title":"Higher Order Functions"},{"location":"software_dev/lisp/land-of-lisp-ch05/#mapcar","text":"(mapcar #'function list) applies function to each item of list and generates a new list","title":"mapcar"},{"location":"software_dev/lisp/land-of-lisp-ch05/#apply","text":"takes items in a list and passes them as the parameters to function. > (apply #'append '( (1 2) (3 4) (5) (6) ) ) ; applies the append function to each list in the list to generate... (1 2 3 4 5 6) ; which is the same as calling... >(append '(1 2) '(3 4) '(5) '(6))","title":"apply"},{"location":"software_dev/lisp/land-of-lisp-ch05/#find","text":"(defun walk (direction) (let ((next (find direction (cdr (assoc *location* *edges*)) ; lists all edge *location* :key #'cadr ))) ; in (garden west door) cadr [i.e. west] is what we are searching on (if next (progn (setf *location* (car next)) (look)) '(you cannot go that way.)))) > (find 'y '((5 x) (3 y) (7 z)) :key #'cadr) (3 Y) > (find 'y '(5 . x) (3 . y) 7 . z)","title":"find"},{"location":"software_dev/lisp/land-of-lisp-ch05/#push","text":"adds an item to the front of a list (must be a named list?) > (defparameter *nums* '(2 3)) > (push '1 *nums*) (1 2 3)","title":"push"},{"location":"software_dev/lisp/land-of-lisp-ch05/#other-list-handling-functions","text":"(remove-if #'predicate list) - remove all items for which predicate is true (remove-if-not #'predicate list)","title":"other list handling functions"},{"location":"software_dev/lisp/land-of-lisp-ch06.5/","text":"Land of Lisp Learning Chapter 6.5 - lambda functions Declaring a lambda that will halve a given number (lambda (n) (/ n 2)) Using the above lambda to halve all the numbers in a list (mapcar (lambda (n) (/ n 2)) '(2 4 6))","title":"Land of Lisp Learning"},{"location":"software_dev/lisp/land-of-lisp-ch06.5/#land-of-lisp-learning","text":"","title":"Land of Lisp Learning"},{"location":"software_dev/lisp/land-of-lisp-ch06.5/#chapter-65-lambda-functions","text":"Declaring a lambda that will halve a given number (lambda (n) (/ n 2)) Using the above lambda to halve all the numbers in a list (mapcar (lambda (n) (/ n 2)) '(2 4 6))","title":"Chapter 6.5 - lambda functions"},{"location":"software_dev/lisp/land-of-lisp-keywords/","text":"Land of Lisp Lisp Keywords Setting Values defparameter - defines a mutable global value (can be changed by further calls to defparameter ) defvar - defines an immutable global value (cannot be changed by further calls to defvar but can be changed by setf ) setf - sets a value, e.g. (setf *my_number* 5) List Keywords cons - creates a list from two items (one of which can be nil) car - returns the head of a list cdr - returns the tail of a list list - creates a list, e.g. (list 1 2 3) creates the list (1 2 3) member - returns the tail of a list when an item is found e.g. (member 1 '(3 4 1 5)) will return (1 5) assoc find remove-if remove-if-not Lists - Higher Order Functions apply mapcar - maps function to each item in list > (mapcar #'print '(a b c)) A B C maplist - maps function to a list of each item in list > (maplist #'print '(a b c)) (A B C) (B C) (C) Maths Keywords expt - exponential, e.g. (expt 2 3) returns 8 ash - arithmetic shift e.g (ash 8 1) returns 16, (ash 8 -1) returns 4 Conditional Keywords if when unless cond case and or Other Keywords oddp - return t if odd number, nil if even, errors if not integer progn - run a sequence of expressions, returning the last evaluated expression y-or-n-p - prompts for a 'y or n' answer `(y-or-n-p \"It is Thursday? \"), return T for 'y' and Nil for 'n' complement - equivalent to \"not\" alphanumericp - returns true for alpha numeric chars, false otherwise digit-char-p - returns true if number characte substitute-if [cond] [new item] [list] - generic function can handle multiple datatypes Reading Keyboard Input read - usage: (my_val (read)) - will read numbers, etc. Useful to read structures from files (which have been written by a print statement) read-line - usage: (my_val (read-line)) - will only read strings and chars Printing [ ] TODO: confirm how the print statements differ print prin1 princ princ-to-string prin1-to-string - conversts any basic lisp type to a string 'write-to-string' - writes an expression to a string :pretty [t/nil] -> adds new lines or tabs into string Special Chars #\\newline #\\space #\\tab #\\backspace #\\linefeed #\\page #\\return #\\rubout #\\? #\\! #\\. File Handling (with-open-file (my-stream \"testfilename.txt\" :direction :output :if-exists :supersede ) (princ \"Hello File!\" my-strean) )","title":"Land of Lisp"},{"location":"software_dev/lisp/land-of-lisp-keywords/#land-of-lisp","text":"","title":"Land of Lisp"},{"location":"software_dev/lisp/land-of-lisp-keywords/#lisp-keywords","text":"","title":"Lisp Keywords"},{"location":"software_dev/lisp/land-of-lisp-keywords/#setting-values","text":"defparameter - defines a mutable global value (can be changed by further calls to defparameter ) defvar - defines an immutable global value (cannot be changed by further calls to defvar but can be changed by setf ) setf - sets a value, e.g. (setf *my_number* 5)","title":"Setting Values"},{"location":"software_dev/lisp/land-of-lisp-keywords/#list-keywords","text":"cons - creates a list from two items (one of which can be nil) car - returns the head of a list cdr - returns the tail of a list list - creates a list, e.g. (list 1 2 3) creates the list (1 2 3) member - returns the tail of a list when an item is found e.g. (member 1 '(3 4 1 5)) will return (1 5) assoc find remove-if remove-if-not","title":"List Keywords"},{"location":"software_dev/lisp/land-of-lisp-keywords/#lists-higher-order-functions","text":"apply mapcar - maps function to each item in list > (mapcar #'print '(a b c)) A B C maplist - maps function to a list of each item in list > (maplist #'print '(a b c)) (A B C) (B C) (C)","title":"Lists - Higher Order Functions"},{"location":"software_dev/lisp/land-of-lisp-keywords/#maths-keywords","text":"expt - exponential, e.g. (expt 2 3) returns 8 ash - arithmetic shift e.g (ash 8 1) returns 16, (ash 8 -1) returns 4","title":"Maths Keywords"},{"location":"software_dev/lisp/land-of-lisp-keywords/#conditional-keywords","text":"if when unless cond case and or","title":"Conditional Keywords"},{"location":"software_dev/lisp/land-of-lisp-keywords/#other-keywords","text":"oddp - return t if odd number, nil if even, errors if not integer progn - run a sequence of expressions, returning the last evaluated expression y-or-n-p - prompts for a 'y or n' answer `(y-or-n-p \"It is Thursday? \"), return T for 'y' and Nil for 'n' complement - equivalent to \"not\" alphanumericp - returns true for alpha numeric chars, false otherwise digit-char-p - returns true if number characte substitute-if [cond] [new item] [list] - generic function can handle multiple datatypes","title":"Other Keywords"},{"location":"software_dev/lisp/land-of-lisp-keywords/#reading-keyboard-input","text":"read - usage: (my_val (read)) - will read numbers, etc. Useful to read structures from files (which have been written by a print statement) read-line - usage: (my_val (read-line)) - will only read strings and chars","title":"Reading Keyboard Input"},{"location":"software_dev/lisp/land-of-lisp-keywords/#printing","text":"[ ] TODO: confirm how the print statements differ print prin1 princ princ-to-string prin1-to-string - conversts any basic lisp type to a string 'write-to-string' - writes an expression to a string :pretty [t/nil] -> adds new lines or tabs into string","title":"Printing"},{"location":"software_dev/lisp/land-of-lisp-keywords/#special-chars","text":"#\\newline #\\space #\\tab #\\backspace #\\linefeed #\\page #\\return #\\rubout #\\? #\\! #\\.","title":"Special Chars"},{"location":"software_dev/lisp/land-of-lisp-keywords/#file-handling","text":"(with-open-file (my-stream \"testfilename.txt\" :direction :output :if-exists :supersede ) (princ \"Hello File!\" my-strean) )","title":"File Handling"},{"location":"software_dev/maven/01-java-recap/","text":"Maven - Recap on Java Compilation and Execution (2019-12-02) Creating a jar file... jar cf myjar.jar HelloWorld.class cf - create file Running jar file... java -cp myjar.jar HelloWorld NB. need to add the jar to the classpath with '-cp myjar.jar' Working with 3rd party library Compiling with 3rd party lib javac -cp ./lib/* HelloWorld.java Assuming the 3rd party library is in the lib folder. Running with a 3rd party lib java -cp ./lib/*;./ HelloWorld Note the separator in the classpath is either ; (on windows) or : (on Mac/Linux) File Structure src | +-- main | +-- java | +--> source files go here!","title":"Maven - Recap on Java Compilation and Execution"},{"location":"software_dev/maven/01-java-recap/#maven-recap-on-java-compilation-and-execution","text":"(2019-12-02)","title":"Maven - Recap on Java Compilation and Execution"},{"location":"software_dev/maven/01-java-recap/#creating-a-jar-file","text":"jar cf myjar.jar HelloWorld.class cf - create file","title":"Creating a jar file..."},{"location":"software_dev/maven/01-java-recap/#running-jar-file","text":"java -cp myjar.jar HelloWorld NB. need to add the jar to the classpath with '-cp myjar.jar'","title":"Running jar file..."},{"location":"software_dev/maven/01-java-recap/#working-with-3rd-party-library","text":"Compiling with 3rd party lib javac -cp ./lib/* HelloWorld.java Assuming the 3rd party library is in the lib folder. Running with a 3rd party lib java -cp ./lib/*;./ HelloWorld Note the separator in the classpath is either ; (on windows) or : (on Mac/Linux)","title":"Working with 3rd party library"},{"location":"software_dev/maven/01-java-recap/#file-structure","text":"src | +-- main | +-- java | +--> source files go here!","title":"File Structure"},{"location":"software_dev/maven/02-maven-basics/","text":"Starting with Maven Maven Coordinates Identifies a location in a Maven Repository. groupId - usually an organisation's domain in reverse (could also just be 'junit' ) artifactId - project name version e.g. <groupId>com.gwenci</groupId> <artifactId>web_scraper</artifactId> <version>1.0-SNAPSHOT</version> groupId and version can be inherited from a parent POM Version The version number is made up of a number of components. e.g. 3.2.1-987-beta major version e.g. 3 minor version e.g. 2 incremental version e.g. 1 (from patching) build number e.g. 987 (from CI build) String Qualifier e.g. beta The most common in use is: major.minor.incremental Snapshot Versions If the string qualifier is \"SNAPSHOT\" this tells Maven that this is a development version, and therefore not stable. Maven will go and check for newer versions of this project instead. Maven Repositories There are 3 main types. local - hosted on your own machine, usually somewhere like: ~/.m2/... central - the public repo hosted at https://repo1.maven.org/maven2 remote - other locations (private or public) Maven caches artifacts locally and will not go looking for them again (unless it's a SNAPSHOT) Useful web site: https://mvnrepository.com - shows available Maven central artifacts. The POM file Stands for Project Object Model describes the project must comply with maven-4.0.0.xsd (xsd - xml schema document) can inherit properties from parent POM Effective POM - this is the POM complete with inherited properties, can be displayed with: mvn help:effective-pom Can also be found in Intellij IDEA, here: Maven Dependencies A dependency is an artifact that your project relies on. Typically a JAR or a POM . Transitive Dependency If your project needs artifact A and artifact A needs artifact B , transitively your project need artifact B . These transitive dependencies can be many layers deep, but they cannot be cyclic. Dependency Managament Allows project authors to specify the version of the artifact they need. Dependency Mediation Determines the version of an artifact to use when multiple versions are encountered. e.g. project --> A --> D (v2.0) | +---> B --> D (v1.5) In this case D (v2.0) would be used as it is the nearest definition in the dependency tree. This can lead to confusing situations, but most of the time it works. Usually gets the latest version but not all the time. Dependency Exclusion Can exlude certain dependencies. Optional Dependencies Can mark dependencies as optional, so they aren't used downstream. Dependency Scope Compile - available on all classpaths, propogates to downstream projects. (this dependency is include when your project is included as another project's dependency) Provided - like Compile but expected to be provided by JDK/container at runtime. Runtime - not required for compilation, but needed at runtime (eg. data access for a database) Test - on available on test classpath. Not transitive (e.g. junit or mockito not required for projects that are dependent on your project) System - similiar to provided Import - import the dependencies of a POM Depdency Plug In Useful goals mvn dependency:tree - show dependecy tree, useful for resolving conflicts mvn dependency:go-offline - resolve all and prepare to go offline mvn dependency:purge-local-repository - handy troubleshooting step mvn dependency:sources - get sources for all dependencies Standard Directory Layout Apache Maven's Guide to Standard Directory Layout main - contains source code organised by language (e.g. java and kotlin ) resources - contains files such as text files, xml files, properties files, images and so on","title":"Starting with Maven"},{"location":"software_dev/maven/02-maven-basics/#starting-with-maven","text":"","title":"Starting with Maven"},{"location":"software_dev/maven/02-maven-basics/#maven-coordinates","text":"Identifies a location in a Maven Repository. groupId - usually an organisation's domain in reverse (could also just be 'junit' ) artifactId - project name version e.g. <groupId>com.gwenci</groupId> <artifactId>web_scraper</artifactId> <version>1.0-SNAPSHOT</version> groupId and version can be inherited from a parent POM","title":"Maven Coordinates"},{"location":"software_dev/maven/02-maven-basics/#version","text":"The version number is made up of a number of components. e.g. 3.2.1-987-beta major version e.g. 3 minor version e.g. 2 incremental version e.g. 1 (from patching) build number e.g. 987 (from CI build) String Qualifier e.g. beta The most common in use is: major.minor.incremental","title":"Version"},{"location":"software_dev/maven/02-maven-basics/#snapshot-versions","text":"If the string qualifier is \"SNAPSHOT\" this tells Maven that this is a development version, and therefore not stable. Maven will go and check for newer versions of this project instead.","title":"Snapshot Versions"},{"location":"software_dev/maven/02-maven-basics/#maven-repositories","text":"There are 3 main types. local - hosted on your own machine, usually somewhere like: ~/.m2/... central - the public repo hosted at https://repo1.maven.org/maven2 remote - other locations (private or public) Maven caches artifacts locally and will not go looking for them again (unless it's a SNAPSHOT) Useful web site: https://mvnrepository.com - shows available Maven central artifacts.","title":"Maven Repositories"},{"location":"software_dev/maven/02-maven-basics/#the-pom-file","text":"Stands for Project Object Model describes the project must comply with maven-4.0.0.xsd (xsd - xml schema document) can inherit properties from parent POM Effective POM - this is the POM complete with inherited properties, can be displayed with: mvn help:effective-pom Can also be found in Intellij IDEA, here:","title":"The POM file"},{"location":"software_dev/maven/02-maven-basics/#maven-dependencies","text":"A dependency is an artifact that your project relies on. Typically a JAR or a POM .","title":"Maven Dependencies"},{"location":"software_dev/maven/02-maven-basics/#transitive-dependency","text":"If your project needs artifact A and artifact A needs artifact B , transitively your project need artifact B . These transitive dependencies can be many layers deep, but they cannot be cyclic.","title":"Transitive Dependency"},{"location":"software_dev/maven/02-maven-basics/#dependency-managament","text":"Allows project authors to specify the version of the artifact they need.","title":"Dependency Managament"},{"location":"software_dev/maven/02-maven-basics/#dependency-mediation","text":"Determines the version of an artifact to use when multiple versions are encountered. e.g. project --> A --> D (v2.0) | +---> B --> D (v1.5) In this case D (v2.0) would be used as it is the nearest definition in the dependency tree. This can lead to confusing situations, but most of the time it works. Usually gets the latest version but not all the time.","title":"Dependency Mediation"},{"location":"software_dev/maven/02-maven-basics/#dependency-exclusion","text":"Can exlude certain dependencies.","title":"Dependency Exclusion"},{"location":"software_dev/maven/02-maven-basics/#optional-dependencies","text":"Can mark dependencies as optional, so they aren't used downstream.","title":"Optional Dependencies"},{"location":"software_dev/maven/02-maven-basics/#dependency-scope","text":"Compile - available on all classpaths, propogates to downstream projects. (this dependency is include when your project is included as another project's dependency) Provided - like Compile but expected to be provided by JDK/container at runtime. Runtime - not required for compilation, but needed at runtime (eg. data access for a database) Test - on available on test classpath. Not transitive (e.g. junit or mockito not required for projects that are dependent on your project) System - similiar to provided Import - import the dependencies of a POM","title":"Dependency Scope"},{"location":"software_dev/maven/02-maven-basics/#depdency-plug-in","text":"","title":"Depdency Plug In"},{"location":"software_dev/maven/02-maven-basics/#useful-goals","text":"mvn dependency:tree - show dependecy tree, useful for resolving conflicts mvn dependency:go-offline - resolve all and prepare to go offline mvn dependency:purge-local-repository - handy troubleshooting step mvn dependency:sources - get sources for all dependencies","title":"Useful goals"},{"location":"software_dev/maven/02-maven-basics/#standard-directory-layout","text":"Apache Maven's Guide to Standard Directory Layout main - contains source code organised by language (e.g. java and kotlin ) resources - contains files such as text files, xml files, properties files, images and so on","title":"Standard Directory Layout"},{"location":"software_dev/maven/06-maven-plugins/","text":"Maven Plugins https://maven.apache.org/plugins/index.html Maven is effectively a framework that runs plugins. It just knows which plugins to run and when. Lifecycle Plugins maven-clean-plugin one goal - clean remove files generated during build process by default removes /target directory from project root and submodule root folders Can add the clean cycle to another lifecycle by adding the following within the project tag e.g. This runs the clean:clean plugin goal as part of the initialize phase. <project> ... <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-clean-plugin</artifactId> <version>3.1.0</version> <!-- can omit the version number - it will be inherited, but will generate a warning that it's missing --> <executions> <execution> <id>auto-clean</id> <phase>initialize</phase> <goals> <goal>clean</goal> </goals> </execution> </plugin> </plugins> </build> ... </project> Common practice: By hooking the clean plugin into specific phases (like initialize), it can save you from having to type in clean on the command line, e.g. Instead of mvn clean package , you can now use mvn package Instead of mvn clean install , you can now use mvn install Effectively this is adding the clean plugin goal into the default lifecycle. maven-compiler-plugin in Default Lifecycle two goals - compiler:compile, compiler:testCompile (and a compiler:help goal) by default, uses the compiler 'javax.tools.JavaCompiler' - can be configured to use javac default source and target language levels are Java 1.6, apache encourages these values to be set Can change the compiler version in the POM.xml file. <properties> ... <java.version>11</java.version> <!-- The following two lines might also be required --> <maven.compiler.source>${java.version}</maven.compiler.source> <maven.compiler.target>${java.version}</maven.compiler.target> ... </properties> This will compile to java version 11 - changing this (e.g. to 1.6) will compile the code to a different version. Resources Plugin https://maven.apache.org/plugins/maven-resources-plugin/ in Default Lifecycle 3 goals - resources:resources, resources:testResources, resources:copy-resources purpose is to copy project resources to output directory (target dir) Resources normally live in src -> main -> resources and src -> test -> resources resources:resources copies files in resources into target/classes ready to be packaged into a jar. Can add an external resource directory by adding the following to POM.xml <project> ... <build> <resources> <resource> <directory>[your files here]</directory> </resource> </resources> </build> ... </project> This overrides the default resources directory, but you can add multiple resources <resources> <resource> <directory>resource1</directory> </resource> <resource> <directory>resource2</directory> </resource> <resource> <directory>resource3</directory> </resource> </resources> Other things this plugin can be configured for is: specifying a character encoding scheme filtering including and excluding files/folders Surefire Plugin in Default Lifecycle one goal: surefire:test (also surefire:help) by default supports: JUnit3, JUnit4, JUnit5 and TestNG by default includes classes named: Test , Test, Tests, TestCase (can change these) also handles POJO tests Runs tests out of your test directory. Reports are available in target/surefire-reports . JAR Plugin in Default Lifecycle two goals: jar:jar, jar:test-jar purpose - build jars from compiled artifacts and project resources can be configured for custom manifests and to make executable jars Adding a ClassPath entry to the Manifest <project> ... <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-jar-plugin</artifactId> ... <configuration> <archive> <manifest> <addClasspath>true</addClasspath> </manifest> </archive> </configuration> ... </plugin> </plugins> </build> ... <dependencies> <dependency> <groupId>commons-lang</groupId> <artifactId>commons-lang</artifactId> <version>2.1</version> </dependency> <dependency> <groupId>org.codehaus.plexus</groupId> <artifactId>plexus-utils</artifactId> <version>1.1</version> </dependency> </dependencies> ... </project> This creates the following manifest Manifest-Version: 1.0 Created-By: Apache Maven ${maven.version} Build-Jdk: ${java.version} Class-Path: plexus-utils-1.1.jar commons-lang-2.1.jar Creating an Executable JAR <project> ... <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-jar-plugin</artifactId> ... <configuration> <archive> <manifest> <addClasspath>true</addClasspath> <mainClass>fully.qualified.MainClass</mainClass> </manifest> </archive> </configuration> ... </plugin> </plugins> </build> ... </project> Manifest-Version: 1.0 Created-By: Apache Maven ${maven.version} Build-Jdk: ${java.version} Main-Class: fully.qualified.MainClass Class-Path: plexus-utils-1.1.jar commons-lang-2.1.jar Deploy Plugin in Default Lifecycle two goals: deploy:deploy (deploys artifacts), deploy:deploy-file (deploys specific files) purpose: to deploy project artifacts to remote Maven repositories typical done in CI environments (not normally done from a developer workstation) configuration is typically part of Maven POM - attributes for deployment are built into the POM Maven Site Plugin in SITE Lifecycle 7 goals site:site - generate site for project site:deploy - deploy site via Wagon site:run - run site locally using Jetty as web server site:stage - generate site to a local staging location (e.g. for testing) site:stage-deploy - deploy site to a remote staging location site:attach-descriptor - adds site.xml (site map file used by search engines) to files for deployment site:jar - bundles site into a jar for deployment to a repository site:effective-site - generates the site.xml file Can use a variety of formats (including XML and Markdown) Maven and Source Control You do not need to check in the following as part of a maven project.. the target directory *.iml file the .idea folder Other Plugins Reference can be found at: maven.apache.org/ref/3.6.0/plugin-management.html","title":"Maven Plugins"},{"location":"software_dev/maven/06-maven-plugins/#maven-plugins","text":"https://maven.apache.org/plugins/index.html Maven is effectively a framework that runs plugins. It just knows which plugins to run and when.","title":"Maven Plugins"},{"location":"software_dev/maven/06-maven-plugins/#lifecycle-plugins","text":"","title":"Lifecycle Plugins"},{"location":"software_dev/maven/06-maven-plugins/#maven-clean-plugin","text":"one goal - clean remove files generated during build process by default removes /target directory from project root and submodule root folders Can add the clean cycle to another lifecycle by adding the following within the project tag e.g. This runs the clean:clean plugin goal as part of the initialize phase. <project> ... <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-clean-plugin</artifactId> <version>3.1.0</version> <!-- can omit the version number - it will be inherited, but will generate a warning that it's missing --> <executions> <execution> <id>auto-clean</id> <phase>initialize</phase> <goals> <goal>clean</goal> </goals> </execution> </plugin> </plugins> </build> ... </project> Common practice: By hooking the clean plugin into specific phases (like initialize), it can save you from having to type in clean on the command line, e.g. Instead of mvn clean package , you can now use mvn package Instead of mvn clean install , you can now use mvn install Effectively this is adding the clean plugin goal into the default lifecycle.","title":"maven-clean-plugin"},{"location":"software_dev/maven/06-maven-plugins/#maven-compiler-plugin","text":"in Default Lifecycle two goals - compiler:compile, compiler:testCompile (and a compiler:help goal) by default, uses the compiler 'javax.tools.JavaCompiler' - can be configured to use javac default source and target language levels are Java 1.6, apache encourages these values to be set Can change the compiler version in the POM.xml file. <properties> ... <java.version>11</java.version> <!-- The following two lines might also be required --> <maven.compiler.source>${java.version}</maven.compiler.source> <maven.compiler.target>${java.version}</maven.compiler.target> ... </properties> This will compile to java version 11 - changing this (e.g. to 1.6) will compile the code to a different version.","title":"maven-compiler-plugin"},{"location":"software_dev/maven/06-maven-plugins/#resources-plugin","text":"https://maven.apache.org/plugins/maven-resources-plugin/ in Default Lifecycle 3 goals - resources:resources, resources:testResources, resources:copy-resources purpose is to copy project resources to output directory (target dir) Resources normally live in src -> main -> resources and src -> test -> resources resources:resources copies files in resources into target/classes ready to be packaged into a jar. Can add an external resource directory by adding the following to POM.xml <project> ... <build> <resources> <resource> <directory>[your files here]</directory> </resource> </resources> </build> ... </project> This overrides the default resources directory, but you can add multiple resources <resources> <resource> <directory>resource1</directory> </resource> <resource> <directory>resource2</directory> </resource> <resource> <directory>resource3</directory> </resource> </resources> Other things this plugin can be configured for is: specifying a character encoding scheme filtering including and excluding files/folders","title":"Resources Plugin"},{"location":"software_dev/maven/06-maven-plugins/#surefire-plugin","text":"in Default Lifecycle one goal: surefire:test (also surefire:help) by default supports: JUnit3, JUnit4, JUnit5 and TestNG by default includes classes named: Test , Test, Tests, TestCase (can change these) also handles POJO tests Runs tests out of your test directory. Reports are available in target/surefire-reports .","title":"Surefire Plugin"},{"location":"software_dev/maven/06-maven-plugins/#jar-plugin","text":"in Default Lifecycle two goals: jar:jar, jar:test-jar purpose - build jars from compiled artifacts and project resources can be configured for custom manifests and to make executable jars","title":"JAR Plugin"},{"location":"software_dev/maven/06-maven-plugins/#adding-a-classpath-entry-to-the-manifest","text":"<project> ... <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-jar-plugin</artifactId> ... <configuration> <archive> <manifest> <addClasspath>true</addClasspath> </manifest> </archive> </configuration> ... </plugin> </plugins> </build> ... <dependencies> <dependency> <groupId>commons-lang</groupId> <artifactId>commons-lang</artifactId> <version>2.1</version> </dependency> <dependency> <groupId>org.codehaus.plexus</groupId> <artifactId>plexus-utils</artifactId> <version>1.1</version> </dependency> </dependencies> ... </project> This creates the following manifest Manifest-Version: 1.0 Created-By: Apache Maven ${maven.version} Build-Jdk: ${java.version} Class-Path: plexus-utils-1.1.jar commons-lang-2.1.jar","title":"Adding a ClassPath entry to the Manifest"},{"location":"software_dev/maven/06-maven-plugins/#creating-an-executable-jar","text":"<project> ... <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-jar-plugin</artifactId> ... <configuration> <archive> <manifest> <addClasspath>true</addClasspath> <mainClass>fully.qualified.MainClass</mainClass> </manifest> </archive> </configuration> ... </plugin> </plugins> </build> ... </project> Manifest-Version: 1.0 Created-By: Apache Maven ${maven.version} Build-Jdk: ${java.version} Main-Class: fully.qualified.MainClass Class-Path: plexus-utils-1.1.jar commons-lang-2.1.jar","title":"Creating an Executable JAR"},{"location":"software_dev/maven/06-maven-plugins/#deploy-plugin","text":"in Default Lifecycle two goals: deploy:deploy (deploys artifacts), deploy:deploy-file (deploys specific files) purpose: to deploy project artifacts to remote Maven repositories typical done in CI environments (not normally done from a developer workstation) configuration is typically part of Maven POM - attributes for deployment are built into the POM","title":"Deploy Plugin"},{"location":"software_dev/maven/06-maven-plugins/#maven-site-plugin","text":"in SITE Lifecycle 7 goals site:site - generate site for project site:deploy - deploy site via Wagon site:run - run site locally using Jetty as web server site:stage - generate site to a local staging location (e.g. for testing) site:stage-deploy - deploy site to a remote staging location site:attach-descriptor - adds site.xml (site map file used by search engines) to files for deployment site:jar - bundles site into a jar for deployment to a repository site:effective-site - generates the site.xml file Can use a variety of formats (including XML and Markdown)","title":"Maven Site Plugin"},{"location":"software_dev/maven/06-maven-plugins/#maven-and-source-control","text":"You do not need to check in the following as part of a maven project.. the target directory *.iml file the .idea folder","title":"Maven and Source Control"},{"location":"software_dev/maven/06-maven-plugins/#other-plugins","text":"Reference can be found at: maven.apache.org/ref/3.6.0/plugin-management.html","title":"Other Plugins"},{"location":"software_dev/maven/maven-build-lifecycles/","text":"Maven Build Lifecycles Summary 3 standard lifecycles in Maven (clean, default, site) each lifecycle made up of phases each phase may have 1 or more plugin goals Lifecycles and phases provide a framework to call plugin goals in a sequence. 3 Predefined Life Cycles Clean removes build artefacts defined with plugin bindings Default does the build and deployment of the project defined without plugin bindings bindings defined for each package Site creates web site for project defined with plugins least used in enterprise Maven\u2019s websites are an example Clean Lifecycle phase: pre-clean phase: clean - plugin binding -> clean:clean goal phase: post-clean Default Lifecycle High level phase -> phases Validate -> initialise, generate sources, process sources, generate resources, process resources Compile -> process classes, generate test sources, process test sources, generate test resources, process test resources Test -> test compile, process test class Package -> prepare package Verify -> pre integration test, integration test, post integration test Install Deploy Default Lifecycle JAR packaging phase -> plugin process-resources -> maven-resources-plugin:resources compile -> maven-compiler-plugin:compile process-test-resources -> maven-resources-plugin:testResources test-compile -> maven-compiler-plugin:testCompile test -> maven-surefire-plugin:test package -> maven-jar-plugin:jar install -> maven-install-plugin:install deploy -> maven-deploy-plugin:deploy Site Build Lifecycle phase:pre-site - no plugin phase:site - maven-site-plugin:site phase:post-site - no plugin phase:site-deploy - maven-site-plugin:deploy","title":"Maven Build Lifecycles"},{"location":"software_dev/maven/maven-build-lifecycles/#maven-build-lifecycles","text":"","title":"Maven Build Lifecycles"},{"location":"software_dev/maven/maven-build-lifecycles/#summary","text":"3 standard lifecycles in Maven (clean, default, site) each lifecycle made up of phases each phase may have 1 or more plugin goals Lifecycles and phases provide a framework to call plugin goals in a sequence.","title":"Summary"},{"location":"software_dev/maven/maven-build-lifecycles/#3-predefined-life-cycles","text":"","title":"3 Predefined Life Cycles"},{"location":"software_dev/maven/maven-build-lifecycles/#clean","text":"removes build artefacts defined with plugin bindings","title":"Clean"},{"location":"software_dev/maven/maven-build-lifecycles/#default","text":"does the build and deployment of the project defined without plugin bindings bindings defined for each package","title":"Default"},{"location":"software_dev/maven/maven-build-lifecycles/#site","text":"creates web site for project defined with plugins least used in enterprise Maven\u2019s websites are an example","title":"Site"},{"location":"software_dev/maven/maven-build-lifecycles/#clean-lifecycle","text":"phase: pre-clean phase: clean - plugin binding -> clean:clean goal phase: post-clean","title":"Clean Lifecycle"},{"location":"software_dev/maven/maven-build-lifecycles/#default-lifecycle","text":"High level phase -> phases Validate -> initialise, generate sources, process sources, generate resources, process resources Compile -> process classes, generate test sources, process test sources, generate test resources, process test resources Test -> test compile, process test class Package -> prepare package Verify -> pre integration test, integration test, post integration test Install Deploy","title":"Default Lifecycle"},{"location":"software_dev/maven/maven-build-lifecycles/#default-lifecycle-jar-packaging","text":"phase -> plugin process-resources -> maven-resources-plugin:resources compile -> maven-compiler-plugin:compile process-test-resources -> maven-resources-plugin:testResources test-compile -> maven-compiler-plugin:testCompile test -> maven-surefire-plugin:test package -> maven-jar-plugin:jar install -> maven-install-plugin:install deploy -> maven-deploy-plugin:deploy","title":"Default Lifecycle JAR packaging"},{"location":"software_dev/maven/maven-build-lifecycles/#site-build-lifecycle","text":"phase:pre-site - no plugin phase:site - maven-site-plugin:site phase:post-site - no plugin phase:site-deploy - maven-site-plugin:deploy","title":"Site Build Lifecycle"},{"location":"software_dev/maven/misc_notes/","text":"Misc Notes Using platform encoding ... build is platform dependent This or a similar warning is emitted by a plugin that processes plain text files but has not been configured to use a specific file encoding. So eliminating the warning is simply a matter of finding out which plugin emits it and how to configure the file encoding for it. Add the following property to your pom.xml (or one of it's parent pom's) <properties> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties>","title":"Misc Notes"},{"location":"software_dev/maven/misc_notes/#misc-notes","text":"","title":"Misc Notes"},{"location":"software_dev/maven/misc_notes/#using-platform-encoding-build-is-platform-dependent","text":"This or a similar warning is emitted by a plugin that processes plain text files but has not been configured to use a specific file encoding. So eliminating the warning is simply a matter of finding out which plugin emits it and how to configure the file encoding for it. Add the following property to your pom.xml (or one of it's parent pom's) <properties> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties>","title":"Using platform encoding ... build is platform dependent"},{"location":"software_dev/python/python/","text":"Python Learning Raise to the power -> **, e.g. 2**8 = 256 Built In Functions dir(__builtins__) # shows all the builtin functions (and other stuff, eg., errors) dir(list) # shows all the methods that apply to lists Common builtin functions type(object) -> the object's type str(object) -> returns a nice string representation of the object len int input chr abs bool Looping for x in range(0:3): for x in range(0,8,2): Lists index, +ve index from start, -ve index from end (-1 = last item only) slicing [start:stop:step] (excludes upper bound - e.g. stop isn't included) valid options:- [:] , [4:] , [:5] , [-3:] , [:-5] .remove(value) - removes the first instance of value in the list .pop(index) - removes the item at index location [x for x in ...] - list generator Can chain slices together e.g. \"Hello!\"[-3][1] -> returns 'o' [-3] returns \"lo!\" and then \"lo!\"[1] returns \"o\" Tuples Defined with round brackets. Basically an immutable list (cannot add, update or remove items in a tuple) Dictionary Matched key:value pairs {'a':1, 'b':2, 'c':3} dict.keys() -> lists all the keys dict.values() -> lists all the values dict[key] -> returns the value associated with that key, throws an error if key doesn't exist dict.remove[key] -> removes the k:v pair (also \"del dict[k]\" does the same thing) dict[key] = value -> adds the k:v pair or updates the k:v pair if it already exists in the dict Zipping keys = ['a', 'b', 'c'] vals = [1,2,3] mydict = dict(zip(keys,vals)) mydict now equals -> {'a':1, 'b':2, 'c':3} Exceptions >>> import traceback, sys >>> def grail(x): ... raise TypeError('already got one') ... >>> try: ... grail('arthur') ... except: ... exc_info = sys.exc_info() ... print(exc_info[0]) ... print(exc_info[1]) ... traceback.print_tb(exc_info[2]) ... <class 'TypeError'> already got one File \"<stdin>\", line 2, in <module> File \"<stdin>\", line 2, in grail os module os.getpid() os.getcwd() os.chdir('/Users/Me') Portability constants os.pathsep, os.sep, os.pardir, os.curdir, os.linesep Basic file & path functions os.path.isdir('path name') os.path.isfile('path name') os.path.exists os.path.getsize('path name') os.path.split('path name') # separates filename from its path os.path.dirname os.path.basename os.path.split.ext os.path.join - puts dirname and basename back together in the proper format os.path.normpath('path name') - returns the normal path (in case separators get mixed up, e.g. \\ and /) os.path.abspath() - returns the absolute path e.g. os.path.abspath('.') - returns the same as os.path.cwd os.path.abspath('') - considered same as '.' os.path.abspath('..') - returns absolute path to parent folder Shell Commands os.system('shell command here') e.g. os.system('ls -la') Will wait for the command to return. To run the command in it's own process use:- (windows) os.system('run shell command') (linux/mac) os.system(\"shell command &') os.popen('shell command') takes the output of the shell command and runs it through a pipe or io stream e.g. print(os.popen('ls -la').read()) text = os.popen('ls -la').read() // takes the output from 'ls -la' and passes it to text Shell Commands - Subprocess module import subprocess subprocess.call('python helloworld.py) # like os.system, but returns the return code as well pipe = subprocess.Popen('python helloshell.py', stdout=subprocess.PIPE) pipe.communicate() (b'The Meaning of Life\\r\\n', None) pipe.returncode 0 Impractical Python Ch1. pylint pip install pylint pylint filename.py # linux python -m pylint filename.py #Windows pylint -rn # no reports pylint --max_line_length=79","title":"Python Learning"},{"location":"software_dev/python/python/#python-learning","text":"Raise to the power -> **, e.g. 2**8 = 256","title":"Python Learning"},{"location":"software_dev/python/python/#built-in-functions","text":"dir(__builtins__) # shows all the builtin functions (and other stuff, eg., errors) dir(list) # shows all the methods that apply to lists Common builtin functions type(object) -> the object's type str(object) -> returns a nice string representation of the object len int input chr abs bool","title":"Built In Functions"},{"location":"software_dev/python/python/#looping","text":"for x in range(0:3): for x in range(0,8,2):","title":"Looping"},{"location":"software_dev/python/python/#lists","text":"index, +ve index from start, -ve index from end (-1 = last item only) slicing [start:stop:step] (excludes upper bound - e.g. stop isn't included) valid options:- [:] , [4:] , [:5] , [-3:] , [:-5] .remove(value) - removes the first instance of value in the list .pop(index) - removes the item at index location [x for x in ...] - list generator Can chain slices together e.g. \"Hello!\"[-3][1] -> returns 'o' [-3] returns \"lo!\" and then \"lo!\"[1] returns \"o\"","title":"Lists"},{"location":"software_dev/python/python/#tuples","text":"Defined with round brackets. Basically an immutable list (cannot add, update or remove items in a tuple)","title":"Tuples"},{"location":"software_dev/python/python/#dictionary","text":"Matched key:value pairs {'a':1, 'b':2, 'c':3} dict.keys() -> lists all the keys dict.values() -> lists all the values dict[key] -> returns the value associated with that key, throws an error if key doesn't exist dict.remove[key] -> removes the k:v pair (also \"del dict[k]\" does the same thing) dict[key] = value -> adds the k:v pair or updates the k:v pair if it already exists in the dict Zipping keys = ['a', 'b', 'c'] vals = [1,2,3] mydict = dict(zip(keys,vals)) mydict now equals -> {'a':1, 'b':2, 'c':3}","title":"Dictionary"},{"location":"software_dev/python/python/#exceptions","text":">>> import traceback, sys >>> def grail(x): ... raise TypeError('already got one') ... >>> try: ... grail('arthur') ... except: ... exc_info = sys.exc_info() ... print(exc_info[0]) ... print(exc_info[1]) ... traceback.print_tb(exc_info[2]) ... <class 'TypeError'> already got one File \"<stdin>\", line 2, in <module> File \"<stdin>\", line 2, in grail","title":"Exceptions"},{"location":"software_dev/python/python/#os-module","text":"os.getpid() os.getcwd() os.chdir('/Users/Me')","title":"os module"},{"location":"software_dev/python/python/#portability-constants","text":"os.pathsep, os.sep, os.pardir, os.curdir, os.linesep","title":"Portability constants"},{"location":"software_dev/python/python/#basic-file-path-functions","text":"os.path.isdir('path name') os.path.isfile('path name') os.path.exists os.path.getsize('path name') os.path.split('path name') # separates filename from its path os.path.dirname os.path.basename os.path.split.ext os.path.join - puts dirname and basename back together in the proper format os.path.normpath('path name') - returns the normal path (in case separators get mixed up, e.g. \\ and /) os.path.abspath() - returns the absolute path e.g. os.path.abspath('.') - returns the same as os.path.cwd os.path.abspath('') - considered same as '.' os.path.abspath('..') - returns absolute path to parent folder","title":"Basic file &amp; path functions"},{"location":"software_dev/python/python/#shell-commands","text":"os.system('shell command here') e.g. os.system('ls -la') Will wait for the command to return. To run the command in it's own process use:- (windows) os.system('run shell command') (linux/mac) os.system(\"shell command &') os.popen('shell command') takes the output of the shell command and runs it through a pipe or io stream e.g. print(os.popen('ls -la').read()) text = os.popen('ls -la').read() // takes the output from 'ls -la' and passes it to text","title":"Shell Commands"},{"location":"software_dev/python/python/#shell-commands-subprocess-module","text":"import subprocess subprocess.call('python helloworld.py) # like os.system, but returns the return code as well pipe = subprocess.Popen('python helloshell.py', stdout=subprocess.PIPE) pipe.communicate() (b'The Meaning of Life\\r\\n', None) pipe.returncode 0","title":"Shell Commands - Subprocess module"},{"location":"software_dev/python/python/#impractical-python","text":"","title":"Impractical Python"},{"location":"software_dev/python/python/#ch1-pylint","text":"pip install pylint pylint filename.py # linux python -m pylint filename.py #Windows pylint -rn # no reports pylint --max_line_length=79","title":"Ch1. pylint"},{"location":"software_dev/tools/vi_notes/","text":"VIM MultiView The commands for multi views are:- action keystroke/seq new split window (horizontal split) [CTRL] + w , s new split window (vertical split) [CTRL] + w , v close current split window (1) [CTRL] + w , q move focus to window to the left [CTRL] + w , h move focus to window to the right [CTRL] + w , l move focus to window below [CTRL] + w , j move focus to window above [CTRL] + w , k (1) also closes the main window Commands command action :e \\ open file :Ex \\ browse directory to find file (if no directory given, will browse current dir) Inserting and Undoing key action o opens new line below cursor O opens new line above cursor u undo Copying and Pasting key action yy copies (yanks) the current line P paste before current line p paste after current line Deleting and Changing Text key action diw delete inner word di\" delete everything between surrounding quote marks - also works with [ { \" ' ( ciw change inner word ci( change contents of parantheses D delete to end of line dd delete line","title":"VIM"},{"location":"software_dev/tools/vi_notes/#vim","text":"","title":"VIM"},{"location":"software_dev/tools/vi_notes/#multiview","text":"The commands for multi views are:- action keystroke/seq new split window (horizontal split) [CTRL] + w , s new split window (vertical split) [CTRL] + w , v close current split window (1) [CTRL] + w , q move focus to window to the left [CTRL] + w , h move focus to window to the right [CTRL] + w , l move focus to window below [CTRL] + w , j move focus to window above [CTRL] + w , k (1) also closes the main window","title":"MultiView"},{"location":"software_dev/tools/vi_notes/#commands","text":"command action :e \\ open file :Ex \\ browse directory to find file (if no directory given, will browse current dir)","title":"Commands"},{"location":"software_dev/tools/vi_notes/#inserting-and-undoing","text":"key action o opens new line below cursor O opens new line above cursor u undo","title":"Inserting and Undoing"},{"location":"software_dev/tools/vi_notes/#copying-and-pasting","text":"key action yy copies (yanks) the current line P paste before current line p paste after current line","title":"Copying and Pasting"},{"location":"software_dev/tools/vi_notes/#deleting-and-changing-text","text":"key action diw delete inner word di\" delete everything between surrounding quote marks - also works with [ { \" ' ( ciw change inner word ci( change contents of parantheses D delete to end of line dd delete line","title":"Deleting and Changing Text"},{"location":"software_dev/tools/visual_studio_debugging/","text":"Debugging in Visual Studio Shortcuts ctrl + F10 -> run to cursor F10 -> skip over F11 -> step into shift + F11 -> step out Environment (while in debugger -> menu -> debug -> windows) autos locals call stack memory view (can drag pointers into memory view, can right click in memory view to change it's format) Breakpoints click on gear icon - can then choose conditional or hit count break points Edit & Continue Can edit code will debugging (works in simpler code, more complicated code -e.g. when using threading - will likely need debugging to be restarted)","title":"Debugging in Visual Studio"},{"location":"software_dev/tools/visual_studio_debugging/#debugging-in-visual-studio","text":"","title":"Debugging in Visual Studio"},{"location":"software_dev/tools/visual_studio_debugging/#shortcuts","text":"ctrl + F10 -> run to cursor F10 -> skip over F11 -> step into shift + F11 -> step out","title":"Shortcuts"},{"location":"software_dev/tools/visual_studio_debugging/#environment","text":"(while in debugger -> menu -> debug -> windows) autos locals call stack memory view (can drag pointers into memory view, can right click in memory view to change it's format)","title":"Environment"},{"location":"software_dev/tools/visual_studio_debugging/#breakpoints","text":"click on gear icon - can then choose conditional or hit count break points","title":"Breakpoints"},{"location":"software_dev/tools/visual_studio_debugging/#edit-continue","text":"Can edit code will debugging (works in simpler code, more complicated code -e.g. when using threading - will likely need debugging to be restarted)","title":"Edit &amp; Continue"},{"location":"software_dev/tools/vs_code_learning/","text":"VS Code Shortcuts - General Action Shortcut Command Palette [CTRL] + Shift + P Command Palette (file search only) [CTRL] + P Refactor (across files) F2 Open/Close Terminal [CTRL] + ' Select Item at Cursor [Ctrl] + D Shortcuts - Coding Action Shortcut Goto Definition F12 Peek Definition [Alt] + F12 Goto References [Shift] + F12 Find All References [Alt] + [Shift] + F12 Format Document [Alt] + [Shift] + F Organise Imports [Alt] + [Shift] + O Autocomplete [Ctrl] + Space Quick Fix Menu [Ctrl] + . Holding [Ctrl] or [Cmd] while hovering your mouse over your code will turn references, etc. into links you can click on. Note: On an NVidia Windows machine [Alt]+F12 is mapped in nVidia geForce so might need remapping. Other Notes can use the command palette to open files can create snippets (by language) to insert common code (type 'snip' into command palette) When creating files, can specify folder as part of the filename e.g. mydir/main.cpp and code will create the folder if it doesn't already exist. (sometimes you need to refresh the project tree with the refresh icon to the right of it's name) Right click on an item gives open to go to the definition or peek at it. Stuff to go in settings.json \"editor.renderIndentGuides\": false, You can automate the organising of imports, etc.. by editting the settings.json file and adding \"editor.codeActionsOnSave\": { \"source.organizeImports\": true } Turn off use of tabs when working with markdown... \"[markdown]\": { \"editor.insertSpaces\": false } Useful Palette Commands Reload Window Extension Shortcuts Enhanced Markdown Preview Action Shortcut Open Preview Pane [CTRL] + K, V","title":"VS Code"},{"location":"software_dev/tools/vs_code_learning/#vs-code","text":"","title":"VS Code"},{"location":"software_dev/tools/vs_code_learning/#shortcuts-general","text":"Action Shortcut Command Palette [CTRL] + Shift + P Command Palette (file search only) [CTRL] + P Refactor (across files) F2 Open/Close Terminal [CTRL] + ' Select Item at Cursor [Ctrl] + D","title":"Shortcuts - General"},{"location":"software_dev/tools/vs_code_learning/#shortcuts-coding","text":"Action Shortcut Goto Definition F12 Peek Definition [Alt] + F12 Goto References [Shift] + F12 Find All References [Alt] + [Shift] + F12 Format Document [Alt] + [Shift] + F Organise Imports [Alt] + [Shift] + O Autocomplete [Ctrl] + Space Quick Fix Menu [Ctrl] + . Holding [Ctrl] or [Cmd] while hovering your mouse over your code will turn references, etc. into links you can click on. Note: On an NVidia Windows machine [Alt]+F12 is mapped in nVidia geForce so might need remapping.","title":"Shortcuts - Coding"},{"location":"software_dev/tools/vs_code_learning/#other-notes","text":"can use the command palette to open files can create snippets (by language) to insert common code (type 'snip' into command palette) When creating files, can specify folder as part of the filename e.g. mydir/main.cpp and code will create the folder if it doesn't already exist. (sometimes you need to refresh the project tree with the refresh icon to the right of it's name) Right click on an item gives open to go to the definition or peek at it.","title":"Other Notes"},{"location":"software_dev/tools/vs_code_learning/#stuff-to-go-in-settingsjson","text":"\"editor.renderIndentGuides\": false, You can automate the organising of imports, etc.. by editting the settings.json file and adding \"editor.codeActionsOnSave\": { \"source.organizeImports\": true } Turn off use of tabs when working with markdown... \"[markdown]\": { \"editor.insertSpaces\": false }","title":"Stuff to go in settings.json"},{"location":"software_dev/tools/vs_code_learning/#useful-palette-commands","text":"Reload Window","title":"Useful Palette Commands"},{"location":"software_dev/tools/vs_code_learning/#extension-shortcuts","text":"","title":"Extension Shortcuts"},{"location":"software_dev/tools/vs_code_learning/#enhanced-markdown-preview","text":"Action Shortcut Open Preview Pane [CTRL] + K, V","title":"Enhanced Markdown Preview"}]}