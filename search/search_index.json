{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"software_dev/lisp/bits_of_lisp_01_eval_model/","text":"The Lisp Evaluation Model This is from Bagger's excellent Bits of Lisp youtube video Self Evaluating Objects numbers, (e.g. 1, -1, 1.616) strings, (e.g. \"Hello World\") keywords, (e.g. foo) Lists (+ 3 5) The first item in a list is evaluated as a function. The rest of the items in the list are evaluated and then passed to the function, However... `(+ 3 5) The back tick tells list not to evaluate the list and to treat it as data instead. #' This tells lisp to go and find the function named by this symbol. Special Forms The normal rules of evaluation don't apply to special forms. For example, the if function (if (> 10 5) (wake-up) (go-to-sleep)) If this was processed as a list, both wake-up and go-to-sleep would be evaluated, but this isn't what we want - we only want one of the items to be run (in the above case wake-up ). This is a the reason the progn is needed in the if statement, for exmaple.. (if (> 10 5) (progn (wake-up) (get-up)) (go-to-sleep)) Handy bits of Lisp (type-of *) in the repl this will return the type of hte last value returned in the repl. (second lst) returns the second item in the list - kind of like cadr","title":"The Lisp Evaluation Model"},{"location":"software_dev/lisp/bits_of_lisp_01_eval_model/#the-lisp-evaluation-model","text":"This is from Bagger's excellent Bits of Lisp youtube video","title":"The Lisp Evaluation Model"},{"location":"software_dev/lisp/bits_of_lisp_01_eval_model/#self-evaluating-objects","text":"numbers, (e.g. 1, -1, 1.616) strings, (e.g. \"Hello World\") keywords, (e.g. foo)","title":"Self Evaluating Objects"},{"location":"software_dev/lisp/bits_of_lisp_01_eval_model/#lists","text":"(+ 3 5) The first item in a list is evaluated as a function. The rest of the items in the list are evaluated and then passed to the function, However... `(+ 3 5) The back tick tells list not to evaluate the list and to treat it as data instead.","title":"Lists"},{"location":"software_dev/lisp/bits_of_lisp_01_eval_model/#_1","text":"This tells lisp to go and find the function named by this symbol.","title":"#'"},{"location":"software_dev/lisp/bits_of_lisp_01_eval_model/#special-forms","text":"The normal rules of evaluation don't apply to special forms. For example, the if function (if (> 10 5) (wake-up) (go-to-sleep)) If this was processed as a list, both wake-up and go-to-sleep would be evaluated, but this isn't what we want - we only want one of the items to be run (in the above case wake-up ). This is a the reason the progn is needed in the if statement, for exmaple.. (if (> 10 5) (progn (wake-up) (get-up)) (go-to-sleep))","title":"Special Forms"},{"location":"software_dev/lisp/bits_of_lisp_01_eval_model/#handy-bits-of-lisp","text":"(type-of *) in the repl this will return the type of hte last value returned in the repl. (second lst) returns the second item in the list - kind of like cadr","title":"Handy bits of Lisp"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/","text":"Land of Lisp - Ch1 & Ch2 TL;DR Loading Source Files > (load \"my_lisp_file.lisp\") clisp \"my_lisp_file.lisp\" sbcl --load \"my_lisp_file.lisp\" Global Vars > (defvar +golden_ratio+ 1.616) ; immutable > (defparameter *foo* \"foo\") ; mutable Functions (defun my_super_duper_function (...args...) ... body of function ...) Local Variables (let ((var1 val1) (var2 val2)) ...body...) (let* ((var1 val1) (var2 var2)) ...body...) Local Functions ; flet doesn't allow for local functions to call each other - no recursion (flet ((function_name (arguments) ...function body...)) ... body ...) ; labels allows local functions to call each other (can recurse) (labels ((function_name (arguments) ... function body ...)) ... body ...) Chapter 1 Loading source files... > (load \"my_lisp_file.lisp\") Or... clisp \"my_lisp_file.lisp\" sbcl --load \"my_lisp_file.lisp\" Chapter 2 Global Variables Defining a constant (convention is to surround name with + symbols) (defvar +golden_ratio+ 1.6180339) Define a mutable global variable (defparameter *myval* 1) \"Earmuffs\" The asterixes surrounding a variable are referred to as ear muffs. It's a Lisp convention that these are used to identify global variables. The asterixes are part of the name. defvar and defparameter defvar will only set a value once. If defvar is used to change a variable's value again, the value will not change. The value can be changed with calls to other functions (such as defparameter ). e.g. [1]> (defvar +hello+ \"Hello\") ; define the value +HELLO+ [2]> +hello+ \"Hello\" [3]> (defvar +hello+ \"Hello World\") ; defvar won't change value +HELLO+ [4]> +hello+ \"Hello\" [5]> (defparameter +hello+ \"Hello World\") ; defparameter WILL change the value +HELLO+ [6]> +hello+ \"Hello World\" see also: setf and setq Defining a Function (defun func_name (arguments) ... body ... ) Defining Local Variables (let (variable declarations) ..body... ) Defining Local Functions There are two ways to define a local function in Lisp flet and labels . flet functions can only be called by the body labels allows local functions to call themselves and other local functions. It's a convention to default to the use to flet unless labels is required. This way if you see labels in code you can expect functions to be calling each other and that recursion is likely. flet (flet ((function_name_1 (arguments) ... function 1 body...) (function_name_2 (arguments) ... function 2 body...)) ... body ... ) e.g. (flet ((f (n) (+ n 10)) (g (n) (- n 3))) (g (f 5)) ) labels (labels ((function_name (arguments) ... function body...)) ... body ... ) e.g. (labels ((a (n) (+ n 5)) (b (n) (+ (a n) 6))) (b 10))","title":"Land of Lisp - Ch1 & Ch2"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#land-of-lisp-ch1-ch2","text":"","title":"Land of Lisp - Ch1 &amp; Ch2"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#tldr","text":"","title":"TL;DR"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#loading-source-files","text":"> (load \"my_lisp_file.lisp\") clisp \"my_lisp_file.lisp\" sbcl --load \"my_lisp_file.lisp\"","title":"Loading Source Files"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#global-vars","text":"> (defvar +golden_ratio+ 1.616) ; immutable > (defparameter *foo* \"foo\") ; mutable","title":"Global Vars"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#functions","text":"(defun my_super_duper_function (...args...) ... body of function ...)","title":"Functions"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#local-variables","text":"(let ((var1 val1) (var2 val2)) ...body...) (let* ((var1 val1) (var2 var2)) ...body...)","title":"Local Variables"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#local-functions","text":"; flet doesn't allow for local functions to call each other - no recursion (flet ((function_name (arguments) ...function body...)) ... body ...) ; labels allows local functions to call each other (can recurse) (labels ((function_name (arguments) ... function body ...)) ... body ...)","title":"Local Functions"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#chapter-1","text":"Loading source files... > (load \"my_lisp_file.lisp\") Or... clisp \"my_lisp_file.lisp\" sbcl --load \"my_lisp_file.lisp\"","title":"Chapter 1"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#chapter-2","text":"","title":"Chapter 2"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#global-variables","text":"Defining a constant (convention is to surround name with + symbols) (defvar +golden_ratio+ 1.6180339) Define a mutable global variable (defparameter *myval* 1) \"Earmuffs\" The asterixes surrounding a variable are referred to as ear muffs. It's a Lisp convention that these are used to identify global variables. The asterixes are part of the name.","title":"Global Variables"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#defvar-and-defparameter","text":"defvar will only set a value once. If defvar is used to change a variable's value again, the value will not change. The value can be changed with calls to other functions (such as defparameter ). e.g. [1]> (defvar +hello+ \"Hello\") ; define the value +HELLO+ [2]> +hello+ \"Hello\" [3]> (defvar +hello+ \"Hello World\") ; defvar won't change value +HELLO+ [4]> +hello+ \"Hello\" [5]> (defparameter +hello+ \"Hello World\") ; defparameter WILL change the value +HELLO+ [6]> +hello+ \"Hello World\" see also: setf and setq","title":"defvar and defparameter"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#defining-a-function","text":"(defun func_name (arguments) ... body ... )","title":"Defining a Function"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#defining-local-variables","text":"(let (variable declarations) ..body... )","title":"Defining Local Variables"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#defining-local-functions","text":"There are two ways to define a local function in Lisp flet and labels . flet functions can only be called by the body labels allows local functions to call themselves and other local functions. It's a convention to default to the use to flet unless labels is required. This way if you see labels in code you can expect functions to be calling each other and that recursion is likely.","title":"Defining Local Functions"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#flet","text":"(flet ((function_name_1 (arguments) ... function 1 body...) (function_name_2 (arguments) ... function 2 body...)) ... body ... ) e.g. (flet ((f (n) (+ n 10)) (g (n) (- n 3))) (g (f 5)) )","title":"flet"},{"location":"software_dev/lisp/land-of-lisp-ch01-ch02/#labels","text":"(labels ((function_name (arguments) ... function body...)) ... body ... ) e.g. (labels ((a (n) (+ n 5)) (b (n) (+ (a n) 6))) (b 10))","title":"labels"},{"location":"software_dev/lisp/land-of-lisp-ch03/","text":"Land of Lisp - Ch 3 TL;DR code and data mode cons cells making lists using cons , ' and list > (cons 1 ()) (1) > (cons 1 (cons 2 ())) (1 2) > '(1 2) (1 2) > (list 1 2) (1 2) car and cdr Chapter 3 Code and Data Mode > (expt 2 3) ; code mode 8 > '(expt 2 3) ; data mode (expt 2 3) Lists Using cons to create lists > (cons 'chicken 'egg) (CHICKEN . EGG) > (cons 'chicken 'nil) (CHICKEN) > (cons 'chicken ()) (CHICKEN) > (cons 'chicken '(egg omlette)) (CHICKEN EGG OMLETTE) Using car and cdr These work up to 4 levels deep. Anything deeper ( e.g. cadadar ) you'll have to write yourself. Also note that it works from back to front (look at caddr for example) > (car '(1 2 3 4 5)) 1 > (cdr '(1 2 3 4 5)) (2 3 4 5) > (cadr '(1 2 3 4 5)) 2 > (cddr '(1 2 3 4 5)) (3 4 5) > (caddr '(1 2 3 4 5)) ; processes in this order -> d.. d.. a 3 > (car '( (1 2) 3 4 5)) ; using a nested list (1 2) Creating a list, threeways... ( cons and list ) > (cons 'chicken (cons 'egg (cons 'omlette ()))) (CHICKEN EGG OMLETTE) > (list 'chicken 'egg 'omlette) (CHICKEN EGG OMLETTE) > '(chicken egg omlette) (CHICKEN EGG OMLETTE) > '(cat (duck bat) ant) (CAT (DUCK BAT) ANT)","title":"Land of Lisp - Ch 3"},{"location":"software_dev/lisp/land-of-lisp-ch03/#land-of-lisp-ch-3","text":"","title":"Land of Lisp - Ch 3"},{"location":"software_dev/lisp/land-of-lisp-ch03/#tldr","text":"code and data mode cons cells making lists using cons , ' and list > (cons 1 ()) (1) > (cons 1 (cons 2 ())) (1 2) > '(1 2) (1 2) > (list 1 2) (1 2) car and cdr","title":"TL;DR"},{"location":"software_dev/lisp/land-of-lisp-ch03/#chapter-3","text":"","title":"Chapter 3"},{"location":"software_dev/lisp/land-of-lisp-ch03/#code-and-data-mode","text":"> (expt 2 3) ; code mode 8 > '(expt 2 3) ; data mode (expt 2 3)","title":"Code and Data Mode"},{"location":"software_dev/lisp/land-of-lisp-ch03/#lists","text":"","title":"Lists"},{"location":"software_dev/lisp/land-of-lisp-ch03/#using-cons-to-create-lists","text":"> (cons 'chicken 'egg) (CHICKEN . EGG) > (cons 'chicken 'nil) (CHICKEN) > (cons 'chicken ()) (CHICKEN) > (cons 'chicken '(egg omlette)) (CHICKEN EGG OMLETTE)","title":"Using cons to create lists"},{"location":"software_dev/lisp/land-of-lisp-ch03/#using-car-and-cdr","text":"These work up to 4 levels deep. Anything deeper ( e.g. cadadar ) you'll have to write yourself. Also note that it works from back to front (look at caddr for example) > (car '(1 2 3 4 5)) 1 > (cdr '(1 2 3 4 5)) (2 3 4 5) > (cadr '(1 2 3 4 5)) 2 > (cddr '(1 2 3 4 5)) (3 4 5) > (caddr '(1 2 3 4 5)) ; processes in this order -> d.. d.. a 3 > (car '( (1 2) 3 4 5)) ; using a nested list (1 2)","title":"Using car and cdr"},{"location":"software_dev/lisp/land-of-lisp-ch03/#creating-a-list-threeways-cons-and-list","text":"> (cons 'chicken (cons 'egg (cons 'omlette ()))) (CHICKEN EGG OMLETTE) > (list 'chicken 'egg 'omlette) (CHICKEN EGG OMLETTE) > '(chicken egg omlette) (CHICKEN EGG OMLETTE) > '(cat (duck bat) ant) (CAT (DUCK BAT) ANT)","title":"Creating a list, threeways... (cons and list)"},{"location":"software_dev/lisp/land-of-lisp-ch04/","text":"Land of Lisp - Ch 4 TL;DR Empty equals false - all of these are empty -> () '() nil 'nil if - only one branch (then branch or else branch) evaluated depending on condition when and unless - implicit progn cond - classic branching in Lisp lisp (cond ((cond1) 'do-1a) ((cond2) 'do-2a 'do-2b) (t 'do-a 'do-b)) case - branching by matching with eq (so cannot branch on strings) lisp (case var1 ((val1) 'do-1a 'do-1b) ((val2) 'do-2a) (otherwise 'do-a 'do-b)) conditionals - and and or - shortcut Boolean evaluation comparisons rule of thumb - use eq when comparing symbols and equal when comparing everything else. eq - compares symbols only (also seems to compare ints and chars [case sensitive]) equal - general comparison (symbols, chars, numbers, strings [case insensitive], lists, etc) eql - compares symbols, chars and numbers (but only of same type) - chars are case insensitive equalp - like equal but can compare between different number types (e.g. float and int) = - comparsion between number types string-equal (case insensitive) char-equal (case insensitive) Chapter 4 (conditions) Empty Equals False The following are all false (scheme handles this differently) () '() nil 'nil (defun my-len (list) (if list (1+ (my-len (cdr list))) 0)) if only one branch executed, lisp will not evaluate the branch not taken (if '(1) 'this-is-true (/ 1 0)) Notes: can only execute 1 item in each branch (/ 1 0) will never be evaluated so lisp won't throw it out when and unless Executes multiple statements (when (condition-is-true) 'this-is-executed 'and-so-is-this ) (unless (condition-is-false) 'this-is-executed 'and-so-is-this ) cond Classic way to do branching in Lisp. Considered by some to be the one true Lisp conditional (as it's been around since the Lisp Stone Age) (defvar *arch-enemy* nil) (defun pudding-eater (person) (cond ((eq person 'henry) (setf *arch-enemy* 'stupid-lisp-alien) '(curse you lisp alien - you ate my pudding)) ((eq person 'johnny) (setf *arch-enemy* 'useless-old-johnny) '(i hope you choked on my pudding johnny)) (t '(why you eatin' ma pudding stranger?)))) case (defun pudding-eater (person) (case person ((henry) (setf *arch-enemy* 'stupid-lisp-alien) '(curse you lisp alien - you ate my pudding)) ((johnny) (setf *arch-enemy* 'useless-old-johnny) '(i hope you choked on my pudding johnny)) (otherwise '(why you eatin' ma pudding stranger?)))) Note: case uses eq for comparison, so cannot be used to branch on string values. conditionals \"and\" and \"or\" > (and (oddp 5)(oddp 7)(oddp 9)) > (or (oddp 6)(oodp 4)(oddp 1)) Lisp will shortcut these statements (i.e. stop processing an or when it hits a true condition, stop processing an and condition when it hits a false). Handy for a trick like this... (and *file-modified* (ask-user-about-saving) (save-file)) comparisons eq - compares symbols only. (also seems to compare ints and chars as well) eql - compares symbols, chars and numbers (but only of same type, e.g. int -> int, float -> float), chars are case insensitive equal - general comparison (symbols, chars, numbers, strings [case sensitive], lists, etc) equalp - like equal but can compare between number types (e.g. int -> float), strings are case insensitive = - comparison between number types string-equal - comparison between strings (case insensitive) char-equal - comparison between chars (case insensitve)","title":"Land of Lisp - Ch 4"},{"location":"software_dev/lisp/land-of-lisp-ch04/#land-of-lisp-ch-4","text":"","title":"Land of Lisp - Ch 4"},{"location":"software_dev/lisp/land-of-lisp-ch04/#tldr","text":"Empty equals false - all of these are empty -> () '() nil 'nil if - only one branch (then branch or else branch) evaluated depending on condition when and unless - implicit progn cond - classic branching in Lisp lisp (cond ((cond1) 'do-1a) ((cond2) 'do-2a 'do-2b) (t 'do-a 'do-b)) case - branching by matching with eq (so cannot branch on strings) lisp (case var1 ((val1) 'do-1a 'do-1b) ((val2) 'do-2a) (otherwise 'do-a 'do-b)) conditionals - and and or - shortcut Boolean evaluation comparisons rule of thumb - use eq when comparing symbols and equal when comparing everything else. eq - compares symbols only (also seems to compare ints and chars [case sensitive]) equal - general comparison (symbols, chars, numbers, strings [case insensitive], lists, etc) eql - compares symbols, chars and numbers (but only of same type) - chars are case insensitive equalp - like equal but can compare between different number types (e.g. float and int) = - comparsion between number types string-equal (case insensitive) char-equal (case insensitive)","title":"TL;DR"},{"location":"software_dev/lisp/land-of-lisp-ch04/#chapter-4-conditions","text":"","title":"Chapter 4 (conditions)"},{"location":"software_dev/lisp/land-of-lisp-ch04/#empty-equals-false","text":"The following are all false (scheme handles this differently) () '() nil 'nil (defun my-len (list) (if list (1+ (my-len (cdr list))) 0))","title":"Empty Equals False"},{"location":"software_dev/lisp/land-of-lisp-ch04/#if","text":"only one branch executed, lisp will not evaluate the branch not taken (if '(1) 'this-is-true (/ 1 0)) Notes: can only execute 1 item in each branch (/ 1 0) will never be evaluated so lisp won't throw it out","title":"if"},{"location":"software_dev/lisp/land-of-lisp-ch04/#when-and-unless","text":"Executes multiple statements (when (condition-is-true) 'this-is-executed 'and-so-is-this ) (unless (condition-is-false) 'this-is-executed 'and-so-is-this )","title":"when and unless"},{"location":"software_dev/lisp/land-of-lisp-ch04/#cond","text":"Classic way to do branching in Lisp. Considered by some to be the one true Lisp conditional (as it's been around since the Lisp Stone Age) (defvar *arch-enemy* nil) (defun pudding-eater (person) (cond ((eq person 'henry) (setf *arch-enemy* 'stupid-lisp-alien) '(curse you lisp alien - you ate my pudding)) ((eq person 'johnny) (setf *arch-enemy* 'useless-old-johnny) '(i hope you choked on my pudding johnny)) (t '(why you eatin' ma pudding stranger?))))","title":"cond"},{"location":"software_dev/lisp/land-of-lisp-ch04/#case","text":"(defun pudding-eater (person) (case person ((henry) (setf *arch-enemy* 'stupid-lisp-alien) '(curse you lisp alien - you ate my pudding)) ((johnny) (setf *arch-enemy* 'useless-old-johnny) '(i hope you choked on my pudding johnny)) (otherwise '(why you eatin' ma pudding stranger?)))) Note: case uses eq for comparison, so cannot be used to branch on string values.","title":"case"},{"location":"software_dev/lisp/land-of-lisp-ch04/#conditionals-and-and-or","text":"> (and (oddp 5)(oddp 7)(oddp 9)) > (or (oddp 6)(oodp 4)(oddp 1)) Lisp will shortcut these statements (i.e. stop processing an or when it hits a true condition, stop processing an and condition when it hits a false). Handy for a trick like this... (and *file-modified* (ask-user-about-saving) (save-file))","title":"conditionals \"and\" and \"or\""},{"location":"software_dev/lisp/land-of-lisp-ch04/#comparisons","text":"eq - compares symbols only. (also seems to compare ints and chars as well) eql - compares symbols, chars and numbers (but only of same type, e.g. int -> int, float -> float), chars are case insensitive equal - general comparison (symbols, chars, numbers, strings [case sensitive], lists, etc) equalp - like equal but can compare between number types (e.g. int -> float), strings are case insensitive = - comparison between number types string-equal - comparison between strings (case insensitive) char-equal - comparison between chars (case insensitve)","title":"comparisons"},{"location":"software_dev/lisp/land-of-lisp-ch05/","text":"Land of Lisp - Ch 5 assocation lists (defparameter *my-list* '( (key1 (value1a valueb valuec)) (key2 (value2a valueb valuec)) (key3 (value3a valueb valuec)) (key4 (value4a valueb valuec)) (key5 (value5a valueb valuec)) (key3 (value3d valuee valuef)))) ; format is (assoc key list).. e.g. > (assoc key3 *my-list*) ; will return.. (key3 (value3a valueb valuec)) ; only returns the first matching key quasi-quoting Can mark code in data if you use a back-tick and a comma . > (defparameter *foo* \"foo\") > `(data data ,*foo* data ,*foo* data) ; back-tick and commas (DATA DATA \"foo\" DATA \"foo\" DATA) append > (append '(1 2 3) '(4 5 6)) (1 2 3 4 5 6) > (append '((1 2) (3 4)) '(5 6)) ((1 2) (3 4) 5 6) Higher Order Functions mapcar (mapcar #'function list) applies function to each item of list and generates a new list apply takes items in a list and passes them as the parameters to function. > (apply #'append '( (1 2) (3 4) (5) (6) ) ) ; applies the append function to each list in the list to generate... (1 2 3 4 5 6) ; which is the same as calling... >(append '(1 2) '(3 4) '(5) '(6)) find (defun walk (direction) (let ((next (find direction (cdr (assoc *location* *edges*)) ; lists all edge *location* :key #'cadr ))) ; in (garden west door) cadr [i.e. west] is what we are searching on (if next (progn (setf *location* (car next)) (look)) '(you cannot go that way.)))) > (find 'y '((5 x) (3 y) (7 z)) :key #'cadr) (3 Y) > (find 'y '(5 . x) (3 . y) 7 . z) push adds an item to the front of a list (must be a named list?) > (defparameter *nums* '(2 3)) > (push '1 *nums*) (1 2 3) other list handling functions (remove-if #'predicate list) - remove all items for which predicate is true (remove-if-not #'predicate list)","title":"Land of Lisp - Ch 5"},{"location":"software_dev/lisp/land-of-lisp-ch05/#land-of-lisp-ch-5","text":"","title":"Land of Lisp - Ch 5"},{"location":"software_dev/lisp/land-of-lisp-ch05/#assocation-lists","text":"(defparameter *my-list* '( (key1 (value1a valueb valuec)) (key2 (value2a valueb valuec)) (key3 (value3a valueb valuec)) (key4 (value4a valueb valuec)) (key5 (value5a valueb valuec)) (key3 (value3d valuee valuef)))) ; format is (assoc key list).. e.g. > (assoc key3 *my-list*) ; will return.. (key3 (value3a valueb valuec)) ; only returns the first matching key","title":"assocation lists"},{"location":"software_dev/lisp/land-of-lisp-ch05/#quasi-quoting","text":"Can mark code in data if you use a back-tick and a comma . > (defparameter *foo* \"foo\") > `(data data ,*foo* data ,*foo* data) ; back-tick and commas (DATA DATA \"foo\" DATA \"foo\" DATA)","title":"quasi-quoting"},{"location":"software_dev/lisp/land-of-lisp-ch05/#append","text":"> (append '(1 2 3) '(4 5 6)) (1 2 3 4 5 6) > (append '((1 2) (3 4)) '(5 6)) ((1 2) (3 4) 5 6)","title":"append"},{"location":"software_dev/lisp/land-of-lisp-ch05/#higher-order-functions","text":"","title":"Higher Order Functions"},{"location":"software_dev/lisp/land-of-lisp-ch05/#mapcar","text":"(mapcar #'function list) applies function to each item of list and generates a new list","title":"mapcar"},{"location":"software_dev/lisp/land-of-lisp-ch05/#apply","text":"takes items in a list and passes them as the parameters to function. > (apply #'append '( (1 2) (3 4) (5) (6) ) ) ; applies the append function to each list in the list to generate... (1 2 3 4 5 6) ; which is the same as calling... >(append '(1 2) '(3 4) '(5) '(6))","title":"apply"},{"location":"software_dev/lisp/land-of-lisp-ch05/#find","text":"(defun walk (direction) (let ((next (find direction (cdr (assoc *location* *edges*)) ; lists all edge *location* :key #'cadr ))) ; in (garden west door) cadr [i.e. west] is what we are searching on (if next (progn (setf *location* (car next)) (look)) '(you cannot go that way.)))) > (find 'y '((5 x) (3 y) (7 z)) :key #'cadr) (3 Y) > (find 'y '(5 . x) (3 . y) 7 . z)","title":"find"},{"location":"software_dev/lisp/land-of-lisp-ch05/#push","text":"adds an item to the front of a list (must be a named list?) > (defparameter *nums* '(2 3)) > (push '1 *nums*) (1 2 3)","title":"push"},{"location":"software_dev/lisp/land-of-lisp-ch05/#other-list-handling-functions","text":"(remove-if #'predicate list) - remove all items for which predicate is true (remove-if-not #'predicate list)","title":"other list handling functions"},{"location":"software_dev/lisp/land-of-lisp-ch06.5/","text":"Land of Lisp Learning Chapter 6.5 - lambda functions Declaring a lambda that will halve a given number (lambda (n) (/ n 2)) Using the above lambda to halve all the numbers in a list (mapcar (lambda (n) (/ n 2)) '(2 4 6))","title":"Land of Lisp Learning"},{"location":"software_dev/lisp/land-of-lisp-ch06.5/#land-of-lisp-learning","text":"","title":"Land of Lisp Learning"},{"location":"software_dev/lisp/land-of-lisp-ch06.5/#chapter-65-lambda-functions","text":"Declaring a lambda that will halve a given number (lambda (n) (/ n 2)) Using the above lambda to halve all the numbers in a list (mapcar (lambda (n) (/ n 2)) '(2 4 6))","title":"Chapter 6.5 - lambda functions"},{"location":"software_dev/lisp/land-of-lisp-keywords/","text":"Land of Lisp Lisp Keywords Setting Values defparameter - defines a mutable global value (can be changed by further calls to defparameter ) defvar - defines an immutable global value (cannot be changed by further calls to defvar but can be changed by setf ) setf - sets a value, e.g. (setf *my_number* 5) List Keywords cons - creates a list from two items (one of which can be nil) car - returns the head of a list cdr - returns the tail of a list list - creates a list, e.g. (list 1 2 3) creates the list (1 2 3) member - returns the tail of a list when an item is found e.g. (member 1 '(3 4 1 5)) will return (1 5) assoc find remove-if remove-if-not Lists - Higher Order Functions apply mapcar - maps function to each item in list > (mapcar #'print '(a b c)) A B C maplist - maps function to a list of each item in list > (maplist #'print '(a b c)) (A B C) (B C) (C) Maths Keywords expt - exponential, e.g. (expt 2 3) returns 8 ash - arithmetic shift e.g (ash 8 1) returns 16, (ash 8 -1) returns 4 Conditional Keywords if when unless cond case and or Other Keywords oddp - return t if odd number, nil if even, errors if not integer progn - run a sequence of expressions, returning the last evaluated expression y-or-n-p - prompts for a 'y or n' answer `(y-or-n-p \"It is Thursday? \"), return T for 'y' and Nil for 'n' complement - equivalent to \"not\" alphanumericp - returns true for alpha numeric chars, false otherwise digit-char-p - returns true if number characte substitute-if [cond] [new item] [list] - generic function can handle multiple datatypes Reading Keyboard Input read - usage: (my_val (read)) - will read numbers, etc. Useful to read structures from files (which have been written by a print statement) read-line - usage: (my_val (read-line)) - will only read strings and chars Printing [ ] TODO: confirm how the print statements differ print prin1 princ princ-to-string prin1-to-string - conversts any basic lisp type to a string 'write-to-string' - writes an expression to a string :pretty [t/nil] -> adds new lines or tabs into string Special Chars #\\newline #\\space #\\tab #\\backspace #\\linefeed #\\page #\\return #\\rubout #\\? #\\! #\\. File Handling (with-open-file (my-stream \"testfilename.txt\" :direction :output :if-exists :supersede ) (princ \"Hello File!\" my-strean) )","title":"Land of Lisp"},{"location":"software_dev/lisp/land-of-lisp-keywords/#land-of-lisp","text":"","title":"Land of Lisp"},{"location":"software_dev/lisp/land-of-lisp-keywords/#lisp-keywords","text":"","title":"Lisp Keywords"},{"location":"software_dev/lisp/land-of-lisp-keywords/#setting-values","text":"defparameter - defines a mutable global value (can be changed by further calls to defparameter ) defvar - defines an immutable global value (cannot be changed by further calls to defvar but can be changed by setf ) setf - sets a value, e.g. (setf *my_number* 5)","title":"Setting Values"},{"location":"software_dev/lisp/land-of-lisp-keywords/#list-keywords","text":"cons - creates a list from two items (one of which can be nil) car - returns the head of a list cdr - returns the tail of a list list - creates a list, e.g. (list 1 2 3) creates the list (1 2 3) member - returns the tail of a list when an item is found e.g. (member 1 '(3 4 1 5)) will return (1 5) assoc find remove-if remove-if-not","title":"List Keywords"},{"location":"software_dev/lisp/land-of-lisp-keywords/#lists-higher-order-functions","text":"apply mapcar - maps function to each item in list > (mapcar #'print '(a b c)) A B C maplist - maps function to a list of each item in list > (maplist #'print '(a b c)) (A B C) (B C) (C)","title":"Lists - Higher Order Functions"},{"location":"software_dev/lisp/land-of-lisp-keywords/#maths-keywords","text":"expt - exponential, e.g. (expt 2 3) returns 8 ash - arithmetic shift e.g (ash 8 1) returns 16, (ash 8 -1) returns 4","title":"Maths Keywords"},{"location":"software_dev/lisp/land-of-lisp-keywords/#conditional-keywords","text":"if when unless cond case and or","title":"Conditional Keywords"},{"location":"software_dev/lisp/land-of-lisp-keywords/#other-keywords","text":"oddp - return t if odd number, nil if even, errors if not integer progn - run a sequence of expressions, returning the last evaluated expression y-or-n-p - prompts for a 'y or n' answer `(y-or-n-p \"It is Thursday? \"), return T for 'y' and Nil for 'n' complement - equivalent to \"not\" alphanumericp - returns true for alpha numeric chars, false otherwise digit-char-p - returns true if number characte substitute-if [cond] [new item] [list] - generic function can handle multiple datatypes","title":"Other Keywords"},{"location":"software_dev/lisp/land-of-lisp-keywords/#reading-keyboard-input","text":"read - usage: (my_val (read)) - will read numbers, etc. Useful to read structures from files (which have been written by a print statement) read-line - usage: (my_val (read-line)) - will only read strings and chars","title":"Reading Keyboard Input"},{"location":"software_dev/lisp/land-of-lisp-keywords/#printing","text":"[ ] TODO: confirm how the print statements differ print prin1 princ princ-to-string prin1-to-string - conversts any basic lisp type to a string 'write-to-string' - writes an expression to a string :pretty [t/nil] -> adds new lines or tabs into string","title":"Printing"},{"location":"software_dev/lisp/land-of-lisp-keywords/#special-chars","text":"#\\newline #\\space #\\tab #\\backspace #\\linefeed #\\page #\\return #\\rubout #\\? #\\! #\\.","title":"Special Chars"},{"location":"software_dev/lisp/land-of-lisp-keywords/#file-handling","text":"(with-open-file (my-stream \"testfilename.txt\" :direction :output :if-exists :supersede ) (princ \"Hello File!\" my-strean) )","title":"File Handling"},{"location":"software_dev/maven/01-java-recap/","text":"Maven - Recap on Java Compilation and Execution (2019-12-02) Creating a jar file... jar cf myjar.jar HelloWorld.class cf - create file Running jar file... java -cp myjar.jar HelloWorld NB. need to add the jar to the classpath with '-cp myjar.jar' Working with 3rd party library Compiling with 3rd party lib javac -cp ./lib/* HelloWorld.java Assuming the 3rd party library is in the lib folder. Running with a 3rd party lib java -cp ./lib/*;./ HelloWorld Note the separator in the classpath is either ; (on windows) or : (on Mac/Linux) File Structure src | +-- main | +-- java | +--> source files go here!","title":"Maven - Recap on Java Compilation and Execution"},{"location":"software_dev/maven/01-java-recap/#maven-recap-on-java-compilation-and-execution","text":"(2019-12-02)","title":"Maven - Recap on Java Compilation and Execution"},{"location":"software_dev/maven/01-java-recap/#creating-a-jar-file","text":"jar cf myjar.jar HelloWorld.class cf - create file","title":"Creating a jar file..."},{"location":"software_dev/maven/01-java-recap/#running-jar-file","text":"java -cp myjar.jar HelloWorld NB. need to add the jar to the classpath with '-cp myjar.jar'","title":"Running jar file..."},{"location":"software_dev/maven/01-java-recap/#working-with-3rd-party-library","text":"Compiling with 3rd party lib javac -cp ./lib/* HelloWorld.java Assuming the 3rd party library is in the lib folder. Running with a 3rd party lib java -cp ./lib/*;./ HelloWorld Note the separator in the classpath is either ; (on windows) or : (on Mac/Linux)","title":"Working with 3rd party library"},{"location":"software_dev/maven/01-java-recap/#file-structure","text":"src | +-- main | +-- java | +--> source files go here!","title":"File Structure"},{"location":"software_dev/maven/02-maven-basics/","text":"Starting with Maven Maven Coordinates Identifies a location in a Maven Repository. groupId - usually an organisation's domain in reverse (could also just be 'junit' ) artifactId - project name version e.g. <groupId>com.gwenci</groupId> <artifactId>web_scraper</artifactId> <version>1.0-SNAPSHOT</version> groupId and version can be inherited from a parent POM Version The version number is made up of a number of components. e.g. 3.2.1-987-beta major version e.g. 3 minor version e.g. 2 incremental version e.g. 1 (from patching) build number e.g. 987 (from CI build) String Qualifier e.g. beta The most common in use is: major.minor.incremental Snapshot Versions If the string qualifier is \"SNAPSHOT\" this tells Maven that this is a development version, and therefore not stable. Maven will go and check for newer versions of this project instead. Maven Repositories There are 3 main types. local - hosted on your own machine, usually somewhere like: ~/.m2/... central - the public repo hosted at https://repo1.maven.org/maven2 remote - other locations (private or public) Maven caches artifacts locally and will not go looking for them again (unless it's a SNAPSHOT) Useful web site: https://mvnrepository.com - shows available Maven central artifacts. The POM file Stands for Project Object Model describes the project must comply with maven-4.0.0.xsd (xsd - xml schema document) can inherit properties from parent POM Effective POM - this is the POM complete with inherited properties, can be displayed with: mvn help:effective-pom Can also be found in Intellij IDEA, here: Maven Dependencies A dependency is an artifact that your project relies on. Typically a JAR or a POM . Transitive Dependency If your project needs artifact A and artifact A needs artifact B , transitively your project need artifact B . These transitive dependencies can be many layers deep, but they cannot be cyclic. Dependency Managament Allows project authors to specify the version of the artifact they need. Dependency Mediation Determines the version of an artifact to use when multiple versions are encountered. e.g. project --> A --> D (v2.0) | +---> B --> D (v1.5) In this case D (v2.0) would be used as it is the nearest definition in the dependency tree. This can lead to confusing situations, but most of the time it works. Usually gets the latest version but not all the time. Dependency Exclusion Can exlude certain dependencies. Optional Dependencies Can mark dependencies as optional, so they aren't used downstream. Dependency Scope Compile - available on all classpaths, propogates to downstream projects. (this dependency is include when your project is included as another project's dependency) Provided - like Compile but expected to be provided by JDK/container at runtime. Runtime - not required for compilation, but needed at runtime (eg. data access for a database) Test - on available on test classpath. Not transitive (e.g. junit or mockito not required for projects that are dependent on your project) System - similiar to provided Import - import the dependencies of a POM Depdency Plug In Useful goals mvn dependency:tree - show dependecy tree, useful for resolving conflicts mvn dependency:go-offline - resolve all and prepare to go offline mvn dependency:purge-local-repository - handy troubleshooting step mvn dependency:sources - get sources for all dependencies Standard Directory Layout Apache Maven's Guide to Standard Directory Layout main - contains source code organised by language (e.g. java and kotlin ) resources - contains files such as text files, xml files, properties files, images and so on","title":"Starting with Maven"},{"location":"software_dev/maven/02-maven-basics/#starting-with-maven","text":"","title":"Starting with Maven"},{"location":"software_dev/maven/02-maven-basics/#maven-coordinates","text":"Identifies a location in a Maven Repository. groupId - usually an organisation's domain in reverse (could also just be 'junit' ) artifactId - project name version e.g. <groupId>com.gwenci</groupId> <artifactId>web_scraper</artifactId> <version>1.0-SNAPSHOT</version> groupId and version can be inherited from a parent POM","title":"Maven Coordinates"},{"location":"software_dev/maven/02-maven-basics/#version","text":"The version number is made up of a number of components. e.g. 3.2.1-987-beta major version e.g. 3 minor version e.g. 2 incremental version e.g. 1 (from patching) build number e.g. 987 (from CI build) String Qualifier e.g. beta The most common in use is: major.minor.incremental","title":"Version"},{"location":"software_dev/maven/02-maven-basics/#snapshot-versions","text":"If the string qualifier is \"SNAPSHOT\" this tells Maven that this is a development version, and therefore not stable. Maven will go and check for newer versions of this project instead.","title":"Snapshot Versions"},{"location":"software_dev/maven/02-maven-basics/#maven-repositories","text":"There are 3 main types. local - hosted on your own machine, usually somewhere like: ~/.m2/... central - the public repo hosted at https://repo1.maven.org/maven2 remote - other locations (private or public) Maven caches artifacts locally and will not go looking for them again (unless it's a SNAPSHOT) Useful web site: https://mvnrepository.com - shows available Maven central artifacts.","title":"Maven Repositories"},{"location":"software_dev/maven/02-maven-basics/#the-pom-file","text":"Stands for Project Object Model describes the project must comply with maven-4.0.0.xsd (xsd - xml schema document) can inherit properties from parent POM Effective POM - this is the POM complete with inherited properties, can be displayed with: mvn help:effective-pom Can also be found in Intellij IDEA, here:","title":"The POM file"},{"location":"software_dev/maven/02-maven-basics/#maven-dependencies","text":"A dependency is an artifact that your project relies on. Typically a JAR or a POM .","title":"Maven Dependencies"},{"location":"software_dev/maven/02-maven-basics/#transitive-dependency","text":"If your project needs artifact A and artifact A needs artifact B , transitively your project need artifact B . These transitive dependencies can be many layers deep, but they cannot be cyclic.","title":"Transitive Dependency"},{"location":"software_dev/maven/02-maven-basics/#dependency-managament","text":"Allows project authors to specify the version of the artifact they need.","title":"Dependency Managament"},{"location":"software_dev/maven/02-maven-basics/#dependency-mediation","text":"Determines the version of an artifact to use when multiple versions are encountered. e.g. project --> A --> D (v2.0) | +---> B --> D (v1.5) In this case D (v2.0) would be used as it is the nearest definition in the dependency tree. This can lead to confusing situations, but most of the time it works. Usually gets the latest version but not all the time.","title":"Dependency Mediation"},{"location":"software_dev/maven/02-maven-basics/#dependency-exclusion","text":"Can exlude certain dependencies.","title":"Dependency Exclusion"},{"location":"software_dev/maven/02-maven-basics/#optional-dependencies","text":"Can mark dependencies as optional, so they aren't used downstream.","title":"Optional Dependencies"},{"location":"software_dev/maven/02-maven-basics/#dependency-scope","text":"Compile - available on all classpaths, propogates to downstream projects. (this dependency is include when your project is included as another project's dependency) Provided - like Compile but expected to be provided by JDK/container at runtime. Runtime - not required for compilation, but needed at runtime (eg. data access for a database) Test - on available on test classpath. Not transitive (e.g. junit or mockito not required for projects that are dependent on your project) System - similiar to provided Import - import the dependencies of a POM","title":"Dependency Scope"},{"location":"software_dev/maven/02-maven-basics/#depdency-plug-in","text":"","title":"Depdency Plug In"},{"location":"software_dev/maven/02-maven-basics/#useful-goals","text":"mvn dependency:tree - show dependecy tree, useful for resolving conflicts mvn dependency:go-offline - resolve all and prepare to go offline mvn dependency:purge-local-repository - handy troubleshooting step mvn dependency:sources - get sources for all dependencies","title":"Useful goals"},{"location":"software_dev/maven/02-maven-basics/#standard-directory-layout","text":"Apache Maven's Guide to Standard Directory Layout main - contains source code organised by language (e.g. java and kotlin ) resources - contains files such as text files, xml files, properties files, images and so on","title":"Standard Directory Layout"},{"location":"software_dev/maven/06-maven-plugins/","text":"Maven Plugins https://maven.apache.org/plugins/index.html Maven is effectively a framework that runs plugins. It just knows which plugins to run and when. Lifecycle Plugins maven-clean-plugin one goal - clean remove files generated during build process by default removes /target directory from project root and submodule root folders Can add the clean cycle to another lifecycle by adding the following within the project tag e.g. This runs the clean:clean plugin goal as part of the initialize phase. <project> ... <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-clean-plugin</artifactId> <version>3.1.0</version> <!-- can omit the version number - it will be inherited, but will generate a warning that it's missing --> <executions> <execution> <id>auto-clean</id> <phase>initialize</phase> <goals> <goal>clean</goal> </goals> </execution> </plugin> </plugins> </build> ... </project> Common practice: By hooking the clean plugin into specific phases (like initialize), it can save you from having to type in clean on the command line, e.g. Instead of mvn clean package , you can now use mvn package Instead of mvn clean install , you can now use mvn install Effectively this is adding the clean plugin goal into the default lifecycle. maven-compiler-plugin in Default Lifecycle two goals - compiler:compile, compiler:testCompile (and a compiler:help goal) by default, uses the compiler 'javax.tools.JavaCompiler' - can be configured to use javac default source and target language levels are Java 1.6, apache encourages these values to be set Can change the compiler version in the POM.xml file. <properties> ... <java.version>11</java.version> <!-- The following two lines might also be required --> <maven.compiler.source>${java.version}</maven.compiler.source> <maven.compiler.target>${java.version}</maven.compiler.target> ... </properties> This will compile to java version 11 - changing this (e.g. to 1.6) will compile the code to a different version. Resources Plugin https://maven.apache.org/plugins/maven-resources-plugin/ in Default Lifecycle 3 goals - resources:resources, resources:testResources, resources:copy-resources purpose is to copy project resources to output directory (target dir) Resources normally live in src -> main -> resources and src -> test -> resources resources:resources copies files in resources into target/classes ready to be packaged into a jar. Can add an external resource directory by adding the following to POM.xml <project> ... <build> <resources> <resource> <directory>[your files here]</directory> </resource> </resources> </build> ... </project> This overrides the default resources directory, but you can add multiple resources <resources> <resource> <directory>resource1</directory> </resource> <resource> <directory>resource2</directory> </resource> <resource> <directory>resource3</directory> </resource> </resources> Other things this plugin can be configured for is: specifying a character encoding scheme filtering including and excluding files/folders Surefire Plugin in Default Lifecycle one goal: surefire:test (also surefire:help) by default supports: JUnit3, JUnit4, JUnit5 and TestNG by default includes classes named: Test , Test, Tests, TestCase (can change these) also handles POJO tests Runs tests out of your test directory. Reports are available in target/surefire-reports . JAR Plugin in Default Lifecycle two goals: jar:jar, jar:test-jar purpose - build jars from compiled artifacts and project resources can be configured for custom manifests and to make executable jars Adding a ClassPath entry to the Manifest <project> ... <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-jar-plugin</artifactId> ... <configuration> <archive> <manifest> <addClasspath>true</addClasspath> </manifest> </archive> </configuration> ... </plugin> </plugins> </build> ... <dependencies> <dependency> <groupId>commons-lang</groupId> <artifactId>commons-lang</artifactId> <version>2.1</version> </dependency> <dependency> <groupId>org.codehaus.plexus</groupId> <artifactId>plexus-utils</artifactId> <version>1.1</version> </dependency> </dependencies> ... </project> This creates the following manifest Manifest-Version: 1.0 Created-By: Apache Maven ${maven.version} Build-Jdk: ${java.version} Class-Path: plexus-utils-1.1.jar commons-lang-2.1.jar Creating an Executable JAR <project> ... <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-jar-plugin</artifactId> ... <configuration> <archive> <manifest> <addClasspath>true</addClasspath> <mainClass>fully.qualified.MainClass</mainClass> </manifest> </archive> </configuration> ... </plugin> </plugins> </build> ... </project> Manifest-Version: 1.0 Created-By: Apache Maven ${maven.version} Build-Jdk: ${java.version} Main-Class: fully.qualified.MainClass Class-Path: plexus-utils-1.1.jar commons-lang-2.1.jar Deploy Plugin in Default Lifecycle two goals: deploy:deploy (deploys artifacts), deploy:deploy-file (deploys specific files) purpose: to deploy project artifacts to remote Maven repositories typical done in CI environments (not normally done from a developer workstation) configuration is typically part of Maven POM - attributes for deployment are built into the POM Maven Site Plugin in SITE Lifecycle 7 goals site:site - generate site for project site:deploy - deploy site via Wagon site:run - run site locally using Jetty as web server site:stage - generate site to a local staging location (e.g. for testing) site:stage-deploy - deploy site to a remote staging location site:attach-descriptor - adds site.xml (site map file used by search engines) to files for deployment site:jar - bundles site into a jar for deployment to a repository site:effective-site - generates the site.xml file Can use a variety of formats (including XML and Markdown) Maven and Source Control You do not need to check in the following as part of a maven project.. the target directory *.iml file the .idea folder Other Plugins Reference can be found at: maven.apache.org/ref/3.6.0/plugin-management.html","title":"Maven Plugins"},{"location":"software_dev/maven/06-maven-plugins/#maven-plugins","text":"https://maven.apache.org/plugins/index.html Maven is effectively a framework that runs plugins. It just knows which plugins to run and when.","title":"Maven Plugins"},{"location":"software_dev/maven/06-maven-plugins/#lifecycle-plugins","text":"","title":"Lifecycle Plugins"},{"location":"software_dev/maven/06-maven-plugins/#maven-clean-plugin","text":"one goal - clean remove files generated during build process by default removes /target directory from project root and submodule root folders Can add the clean cycle to another lifecycle by adding the following within the project tag e.g. This runs the clean:clean plugin goal as part of the initialize phase. <project> ... <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-clean-plugin</artifactId> <version>3.1.0</version> <!-- can omit the version number - it will be inherited, but will generate a warning that it's missing --> <executions> <execution> <id>auto-clean</id> <phase>initialize</phase> <goals> <goal>clean</goal> </goals> </execution> </plugin> </plugins> </build> ... </project> Common practice: By hooking the clean plugin into specific phases (like initialize), it can save you from having to type in clean on the command line, e.g. Instead of mvn clean package , you can now use mvn package Instead of mvn clean install , you can now use mvn install Effectively this is adding the clean plugin goal into the default lifecycle.","title":"maven-clean-plugin"},{"location":"software_dev/maven/06-maven-plugins/#maven-compiler-plugin","text":"in Default Lifecycle two goals - compiler:compile, compiler:testCompile (and a compiler:help goal) by default, uses the compiler 'javax.tools.JavaCompiler' - can be configured to use javac default source and target language levels are Java 1.6, apache encourages these values to be set Can change the compiler version in the POM.xml file. <properties> ... <java.version>11</java.version> <!-- The following two lines might also be required --> <maven.compiler.source>${java.version}</maven.compiler.source> <maven.compiler.target>${java.version}</maven.compiler.target> ... </properties> This will compile to java version 11 - changing this (e.g. to 1.6) will compile the code to a different version.","title":"maven-compiler-plugin"},{"location":"software_dev/maven/06-maven-plugins/#resources-plugin","text":"https://maven.apache.org/plugins/maven-resources-plugin/ in Default Lifecycle 3 goals - resources:resources, resources:testResources, resources:copy-resources purpose is to copy project resources to output directory (target dir) Resources normally live in src -> main -> resources and src -> test -> resources resources:resources copies files in resources into target/classes ready to be packaged into a jar. Can add an external resource directory by adding the following to POM.xml <project> ... <build> <resources> <resource> <directory>[your files here]</directory> </resource> </resources> </build> ... </project> This overrides the default resources directory, but you can add multiple resources <resources> <resource> <directory>resource1</directory> </resource> <resource> <directory>resource2</directory> </resource> <resource> <directory>resource3</directory> </resource> </resources> Other things this plugin can be configured for is: specifying a character encoding scheme filtering including and excluding files/folders","title":"Resources Plugin"},{"location":"software_dev/maven/06-maven-plugins/#surefire-plugin","text":"in Default Lifecycle one goal: surefire:test (also surefire:help) by default supports: JUnit3, JUnit4, JUnit5 and TestNG by default includes classes named: Test , Test, Tests, TestCase (can change these) also handles POJO tests Runs tests out of your test directory. Reports are available in target/surefire-reports .","title":"Surefire Plugin"},{"location":"software_dev/maven/06-maven-plugins/#jar-plugin","text":"in Default Lifecycle two goals: jar:jar, jar:test-jar purpose - build jars from compiled artifacts and project resources can be configured for custom manifests and to make executable jars","title":"JAR Plugin"},{"location":"software_dev/maven/06-maven-plugins/#adding-a-classpath-entry-to-the-manifest","text":"<project> ... <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-jar-plugin</artifactId> ... <configuration> <archive> <manifest> <addClasspath>true</addClasspath> </manifest> </archive> </configuration> ... </plugin> </plugins> </build> ... <dependencies> <dependency> <groupId>commons-lang</groupId> <artifactId>commons-lang</artifactId> <version>2.1</version> </dependency> <dependency> <groupId>org.codehaus.plexus</groupId> <artifactId>plexus-utils</artifactId> <version>1.1</version> </dependency> </dependencies> ... </project> This creates the following manifest Manifest-Version: 1.0 Created-By: Apache Maven ${maven.version} Build-Jdk: ${java.version} Class-Path: plexus-utils-1.1.jar commons-lang-2.1.jar","title":"Adding a ClassPath entry to the Manifest"},{"location":"software_dev/maven/06-maven-plugins/#creating-an-executable-jar","text":"<project> ... <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-jar-plugin</artifactId> ... <configuration> <archive> <manifest> <addClasspath>true</addClasspath> <mainClass>fully.qualified.MainClass</mainClass> </manifest> </archive> </configuration> ... </plugin> </plugins> </build> ... </project> Manifest-Version: 1.0 Created-By: Apache Maven ${maven.version} Build-Jdk: ${java.version} Main-Class: fully.qualified.MainClass Class-Path: plexus-utils-1.1.jar commons-lang-2.1.jar","title":"Creating an Executable JAR"},{"location":"software_dev/maven/06-maven-plugins/#deploy-plugin","text":"in Default Lifecycle two goals: deploy:deploy (deploys artifacts), deploy:deploy-file (deploys specific files) purpose: to deploy project artifacts to remote Maven repositories typical done in CI environments (not normally done from a developer workstation) configuration is typically part of Maven POM - attributes for deployment are built into the POM","title":"Deploy Plugin"},{"location":"software_dev/maven/06-maven-plugins/#maven-site-plugin","text":"in SITE Lifecycle 7 goals site:site - generate site for project site:deploy - deploy site via Wagon site:run - run site locally using Jetty as web server site:stage - generate site to a local staging location (e.g. for testing) site:stage-deploy - deploy site to a remote staging location site:attach-descriptor - adds site.xml (site map file used by search engines) to files for deployment site:jar - bundles site into a jar for deployment to a repository site:effective-site - generates the site.xml file Can use a variety of formats (including XML and Markdown)","title":"Maven Site Plugin"},{"location":"software_dev/maven/06-maven-plugins/#maven-and-source-control","text":"You do not need to check in the following as part of a maven project.. the target directory *.iml file the .idea folder","title":"Maven and Source Control"},{"location":"software_dev/maven/06-maven-plugins/#other-plugins","text":"Reference can be found at: maven.apache.org/ref/3.6.0/plugin-management.html","title":"Other Plugins"},{"location":"software_dev/maven/maven-build-lifecycles/","text":"Maven Build Lifecycles Summary 3 standard lifecycles in Maven (clean, default, site) each lifecycle made up of phases each phase may have 1 or more plugin goals Lifecycles and phases provide a framework to call plugin goals in a sequence. 3 Predefined Life Cycles Clean removes build artefacts defined with plugin bindings Default does the build and deployment of the project defined without plugin bindings bindings defined for each package Site creates web site for project defined with plugins least used in enterprise Maven\u2019s websites are an example Clean Lifecycle phase: pre-clean phase: clean - plugin binding -> clean:clean goal phase: post-clean Default Lifecycle High level phase -> phases Validate -> initialise, generate sources, process sources, generate resources, process resources Compile -> process classes, generate test sources, process test sources, generate test resources, process test resources Test -> test compile, process test class Package -> prepare package Verify -> pre integration test, integration test, post integration test Install Deploy Default Lifecycle JAR packaging phase -> plugin process-resources -> maven-resources-plugin:resources compile -> maven-compiler-plugin:compile process-test-resources -> maven-resources-plugin:testResources test-compile -> maven-compiler-plugin:testCompile test -> maven-surefire-plugin:test package -> maven-jar-plugin:jar install -> maven-install-plugin:install deploy -> maven-deploy-plugin:deploy Site Build Lifecycle phase:pre-site - no plugin phase:site - maven-site-plugin:site phase:post-site - no plugin phase:site-deploy - maven-site-plugin:deploy","title":"Maven Build Lifecycles"},{"location":"software_dev/maven/maven-build-lifecycles/#maven-build-lifecycles","text":"","title":"Maven Build Lifecycles"},{"location":"software_dev/maven/maven-build-lifecycles/#summary","text":"3 standard lifecycles in Maven (clean, default, site) each lifecycle made up of phases each phase may have 1 or more plugin goals Lifecycles and phases provide a framework to call plugin goals in a sequence.","title":"Summary"},{"location":"software_dev/maven/maven-build-lifecycles/#3-predefined-life-cycles","text":"","title":"3 Predefined Life Cycles"},{"location":"software_dev/maven/maven-build-lifecycles/#clean","text":"removes build artefacts defined with plugin bindings","title":"Clean"},{"location":"software_dev/maven/maven-build-lifecycles/#default","text":"does the build and deployment of the project defined without plugin bindings bindings defined for each package","title":"Default"},{"location":"software_dev/maven/maven-build-lifecycles/#site","text":"creates web site for project defined with plugins least used in enterprise Maven\u2019s websites are an example","title":"Site"},{"location":"software_dev/maven/maven-build-lifecycles/#clean-lifecycle","text":"phase: pre-clean phase: clean - plugin binding -> clean:clean goal phase: post-clean","title":"Clean Lifecycle"},{"location":"software_dev/maven/maven-build-lifecycles/#default-lifecycle","text":"High level phase -> phases Validate -> initialise, generate sources, process sources, generate resources, process resources Compile -> process classes, generate test sources, process test sources, generate test resources, process test resources Test -> test compile, process test class Package -> prepare package Verify -> pre integration test, integration test, post integration test Install Deploy","title":"Default Lifecycle"},{"location":"software_dev/maven/maven-build-lifecycles/#default-lifecycle-jar-packaging","text":"phase -> plugin process-resources -> maven-resources-plugin:resources compile -> maven-compiler-plugin:compile process-test-resources -> maven-resources-plugin:testResources test-compile -> maven-compiler-plugin:testCompile test -> maven-surefire-plugin:test package -> maven-jar-plugin:jar install -> maven-install-plugin:install deploy -> maven-deploy-plugin:deploy","title":"Default Lifecycle JAR packaging"},{"location":"software_dev/maven/maven-build-lifecycles/#site-build-lifecycle","text":"phase:pre-site - no plugin phase:site - maven-site-plugin:site phase:post-site - no plugin phase:site-deploy - maven-site-plugin:deploy","title":"Site Build Lifecycle"},{"location":"software_dev/maven/misc_notes/","text":"Misc Notes Using platform encoding ... build is platform dependent This or a similar warning is emitted by a plugin that processes plain text files but has not been configured to use a specific file encoding. So eliminating the warning is simply a matter of finding out which plugin emits it and how to configure the file encoding for it. Add the following property to your pom.xml (or one of it's parent pom's) <properties> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties>","title":"Misc Notes"},{"location":"software_dev/maven/misc_notes/#misc-notes","text":"","title":"Misc Notes"},{"location":"software_dev/maven/misc_notes/#using-platform-encoding-build-is-platform-dependent","text":"This or a similar warning is emitted by a plugin that processes plain text files but has not been configured to use a specific file encoding. So eliminating the warning is simply a matter of finding out which plugin emits it and how to configure the file encoding for it. Add the following property to your pom.xml (or one of it's parent pom's) <properties> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties>","title":"Using platform encoding ... build is platform dependent"},{"location":"software_dev/python/python/","text":"Python Learning Raise to the power -> **, e.g. 2**8 = 256 Built In Functions dir(__builtins__) # shows all the builtin functions (and other stuff, eg., errors) dir(list) # shows all the methods that apply to lists Common builtin functions type(object) -> the object's type str(object) -> returns a nice string representation of the object len int input chr abs bool Looping for x in range(0:3): for x in range(0,8,2): Lists index, +ve index from start, -ve index from end (-1 = last item only) slicing [start:stop:step] (excludes upper bound - e.g. stop isn't included) valid options:- [:] , [4:] , [:5] , [-3:] , [:-5] .remove(value) - removes the first instance of value in the list .pop(index) - removes the item at index location [x for x in ...] - list generator Can chain slices together e.g. \"Hello!\"[-3][1] -> returns 'o' [-3] returns \"lo!\" and then \"lo!\"[1] returns \"o\" Tuples Defined with round brackets. Basically an immutable list (cannot add, update or remove items in a tuple) Dictionary Matched key:value pairs {'a':1, 'b':2, 'c':3} dict.keys() -> lists all the keys dict.values() -> lists all the values dict[key] -> returns the value associated with that key, throws an error if key doesn't exist dict.remove[key] -> removes the k:v pair (also \"del dict[k]\" does the same thing) dict[key] = value -> adds the k:v pair or updates the k:v pair if it already exists in the dict Zipping keys = ['a', 'b', 'c'] vals = [1,2,3] mydict = dict(zip(keys,vals)) mydict now equals -> {'a':1, 'b':2, 'c':3} Exceptions >>> import traceback, sys >>> def grail(x): ... raise TypeError('already got one') ... >>> try: ... grail('arthur') ... except: ... exc_info = sys.exc_info() ... print(exc_info[0]) ... print(exc_info[1]) ... traceback.print_tb(exc_info[2]) ... <class 'TypeError'> already got one File \"<stdin>\", line 2, in <module> File \"<stdin>\", line 2, in grail os module os.getpid() os.getcwd() os.chdir('/Users/Me') Portability constants os.pathsep, os.sep, os.pardir, os.curdir, os.linesep Basic file & path functions os.path.isdir('path name') os.path.isfile('path name') os.path.exists os.path.getsize('path name') os.path.split('path name') # separates filename from its path os.path.dirname os.path.basename os.path.split.ext os.path.join - puts dirname and basename back together in the proper format os.path.normpath('path name') - returns the normal path (in case separators get mixed up, e.g. \\ and /) os.path.abspath() - returns the absolute path e.g. os.path.abspath('.') - returns the same as os.path.cwd os.path.abspath('') - considered same as '.' os.path.abspath('..') - returns absolute path to parent folder Shell Commands os.system('shell command here') e.g. os.system('ls -la') Will wait for the command to return. To run the command in it's own process use:- (windows) os.system('run shell command') (linux/mac) os.system(\"shell command &') os.popen('shell command') takes the output of the shell command and runs it through a pipe or io stream e.g. print(os.popen('ls -la').read()) text = os.popen('ls -la').read() // takes the output from 'ls -la' and passes it to text Shell Commands - Subprocess module import subprocess subprocess.call('python helloworld.py) # like os.system, but returns the return code as well pipe = subprocess.Popen('python helloshell.py', stdout=subprocess.PIPE) pipe.communicate() (b'The Meaning of Life\\r\\n', None) pipe.returncode 0 Impractical Python Ch1. pylint pip install pylint pylint filename.py # linux python -m pylint filename.py #Windows pylint -rn # no reports pylint --max_line_length=79","title":"Python Learning"},{"location":"software_dev/python/python/#python-learning","text":"Raise to the power -> **, e.g. 2**8 = 256","title":"Python Learning"},{"location":"software_dev/python/python/#built-in-functions","text":"dir(__builtins__) # shows all the builtin functions (and other stuff, eg., errors) dir(list) # shows all the methods that apply to lists Common builtin functions type(object) -> the object's type str(object) -> returns a nice string representation of the object len int input chr abs bool","title":"Built In Functions"},{"location":"software_dev/python/python/#looping","text":"for x in range(0:3): for x in range(0,8,2):","title":"Looping"},{"location":"software_dev/python/python/#lists","text":"index, +ve index from start, -ve index from end (-1 = last item only) slicing [start:stop:step] (excludes upper bound - e.g. stop isn't included) valid options:- [:] , [4:] , [:5] , [-3:] , [:-5] .remove(value) - removes the first instance of value in the list .pop(index) - removes the item at index location [x for x in ...] - list generator Can chain slices together e.g. \"Hello!\"[-3][1] -> returns 'o' [-3] returns \"lo!\" and then \"lo!\"[1] returns \"o\"","title":"Lists"},{"location":"software_dev/python/python/#tuples","text":"Defined with round brackets. Basically an immutable list (cannot add, update or remove items in a tuple)","title":"Tuples"},{"location":"software_dev/python/python/#dictionary","text":"Matched key:value pairs {'a':1, 'b':2, 'c':3} dict.keys() -> lists all the keys dict.values() -> lists all the values dict[key] -> returns the value associated with that key, throws an error if key doesn't exist dict.remove[key] -> removes the k:v pair (also \"del dict[k]\" does the same thing) dict[key] = value -> adds the k:v pair or updates the k:v pair if it already exists in the dict Zipping keys = ['a', 'b', 'c'] vals = [1,2,3] mydict = dict(zip(keys,vals)) mydict now equals -> {'a':1, 'b':2, 'c':3}","title":"Dictionary"},{"location":"software_dev/python/python/#exceptions","text":">>> import traceback, sys >>> def grail(x): ... raise TypeError('already got one') ... >>> try: ... grail('arthur') ... except: ... exc_info = sys.exc_info() ... print(exc_info[0]) ... print(exc_info[1]) ... traceback.print_tb(exc_info[2]) ... <class 'TypeError'> already got one File \"<stdin>\", line 2, in <module> File \"<stdin>\", line 2, in grail","title":"Exceptions"},{"location":"software_dev/python/python/#os-module","text":"os.getpid() os.getcwd() os.chdir('/Users/Me')","title":"os module"},{"location":"software_dev/python/python/#portability-constants","text":"os.pathsep, os.sep, os.pardir, os.curdir, os.linesep","title":"Portability constants"},{"location":"software_dev/python/python/#basic-file-path-functions","text":"os.path.isdir('path name') os.path.isfile('path name') os.path.exists os.path.getsize('path name') os.path.split('path name') # separates filename from its path os.path.dirname os.path.basename os.path.split.ext os.path.join - puts dirname and basename back together in the proper format os.path.normpath('path name') - returns the normal path (in case separators get mixed up, e.g. \\ and /) os.path.abspath() - returns the absolute path e.g. os.path.abspath('.') - returns the same as os.path.cwd os.path.abspath('') - considered same as '.' os.path.abspath('..') - returns absolute path to parent folder","title":"Basic file &amp; path functions"},{"location":"software_dev/python/python/#shell-commands","text":"os.system('shell command here') e.g. os.system('ls -la') Will wait for the command to return. To run the command in it's own process use:- (windows) os.system('run shell command') (linux/mac) os.system(\"shell command &') os.popen('shell command') takes the output of the shell command and runs it through a pipe or io stream e.g. print(os.popen('ls -la').read()) text = os.popen('ls -la').read() // takes the output from 'ls -la' and passes it to text","title":"Shell Commands"},{"location":"software_dev/python/python/#shell-commands-subprocess-module","text":"import subprocess subprocess.call('python helloworld.py) # like os.system, but returns the return code as well pipe = subprocess.Popen('python helloshell.py', stdout=subprocess.PIPE) pipe.communicate() (b'The Meaning of Life\\r\\n', None) pipe.returncode 0","title":"Shell Commands - Subprocess module"},{"location":"software_dev/python/python/#impractical-python","text":"","title":"Impractical Python"},{"location":"software_dev/python/python/#ch1-pylint","text":"pip install pylint pylint filename.py # linux python -m pylint filename.py #Windows pylint -rn # no reports pylint --max_line_length=79","title":"Ch1. pylint"},{"location":"software_dev/tools/vi_notes/","text":"VIM MultiView The commands for multi views are:- action keystroke/seq new split window (horizontal split) [CTRL] + w , s new split window (vertical split) [CTRL] + w , v close current split window (1) [CTRL] + w , q move focus to window to the left [CTRL] + w , h move focus to window to the right [CTRL] + w , l move focus to window below [CTRL] + w , j move focus to window above [CTRL] + w , k (1) also closes the main window Commands command action :e \\ open file :Ex \\ browse directory to find file (if no directory given, will browse current dir) Inserting and Undoing key action o opens new line below cursor O opens new line above cursor u undo Copying and Pasting key action yy copies (yanks) the current line P paste before current line p paste after current line Deleting and Changing Text key action diw delete inner word di\" delete everything between surrounding quote marks - also works with [ { \" ' ( ciw change inner word ci( change contents of parantheses D delete to end of line dd delete line","title":"VIM"},{"location":"software_dev/tools/vi_notes/#vim","text":"","title":"VIM"},{"location":"software_dev/tools/vi_notes/#multiview","text":"The commands for multi views are:- action keystroke/seq new split window (horizontal split) [CTRL] + w , s new split window (vertical split) [CTRL] + w , v close current split window (1) [CTRL] + w , q move focus to window to the left [CTRL] + w , h move focus to window to the right [CTRL] + w , l move focus to window below [CTRL] + w , j move focus to window above [CTRL] + w , k (1) also closes the main window","title":"MultiView"},{"location":"software_dev/tools/vi_notes/#commands","text":"command action :e \\ open file :Ex \\ browse directory to find file (if no directory given, will browse current dir)","title":"Commands"},{"location":"software_dev/tools/vi_notes/#inserting-and-undoing","text":"key action o opens new line below cursor O opens new line above cursor u undo","title":"Inserting and Undoing"},{"location":"software_dev/tools/vi_notes/#copying-and-pasting","text":"key action yy copies (yanks) the current line P paste before current line p paste after current line","title":"Copying and Pasting"},{"location":"software_dev/tools/vi_notes/#deleting-and-changing-text","text":"key action diw delete inner word di\" delete everything between surrounding quote marks - also works with [ { \" ' ( ciw change inner word ci( change contents of parantheses D delete to end of line dd delete line","title":"Deleting and Changing Text"},{"location":"software_dev/tools/vs_code_learning/","text":"VS Code Shortcuts - General Action Shortcut Command Palette [CTRL] + Shift + P Command Palette (file search only) [CTRL] + P Refactor (across files) F2 Open/Close Terminal [CTRL] + ' Select Item at Cursor [Ctrl] + D Shortcuts - Coding Action Shortcut Goto Definition F12 Peek Definition [Alt] + F12 Goto References [Shift] + F12 Find All References [Alt] + [Shift] + F12 Format Document [Alt] + [Shift] + F Organise Imports [Alt] + [Shift] + O Autocomplete [Ctrl] + Space Quick Fix Menu [Ctrl] + . Holding [Ctrl] or [Cmd] while hovering your mouse over your code will turn references, etc. into links you can click on. Note: On an NVidia Windows machine [Alt]+F12 is mapped in nVidia geForce so might need remapping. Other Notes can use the command palette to open files can create snippets (by language) to insert common code (type 'snip' into command palette) When creating files, can specify folder as part of the filename e.g. mydir/main.cpp and code will create the folder if it doesn't already exist. (sometimes you need to refresh the project tree with the refresh icon to the right of it's name) Right click on an item gives open to go to the definition or peek at it. Stuff to go in settings.json \"editor.renderIndentGuides\": false, You can automate the organising of imports, etc.. by editting the settings.json file and adding \"editor.codeActionsOnSave\": { \"source.organizeImports\": true } Turn off use of tabs when working with markdown... \"[markdown]\": { \"editor.insertSpaces\": false } Useful Palette Commands Reload Window Extension Shortcuts Enhanced Markdown Preview Action Shortcut Open Preview Pane [CTRL] + K, V","title":"VS Code"},{"location":"software_dev/tools/vs_code_learning/#vs-code","text":"","title":"VS Code"},{"location":"software_dev/tools/vs_code_learning/#shortcuts-general","text":"Action Shortcut Command Palette [CTRL] + Shift + P Command Palette (file search only) [CTRL] + P Refactor (across files) F2 Open/Close Terminal [CTRL] + ' Select Item at Cursor [Ctrl] + D","title":"Shortcuts - General"},{"location":"software_dev/tools/vs_code_learning/#shortcuts-coding","text":"Action Shortcut Goto Definition F12 Peek Definition [Alt] + F12 Goto References [Shift] + F12 Find All References [Alt] + [Shift] + F12 Format Document [Alt] + [Shift] + F Organise Imports [Alt] + [Shift] + O Autocomplete [Ctrl] + Space Quick Fix Menu [Ctrl] + . Holding [Ctrl] or [Cmd] while hovering your mouse over your code will turn references, etc. into links you can click on. Note: On an NVidia Windows machine [Alt]+F12 is mapped in nVidia geForce so might need remapping.","title":"Shortcuts - Coding"},{"location":"software_dev/tools/vs_code_learning/#other-notes","text":"can use the command palette to open files can create snippets (by language) to insert common code (type 'snip' into command palette) When creating files, can specify folder as part of the filename e.g. mydir/main.cpp and code will create the folder if it doesn't already exist. (sometimes you need to refresh the project tree with the refresh icon to the right of it's name) Right click on an item gives open to go to the definition or peek at it.","title":"Other Notes"},{"location":"software_dev/tools/vs_code_learning/#stuff-to-go-in-settingsjson","text":"\"editor.renderIndentGuides\": false, You can automate the organising of imports, etc.. by editting the settings.json file and adding \"editor.codeActionsOnSave\": { \"source.organizeImports\": true } Turn off use of tabs when working with markdown... \"[markdown]\": { \"editor.insertSpaces\": false }","title":"Stuff to go in settings.json"},{"location":"software_dev/tools/vs_code_learning/#useful-palette-commands","text":"Reload Window","title":"Useful Palette Commands"},{"location":"software_dev/tools/vs_code_learning/#extension-shortcuts","text":"","title":"Extension Shortcuts"},{"location":"software_dev/tools/vs_code_learning/#enhanced-markdown-preview","text":"Action Shortcut Open Preview Pane [CTRL] + K, V","title":"Enhanced Markdown Preview"}]}